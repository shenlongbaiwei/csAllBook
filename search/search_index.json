{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to davely's csAll book\uff01","text":""},{"location":"#cs","title":"\u672c\u4e66\u4e3b\u8981\u4e0a\u4f20\u4e2a\u4eba\u5728\u5b66\u4e60cs\u7684\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u95ee\u9898\u548c\u6280\u672f\u603b\u7ed3\uff0c\u4ee5\u53ca\u5bf9\u4e8e\u65b0\u77e5\u8bc6\u548c\u76f8\u5173\u8d44\u6e90\u7684\u5b66\u4e60\u5206\u4eab\u3002","text":"<p>\u672c\u8ba1\u7b97\u673a\u767e\u79d1\u6307\u5357(\u7b14\u8bb0)\u4e3b\u8981\u4ece\u6570\u636e\u5e93\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff0cc/c++\uff0c\u7b97\u6cd5\uff0c\u6570\u5b66\uff0c\u6982\u7387\u8bba\uff0cps\u7b49\u7b49\u65b9\u9762\u8fdb\u884c\u4e0d\u65ad\u5b8c\u5584\u603b\u7ed3\uff0c\u65e8\u5728\u5199\u51fa\u4e00\u672c\u4e2a\u4eba\u7684\u8ba1\u7b97\u673a\u5168\u6808\u767e\u79d1\u6307\u5357\uff0c\u76ee\u6807\uff1a\u5b9e\u73b0\u6700\u5168\u7684\u8ba1\u7b97\u673a\u767e\u79d1\u77e5\u8bc6\u5168\u6307\u5357\uff0c\u5e76\u5b9a\u671f\u6bcf\u5468\u4e00\u8fdb\u884c\u4e0a\u4f20\u66f4\u65b0\u76f8\u5173\u5185\u5bb9\uff0c\u5e76\u8fdb\u884c\u6bcf\u5468\u5c0f\u7ed3\u548c\u672a\u6765\u4e00\u5468\u7684\u8ba1\u5212\u5236\u5b9a\uff0c\u5076\u5c14\u4e0d\u5b9a\u65f6\u4e0a\u4f20\u5b66\u4e60\u8d44\u6599\u53ca\u76f8\u5173\u5185\u5bb9\u3002</p> <p>\u5f53\u524d\u8fdb\u5ea6\uff1ac++,\u7b97\u6cd5\uff0c\u6570\u636e\u5e93...</p> <p>\u672c\u4eba\u738b\u6770\u7c89\u4e1d\u2764\ud83d\ude0b\ud83d\ude0e</p> <p></p>"},{"location":"c%2B%2B/c%2B%2B%E7%9A%84boost%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%BA%93/","title":"c++\u7684boost\u5e93\u548c\u76f8\u5173\u7684json\u6570\u636e\u89e3\u6790\u5e93","text":"<p>\u6211\u4e3b\u8981\u662f\u5b66\u4e60\u4e86\u5982\u4f55\u5b89\u88c5boost\u5e93\uff0c\u53ef\u4ee5\u53bbboost\u5b98\u7f51\u53bb\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u5730\u5740\u4e3a\uff1a</p> <p>boost\u5b98\u7f51</p> <p>\u9996\u5148\u8fdb\u5165\u5b98\u7f51\u4e0b\u8f7d\u5bf9\u5e94\u7684boost\u5e93\u6587\u4ef6\uff0c\u70b9\u51fb\u4e3b\u9875\u9762\u7684download\u6309\u94ae\u5373\u53ef\u8fdb\u884c\u4e0b\u8f7d\uff0c</p> <p></p> <p>\u7136\u540e\u70b9\u51fb\u8fdb\u5165\u76f8\u5173\u4e0b\u8f7d\u9875\u9762\uff0c</p> <p></p> <p>\u4e4b\u540e\u5c31\u662f\u76f4\u63a5\u8fdb\u884c\u76f8\u5173\u4e0b\u8f7d\u3002</p>"},{"location":"c%2B%2B/c%2B%2B%E7%9A%84boost%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%BA%93/#_1","title":"\u4e0b\u8f7d\u5b8c\u6bd5\u540e\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u89e3\u538b\u548c\u7f16\u8bd1\u3002","text":"<p>\u5728\u8fd9\u4e00\u6b65\u53ef\u80fd\u4f1a\u6ca1\u6709b2.exe\u3002</p> <p></p> <p>\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u53cc\u51fbboosttrap.bat\u8fd9\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\u3002</p> <p>\u4e4b\u540e\u5c31\u4f1a\u751f\u6210b2.exe\u3002</p> <p>\u7136\u540e\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8fdb\u5165windows\u7684powershell\u754c\u9762\u3002</p> <p>\u6267\u884c\u76f8\u5173\u7684\u7f16\u8bd1\u547d\u4ee4\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u7f16\u8bd1\u4e86\u3002</p> <p>\u7b49\u5f85\u7f16\u8bd1\u5b8c\u6210\u5373\u53ef\u3002</p>"},{"location":"c%2B%2B/c%2B%2B%E7%9A%84boost%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%BA%93/#_2","title":"\u7f16\u8bd1\u5b8c\u6210\u540e","text":"<p>\u5728vs2019\uff0c\u65b0\u5efa\u4e00\u4e2a\u63a7\u5236\u53f0\u9879\u76ee\uff0c\u5728\u63a7\u5236\u53f0\u9879\u76ee\u4e2d\uff0c\u5c06\u9879\u76ee\u5c5e\u6027\u7684\u5305\u542b\u76ee\u5f55\u548c\u5e93\u76ee\u5f55\u5206\u522b\u8fdb\u884c\u7f16\u8f91\u6dfb\u52a0\uff0c\u7136\u540e\u81ea\u884c\u5728\u7f51\u7edc\u4e0a\u627e\u4e00\u4e2a\uff0c\u6216\u8005ai\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u6837\u4f8b\uff0c\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6ce8\u610f\u4f60\u53ef\u4ee5\u81ea\u884c\u9009\u62e9\u7f16\u8bd1x86,x64\u7b49\u7248\u672c\u3002</p> <p>\u6d4b\u8bd5\u65e0\u8bef\u4e4b\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528boost\u5e93\u4e86\u3002</p>"},{"location":"c%2B%2B/c%2B%2B%E7%9A%84boost%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%BA%93/#jsoncpp","title":"\u7f16\u8bd1jsoncpp\u5e93","text":"<p>jsoncpp\u4e0b\u8f7d</p> <p>\u5b98\u65b9\u6587\u6863</p> <p>\u9009\u62e9windows\u7248\u672c\u7684\u4e0b\u8f7d\u3002</p> <p>\u4e4b\u540e\u8fdb\u884c\u89e3\u538b\uff0c\u6267\u884c\u76f8\u5173\u7684sln\u6587\u4ef6\u3002</p> <p></p> <p>\u5982\u679c\u51fa\u73b0\u9700\u8981\u5347\u7ea7\u76f4\u63a5\u8fdb\u884c\u5347\u7ea7\u5373\u53ef\u3002</p> <p>\u4e4b\u540e\u5c31\u7b49\u5f85\uff0c\u7136\u540e\u8fdb\u5165\u76f8\u5173\u7684vs2019\uff0c\u76f4\u63a5\u8fdb\u884clib_json\u7684\u91cd\u65b0\u751f\u6210\uff0c\u6ce8\u610f\u8981\u81ea\u884c\u9009\u62e9x86,x64\u7248\u672c\u7684debug,release\u8fdb\u884c\u751f\u6210\u3002</p> <p>\u4e4b\u540e\u5c31\u7b97\u751f\u6210\u6210\u529f\u4e86\u3002</p>"},{"location":"c%2B%2B/c%2B%2B%E7%9A%84boost%E5%BA%93%E5%92%8C%E7%9B%B8%E5%85%B3%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%BA%93/#_3","title":"\u9879\u76ee\u5c5e\u6027\u914d\u7f6e\u6d4b\u8bd5","text":"<p>\u5728\u9879\u76ee\u5c5e\u6027\u4e2d\uff0cvc++\u5305\u542b\u76ee\u5f55\u8bbe\u7f6e\u4e3a</p> <p></p> <p>\u7136\u540e\u5c06\u521a\u751f\u6210\u7684\u4e24\u4e2a\u9759\u6001\u5e93\u590d\u5236\u5230\u5355\u72ec\u6587\u4ef6\u5939\uff0c\u5c06\u5e93\u76ee\u5f55\u8fdb\u884c\u7f16\u5199\u9009\u62e9\u5373\u53ef\u3002</p> <p>\u4e4b\u540e\u8fdb\u884c\u76f8\u5173\u7684\u4ee3\u7801\u6d4b\u8bd5\uff0c\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8ba9ai\u751f\u6210\u4e00\u6bb5\u5373\u53ef\u3002</p> <p>\u4e3a\u4e86\u6d4b\u8bd5JSONCPP\u5e93\u662f\u5426\u5df2\u6b63\u786e\u5b89\u88c5\u5728\u4f60\u7684C++\u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684C++\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u4f7f\u7528JSONCPP\u6765\u89e3\u6790\u4e00\u4e2aJSON\u5b57\u7b26\u4e32\uff0c\u5e76\u6253\u5370\u51fa\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u7528\u4e8e\u6f14\u793a\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1a</p> <p>\u9996\u5148\uff0c\u786e\u4fdd\u4f60\u5df2\u7ecf\u6309\u7167JSONCPP\u5e93\u7684\u8bf4\u660e\u6587\u6863\u5b89\u88c5\u4e86\u5e93\uff0c\u5e76\u4e14\u5728\u7f16\u8bd1\u4f60\u7684\u7a0b\u5e8f\u65f6\u94fe\u63a5\u4e86JSONCPP\u5e93\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u793a\u4f8b\u4ee3\u7801\uff1a</p> Text Only<pre><code>cpp\n#include &lt;iostream&gt;  \n#include &lt;json/json.h&gt; // \u5f15\u5165JSONCPP\u7684\u5934\u6587\u4ef6  \n\nint main() {  \n    // \u5b9a\u4e49\u4e00\u4e2aJSON\u5b57\u7b26\u4e32  \n    std::string err;  \n    std::string json_str = R\"({\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"})\";  \n\n    // \u89e3\u6790JSON\u5b57\u7b26\u4e32  \n    Json::Reader reader;  \n    Json::Value root;  \n    bool parsingSuccessful = reader.parse(json_str, root, false, err);  \n\n    if (!parsingSuccessful) {  \n        std::cerr &lt;&lt; \"Failed to parse JSON string: \" &lt;&lt; err &lt;&lt; std::endl;  \n        return 1;  \n    }  \n\n    // \u8bbf\u95ee\u5e76\u6253\u5370JSON\u6570\u636e  \n    std::string name = root[\"name\"].asString();  \n    int age = root[\"age\"].asInt();  \n    std::string city = root[\"city\"].asString();  \n\n    std::cout &lt;&lt; \"Name: \" &lt;&lt; name &lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"Age: \" &lt;&lt; age &lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"City: \" &lt;&lt; city &lt;&lt; std::endl;  \n\n    return 0;  \n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u793a\u4f8b\u4f7f\u7528\u4e86C++11\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff08R\"(...)\"\uff09\u6765\u907f\u514d\u5728JSON\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u8f6c\u4e49\u5b57\u7b26\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u4e0d\u652f\u6301C++11\u6216\u66f4\u9ad8\u7248\u672c\u7684\u7f16\u8bd1\u5668\uff0c\u4f60\u9700\u8981\u5c06JSON\u5b57\u7b26\u4e32\u4e2d\u7684\u53cc\u5f15\u53f7\u66ff\u6362\u4e3a\u8f6c\u4e49\u7684\u53cc\u5f15\u53f7\uff08\\\"\uff09\u3002</p> <p>\u8981\u7f16\u8bd1\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u5c06JSONCPP\u5e93\u5305\u542b\u5728\u4f60\u7684\u7f16\u8bd1\u5668\u7684\u5305\u542b\u8def\u5f84\uff08include path\uff09\u4e2d\uff0c\u5e76\u786e\u4fdd\u94fe\u63a5\u5668\u53ef\u4ee5\u627e\u5230JSONCPP\u7684\u5e93\u6587\u4ef6\u3002\u7f16\u8bd1\u547d\u4ee4\u7684\u5177\u4f53\u5f62\u5f0f\u5c06\u53d6\u51b3\u4e8e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u3001\u7f16\u8bd1\u5668\u4ee5\u53caJSONCPP\u7684\u5b89\u88c5\u65b9\u5f0f\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fg++\u7f16\u8bd1\u5668\u548cLinux\u7cfb\u7edf\uff0c\u5e76\u4e14JSONCPP\u5e93\u5df2\u7ecf\u5b89\u88c5\u5728\u6807\u51c6\u4f4d\u7f6e\uff0c\u4f60\u7684\u7f16\u8bd1\u547d\u4ee4\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> Text Only<pre><code>bash\ng++ -o test_jsoncpp test_jsoncpp.cpp -ljsoncpp\n</code></pre> <p>\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u7f16\u8bd1test_jsoncpp.cpp\uff08\u4f60\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u540d\uff09\uff0c\u94fe\u63a5JSONCPP\u5e93\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u540d\u4e3atest_jsoncpp\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u8fd0\u884c\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5c06\u6253\u5370\u51fa\u89e3\u6790\u7684JSON\u6570\u636e\u3002</p> <p>\u5982\u679c\u4f60\u770b\u5230\u8f93\u51fa\u4e2d\u5305\u542bName: John Doe\u3001Age: 30\u548cCity: New York\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0cJSONCPP\u5e93\u5df2\u7ecf\u6210\u529f\u5b89\u88c5\u5e76\u53ef\u4ee5\u5728\u4f60\u7684C++\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\uff01</p>"},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E6%95%99%E7%A8%8B%EF%BC%9A%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0/","title":"\u73b0\u4ee3c++\u6559\u7a0b\uff1a\u9ad8\u901f\u4e0a\u624b\u5b66\u4e60","text":"<p>\u5b66\u4e60\u6765\u6e90\uff1a\u73b0\u4ee3c++\u6559\u7a0b</p> <p>\u539f\u4f5c\u8005\uff1a\u6b27\u957f\u5764</p> <p>\u672c\u6587\u53ea\u662f\u51fa\u4e8e\u5b66\u4e60\u76ee\u7684\uff0c\u76f8\u5173\u8be6\u7ec6\u5185\u5bb9\u54a8\u8be2\u8bf7\u8df3\u8f6c\u81f3\u539f\u4f5c\u8005\u7684\u4e66\u7c4d\u7f51\u9875\uff1a</p> <p>\u7b2c 1 \u7ae0 \u8fc8\u5411\u73b0\u4ee3 C++ \u73b0\u4ee3 C++ \u6559\u7a0b: \u9ad8\u901f\u4e0a\u624b C++ 11/14/17/20 - Modern C++ Tutorial: C++ 11/14/17/20 On the Fly</p>"},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E6%95%99%E7%A8%8B%EF%BC%9A%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0/#c_1","title":"\u7b2c\u4e00\u7ae0 \u8fc8\u5411\u73b0\u4ee3c++","text":"<p>\u5728\u5b66\u4e60\u539f\u6587\u7684\u88ab\u5f03\u7528\u7684\u7279\u6027\u65f6\uff0c\u6709\u4e00\u4e9b\u5f03\u7528\u7279\u6027\u6ca1\u63a5\u89e6\u8fc7\uff0c\u6709\u4e00\u4e9b\u63a5\u89e6\u8fc7\uff0c\u6ca1\u63a5\u89e6\u8fc7\u7684\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>\u539f\u6587\u8bf4\u6cd5\uff1a</p> <p>\u6ce8\u610f\uff1a\u5f03\u7528\u5e76\u975e\u5f7b\u5e95\u4e0d\u80fd\u7528\uff0c\u53ea\u662f\u7528\u4e8e\u6697\u793a\u7a0b\u5e8f\u5458\u8fd9\u4e9b\u7279\u6027\u5c06\u4ece\u672a\u6765\u7684\u6807\u51c6\u4e2d\u6d88\u5931\uff0c\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002\u4f46\u662f\uff0c\u5df2\u5f03\u7528\u7684\u7279\u6027\u4f9d\u7136\u662f\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u51fa\u4e8e\u517c\u5bb9\u6027\u7684\u8003\u8651\uff0c\u5927\u90e8\u5206\u7279\u6027\u5176\u5b9e\u4f1a\u300e\u6c38\u4e45\u300f\u4fdd\u7559\u3002</p> <p>\u5728\u65b0\u7248\u672c\u4e2d\u88ab\u5f03\u7528\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u4e00\u822c\u4f1a\u5728\u65b0\u7248\u8bed\u8a00\u6807\u51c6\u7684\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u9010\u6e10\u4e0d\u88ab\u652f\u6301\u548c\u51cf\u5c11\u4f7f\u7528\u3002</p> <p>\u9700\u8981\u6ce8\u610fc\u8bed\u8a00\u548cc++\u4e0d\u662f\u5305\u542b\u5173\u7cfb\uff0c\u4ed6\u4eec\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u662f\u5b58\u5728\u4ea4\u96c6\u7684\u3002</p> <p>c++\u4e0d\u662fc\u7684\u4e00\u4e2a\u8d85\u96c6\u3002</p> <p>\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u4e00\u4e9b\u81ea\u5df1\u4e0d\u719f\u6089\u7684c++\u8bed\u8a00\u7528\u6cd5\uff1a</p> <p><code>std::ref std::thread *.join() *.detach()</code></p>"},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E6%95%99%E7%A8%8B%EF%BC%9A%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0/#stdref","title":"\u4e00\u3001std::ref","text":"<p>\u8fd9\u4e2a\u8bed\u6cd5\u662fc++11\u5f15\u7528\u7684\u8bed\u6cd5\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u4f20\u53c2\u95ee\u9898\u3002</p> <p>\u56e0\u4e3a\u5728\u4e00\u822c\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u6216\u8005lambda\u8868\u8fbe\u5f0f\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u662f\u4f7f\u7528\u53c2\u6570\u7684\u62f7\u8d1d\u6784\u9020\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u5bf9\u53c2\u6570\u8fdb\u884c\u5f15\u7528\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u4f7f\u7528std::ref\u6765\u58f0\u660e\u53c2\u6570\u7684\u4f20\u9012\u7c7b\u578b\u3002</p> C++<pre><code>#include &lt;functional&gt;\n#include &lt;iostream&gt;\n\nvoid f(int&amp;a,int&amp;b){\n    std::cout&lt;&lt;\"f\u51fd\u6570\u4e2da,b\u521d\u59cb\u503c\uff1a\"&lt;&lt;a&lt;&lt;b&lt;&lt;std::endl;\n    ++a;\n    ++b;\n    std::cout&lt;&lt;\"f\u51fd\u6570\u4e2da,b\u66f4\u6539\u540e\u7684\u503c\uff1a\"&lt;&lt;a&lt;&lt;b&lt;&lt;std::endl;\n}\nint main(){\n    int a{1},b{2};\n    std::cout&lt;&lt;\"f\u51fd\u6570\u6267\u884c\u524da,b\u7684\u503c\uff1a\"&lt;&lt;a&lt;&lt;b&lt;&lt;std::endl;\n    std::function&lt;void()&gt; fang_f=std::bind(f,std::ref(a),b);\n    fang_f();\n    std::cout&lt;&lt;\"f\u51fd\u6570\u7ed3\u675f\u540ea,b\u7684\u503c\uff1a\"&lt;&lt;a&lt;&lt;b&lt;&lt;std::endl;\n\n    return 0;\n\n}\n</code></pre> <p></p>"},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E6%95%99%E7%A8%8B%EF%BC%9A%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0/#stdthread","title":"\u4e8c\u3001std::thread","text":"<p>\u8fd9\u4e2a\u662fc++\u7684\u7ebf\u7a0b\u5e93\u7684\u5b9e\u73b0\u7c7b\uff0c\u4e00\u822c\u4e0e\u5e76\u884c\u5e76\u53d1\u76f8\u5173\u7684\u51fd\u6570\u90fd\u5728\u8fd9\u4e2athread\u7c7b\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <p><code>std::thread T{f,arg};</code></p> <p><code>T.join();</code>  or   <code>T.detach();</code></p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u7ebf\u7a0b\u7684\u4f8b\u5b50\uff1a</p> C++<pre><code>#include&lt;thread&gt;\n#incldue&lt;iostream&gt;\n\nvoid print_num(int i){\n    std::cout&lt;&lt;i&lt;&lt;std::endl;\n}\nint main(){\n    for(int i=0;i&lt;5;i++){\n        std::thread T(print_num,i);\n        T.detach();//\u8fd9\u4e2a\u51fd\u6570\u4ee3\u8868\u542f\u52a8\u7684\u7ebf\u7a0b\u53ef\u4ee5\u5728\u540e\u53f0\u72ec\u7acb\u8fd0\u884c\uff0c\u5373\u6bcf\u4e2a\u751f\u6210\u7684\u7ebf\u7a0b\u90fd\u76f8\u4e92\u72ec\u7acb\uff0c\u5404\u4e2a\u7ebf\u7a0b\u4e92\u76f8\u7ade\u4e89\u8d44\u6e90\u3002\n    }\n    return 0;\n}\n</code></pre> <p>\u6267\u884c\u7ed3\u679c\u662f\u4e0d\u540c\u7ebf\u7a0b\u76f8\u4e92\u7ade\u4e89\u8d44\u6e90\uff0c\u6700\u540e\u5bfc\u81f4\u6253\u5370\u7684\u7ed3\u679c\u6ca1\u6709\u6309\u7167\u987a\u5e8f\u6765\u6267\u884c\u3002</p> <p>\u5982\u679c\u4f7f\u7528\u7684\u662f*.join\u51fd\u6570\u7684\u8bdd\uff0c\u5b83\u7684\u51fd\u6570\u529f\u80fd\u662f\u4e0d\u540c\u7ebf\u7a0b\u53ea\u6709\u5f53\u524d\u7684\u7ebf\u7a0b\u7a0b\u5e8f\u6267\u884c\u5b8c\u6210\u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u6b65\u51fd\u6570\uff0c\u6240\u4ee5\u6267\u884c\u7ed3\u679c\u662f\u6309\u987a\u5e8f\u7684\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u5728\u7ebfc++\u6d4b\u8bd5\u7f51\u7ad9\uff1a</p> <p>https://godbolt.org/</p> <p>ending!</p> <p></p>"},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","title":"\u73b0\u4ee3c++\u8bed\u6cd5\u5b66\u4e60","text":""},{"location":"c%2B%2B/%E7%8E%B0%E4%BB%A3c%2B%2B%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/#_1","title":"\u8bed\u8a00\u53ef\u7528\u6027\u7684\u5f3a\u5316","text":"<ul> <li>std::is_same</li> <li>nullptr\u4e0eNULL</li> <li>decltype</li> <li>constexpr</li> <li>if/switch\u53d8\u91cf\u58f0\u660e</li> <li>\u521d\u59cb\u5316\u5217\u8868\u6784\u9020\u51fd\u6570</li> <li> <p>\u7ed3\u6784\u5316\u7ed1\u5b9a</p> </li> <li> <p>auto</p> </li> <li>decltype</li> <li>\u5c3e\u8fd4\u56de\u7c7b\u578b\u63a8\u5bfc</li> <li>decltype(auto)</li> </ul> <p>decltype(auto)\u4e3b\u8981\u7528\u4e8e\u8f6c\u53d1\u51fd\u6570\u6216\u5c01\u88c5\u7684\u8fd4\u56de\u7c7b\u578b\u8fdb\u884c\u63a8\u5bfc\uff0c\u8fd9\u6837\u4e0d\u9700\u8981\u663e\u5f0f\u7684\u6307\u5b9adecltype\u7684\u53c2\u6570\u8868\u8fbe\u5f0f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/","title":"\u6570\u636e\u5e93\u5b66\u4e60-05","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sqlsql","title":"\u7b2c\u5341\u8bb2 \u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u4e4b\u52a8\u6001SQL","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001\u52a8\u6001SQL\u7684\u6982\u5ff5\u548c\u4f5c\u7528</p> <p>2\u3001SQL\u8bed\u53e5\u7684\u52a8\u6001\u6784\u9020</p> <p>3\u3001\u52a8\u6001SQL\u8bed\u53e5\u7684\u6267\u884c\u65b9\u5f0f</p> <p>4\u3001\u6570\u636e\u5b57\u5178\u4e0eSQLDA</p> <p>5\u3001ODBC/JDBC\u7b80\u4ecb</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sql","title":"\u52a8\u6001SQL\u7684\u6982\u5ff5","text":"<p>\u52a8\u6001SQL\u662f\u76f8\u5bf9\u4e8e\u9759\u6001SQL\u800c\u8a00\u7684\u3002</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sql_1","title":"\u52a8\u6001SQL\u7684\u6982\u5ff5\u548c\u4f5c\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sql-1","title":"SQL\u8bed\u53e5\u7684\u52a8\u6001\u6784\u9020-\u793a\u4f8b1","text":"<p>\u8981\u5148\u5199\u597d\u57fa\u672c\u90e8\u5206\u3002</p> <p>\u6784\u9020\u4e00\u4e9b\u5b57\u7b26\u4e32</p> <p>\u5b57\u7b26\u4e32\u9700\u8981\u52a0\u5f15\u53f7</p> <p>\u6dfb\u52a0\u903b\u8f91\u8fd0\u7b97\u7b26</p> <p>\u6570\u503c\u53d8\u91cf\u8f6c\u6362\u6210\u5b57\u7b26\u4e32</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sql_2","title":"\u52a8\u6001SQL\u8bed\u53e5\u7684\u6267\u884c\u65b9\u5f0f","text":"<p>1\u3001\u6982\u8ff0</p> <p>\u52a8\u6001SQL\u7684\u4e24\u79cd\u6267\u884c\u65b9\u5f0f</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#sqlda","title":"\u6570\u636e\u5b57\u5178\u4e0eSQLDA","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#_1","title":"\u6570\u636e\u5b57\u5178\u7684\u5185\u5bb9\u6784\u6210","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#_2","title":"\u6570\u636e\u5b57\u5178\u7684\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#xopen","title":"X/open\u6807\u51c6\u7684\u7cfb\u7edf\u76ee\u5f55","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#oracle","title":"oracle\u7684\u6570\u636e\u5b57\u5178","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#odbc","title":"ODBC\u7b80\u4ecb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#odbc_1","title":"\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u901a\u8fc7ODBC\u8fde\u63a5\u4e00\u4e2a\u6570\u636e\u5e93\u670d\u52a1\u5668","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#odbc_2","title":"ODBC\u8fd8\u6709\u5176\u4ed6\u529f\u80fd","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#-odbc-jdbc","title":"\u5d4c\u5165\u5f0f\u8bed\u8a00-ODBC-JDBC\u6bd4\u8f83","text":"<p>1\u3001\u5d4c\u5165\u5f0f\u8bed\u8a00\u7684\u601d\u7ef4\u6a21\u5f0f</p> <p></p> <p>2\u3001ODBC\u7684\u601d\u7ef4\u6a21\u5f0f</p> <p></p> <p>3\u3001JDBC\u7684\u601d\u7ef4\u6a21\u5f0f</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-05/#ending","title":"ending!!!","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/","title":"\u6570\u636e\u5e93\u5b66\u4e60-11\u8bb2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#-","title":"\u6570\u636e\u5e93\u7cfb\u7edf-\u6570\u636e\u5efa\u6a21","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_1","title":"\u6570\u636e\u5efa\u6a21\u4e0e\u6570\u636e\u5e93\u8bbe\u8ba1","text":"<p>1\u3001\u6570\u636e\u5efa\u6a21\u4e0e\u6570\u636e\u5e93\u8bbe\u8ba1\u5728\u300a\u6570\u636e\u5e93\u7cfb\u7edf\u300b\u4e2d\u7684\u4f4d\u7f6e</p> <p>2\u3001\u5b66\u4e60\u76ee\u6807</p> <ul> <li>\u7406\u89e3\u6570\u636e\u5efa\u6a21\u4e0e\u6570\u636e\u5e93\u8bbe\u8ba1</li> <li>\u638c\u63e1E-R\u56fe\u8bbe\u8ba1</li> <li>\u638c\u63e1\u6570\u636e\u4f9d\u8d56\u7406\u8bba\u3001\u5173\u7cfb\u8303\u5f0f\u7406\u8bba\u548c\u6a21\u5f0f\u5206\u89e3\u7406\u8bba</li> <li>\u5206\u6790\u6570\u636e\u5e93\u8bbe\u8ba1\u7684\u6b63\u786e\u6027</li> </ul> <p>\u57fa\u672c\u5185\u5bb9</p> <p>1\u3001\u4e3a\u4ec0\u4e48\u8981\u6570\u636e\u5efa\u6a21\u548c\u6570\u636e\u5e93\u8bbe\u8ba1</p> <p>2\u3001E-R\u6a21\u578b-\u6570\u636e\u5efa\u6a21\u503c\u57fa\u672c\u601d\u60f3</p> <p>3\u3001E-R\u6a21\u578b-\u8868\u8fbe\u65b9\u6cd5\u4e4bchen\u65b9\u6cd5</p> <p>4\u3001E-R\u6a21\u578b-\u8868\u8fbe\u65b9\u6cd5\u4e4bCROW's foot\u65b9\u6cd5</p> <p>5\u3001\u6570\u636e\u5efa\u6a21\u4e4b\u6848\u4f8b\u8bb2\u89e3</p> <p>6\u3001\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u7684\u62bd\u8c61</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_2","title":"\u6570\u636e\u6a21\u578b\u4e0e\u6982\u5ff5\u6a21\u578b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#-_1","title":"\u62bd\u8c61-\u7406\u89e3-\u533a\u5206-\u547d\u540d-\u8868\u8fbe","text":"<p>\u6570\u636e\u5efa\u6a21\u662f\u62bd\u8c61\u3002\u62bd\u8c61\u662f\u7406\u89e3-\u533a\u5206-\u547d\u540d-\u8868\u8fbe</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#e-r","title":"e-r\u6a21\u578b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#e-r_1","title":"E-R\u6a21\u578b\u7684\u57fa\u672c\u6982\u5ff5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_3","title":"\u5b9e\u4f53\u4e0e\u5b9e\u4f8b","text":"<p>\u5b9e\u4f53\u7528\u5c5e\u6027\u6765\u523b\u753b</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_4","title":"\u5173\u952e\u5b57\u6709\u4ec0\u4e48\u7528\u5462\uff1f","text":"<p>\u5173\u952e\u5b57/\u7801\uff0c\u5b9e\u4f53\u4e2d\u80fd\u591f\u7528\u5176\u503c\u552f\u4e00\u533a\u5206\u5f00\u6bcf\u4e00\u4e2a\u5b9e\u4f8b\u7684\u5c5e\u6027\u6216\u5c5e\u6027\u7ec4\u5408</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_5","title":"\u5b9e\u4f53\u4e4b\u95f4\u5145\u6ee1\u4e86\u8054\u7cfb","text":"<p>\u8054\u7cfb\uff0c\u6307\u4e00\u4e2a\u5b9e\u4f53\u7684\u5b9e\u4f8b\u548c\u5176\u4ed6\u5b9e\u4f53\u5b9e\u4f8b\u4e4b\u95f4\u6240\u53ef\u80fd\u53d1\u751f\u7684\u8054\u7cfb</p> <p>\u8054\u7cfb\u662f\u8981\u8868\u8fbe\u7684\u8981\u7d20\u3002\u65e0\u8054\u7cfb\u7684\u5b9e\u4f53\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002</p> <p>\u6709\u4ec0\u4e48\u6837\u7684\u8054\u7cfb\u9700\u8981\u533a\u5206\u5462\uff1f</p> <p>\u53c2\u4e0e\u53d1\u751f\u8054\u7cfb\u7684\u5b9e\u4f53\u7684\u6570\u76ee\uff0c\u79f0\u4e3a\u8054\u7cfb\u7684\u5ea6\u6216\u5143\u3002</p> <p>\u8054\u7cfb\u6709\u4e00\u5143\u8054\u7cfb\u3001\u4e8c\u5143\u8054\u7cfb\u548c\u591a\u5143\u8054\u7cfb</p> <p>\u793a\u4f8b\uff1a\u4e8c\u5143\u8054\u7cfb</p> <p></p> <p>\u4e09\u5143\u8054\u7cfb</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_6","title":"\u793a\u4f8b\uff1a\u4e00\u5143\u8054\u7cfb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_7","title":"\u6709\u4ec0\u4e48\u6837\u7684\u8054\u7cfb\u9700\u8981\u533a\u5206\u5462\uff1f","text":"<p>\u89d2\u8272\uff08\u4f5c\u7528\uff09\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_8","title":"\u5b9e\u4f53\u4e4b\u95f4\u7684\u8054\u7cfb\u6709\u5f88\u591a\u79cd\u7c7b","text":"<p>\u4e8c\u5143\u8054\u7cfb\uff1a\u4e00\u5bf9\u4e00\uff0c\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u591a\u8054\u7cfb</p> <p></p> <p></p> <p>\u8054\u7cfb\u7684\u57fa\u6570\uff1a\u5b9e\u4f53\u5b9e\u4f8b\u4e4b\u95f4\u7684\u8054\u7cfb\u7684\u6570\u91cf\uff0c\u5373\u4e00\u4e2a\u5b9e\u4f53\u7684\u5b9e\u4f8b\u901a\u8fc7\u4e00\u79cd\u8054\u7cfb\u80fd\u548c\u53e6\u4e00\u5b9e\u4f53\u4e2d\u76f8\u5173\u8054\u7684\u5b9e\u4f8b\u7684\u6570\u76ee</p> <p></p> <p>\u8fdb\u4e00\u6b65\uff1a</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#e-rchen","title":"E-R\u6a21\u578b\u8868\u8fbe\u65b9\u6cd5\u4e4bchen\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#1e-r","title":"1\u3001E-R\u6a21\u578b\u6709\u4e09\u79cd\u8868\u8fbe\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#2chen","title":"2\u3001chen\u65b9\u6cd5\u7684\u57fa\u672c\u56fe\u5143\u53ca\u5176\u542b\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_9","title":"\u793a\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_10","title":"\u7b80\u5355\u793a\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#e-r_2","title":"E-R\u6a21\u578b\u5efa\u6a21\u6848\u4f8b\u5206\u6790","text":"<p>1\u3001E-R\u6a21\u578b\u6709\u4e09\u79cd\u8868\u8fbe\u65b9\u6cd5</p> <p>2\u3001\u7406\u89e3\u9700\u6c42\u5e76\u5efa\u6a21</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#crows-foot","title":"crow's foot\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_11","title":"\u7b80\u5355\u793a\u4f8b","text":"<p>\u4e00\u5143\u5173\u7cfb\u7684\u8868\u8fbe</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_12","title":"\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u7684\u62bd\u8c61","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_13","title":"\u578b\u4e0e\u503c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-11%E8%AE%B2/#_14","title":"\u7c7b\u4f3c\u7684\u6982\u5ff5","text":"<p>\u6570\u636e\u6a21\u578b</p> <p></p> <p></p> <p></p> <p></p> <p>ending!!!</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/","title":"\u6570\u636e\u5e93\u5b66\u4e60-17\u8bb2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_1","title":"\u6570\u636e\u5e93\u7269\u7406\u5b58\u50a8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_2","title":"\u78c1\u76d8\u7684\u7ed3\u6784\u4e0e\u7279\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_3","title":"\u63d0\u9ad8\u78c1\u76d8\u6570\u636e\u8bfb\u5199\u65f6\u95f4\u4e0e\u5b58\u50a8\u53ef\u9760\u6027\u7684\u65b9\u6cd5","text":"<p>RAID\u6280\u672f</p> <ul> <li>\u5e76\u884c\u5904\u7406\uff1a\u5e76\u884c\u8bfb\u53d6\u591a\u4e2a\u78c1\u76d8</li> </ul> <p>\u6bd4\u7279\u7ea7\u62c6\u5206\uff1a\u4e00\u4e2a\u5b57\u8282\u88ab\u62c6\u5206\u4e3a8\u4e2a\u6bd4\u7279\uff0c\u5206\u522b\u5b58\u50a8\u5728\u4e0d\u540c\u78c1\u76d8</p> <p>\u5757\u7ea7\u78c1\u76d8\uff1a\u4e00\u4e2a\u6587\u4ef6\u7531\u591a\u4e2a\u5757\u7ec4\u6210\uff0c\u4e0d\u540c\u5757\u5b58\u50a8\u5728\u4e0d\u540c\u78c1\u76d8</p> <ul> <li>\u53ef\u9760\u6027\uff1a\u5947\u5076\u6821\u9a8c\u4e0e\u7ea0\u9519</li> </ul> <p>\u6247\u533a/\u5757\u8bfb\u5199\u6821\u9a8c\uff1a\u5bf9\u4e00\u4e2a\u6247\u533a/\u5757\u8bfb\u5199\u505a\u6821\u9a8c</p> <p>\u78c1\u76d8\u95f4\u8bfb\u5199\u6821\u9a8c\uff1a\u591a\u4e2a\u78c1\u76d8\u95f4\u5171\u540c\u6784\u6210\u7684\u4fe1\u606f\u8bfb\u5199\u505a\u6821\u9a8c</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#dbms","title":"DBMS\u6570\u636e\u5b58\u50a8\u4e0e\u67e5\u8be2\u5b9e\u73b0\u7684\u57fa\u672c\u601d\u60f3","text":"<p>\u57fa\u672c\u6846\u67b6</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#-","title":"\u6570\u636e\u5e93-\u8868\u6240\u5360\u78c1\u76d8\u5757\u7684\u5206\u914d\u65b9\u6cd5","text":"<p>\u4e00\u79cd\u6587\u4ef6\u7ec4\u7ec7\u53ef\u4ee5\u7528\u591a\u79cd\u5b58\u53d6\u65b9\u6cd5</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_4","title":"\u65e0\u5e8f\u6587\u4ef6\u7ec4\u7ec7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_5","title":"\u6709\u5e8f\u6587\u4ef6\u7ec4\u7ec7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_6","title":"\u6563\u5217\u6587\u4ef6\u7ec4\u7ec7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-17%E8%AE%B2/#_7","title":"\u805a\u7c07\u6587\u4ef6\u7ec4\u7ec7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/","title":"\u6570\u636e\u5e93\u5b66\u4e60-19\u8bb2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#-","title":"\u6570\u636e\u5e93\u67e5\u8be2\u5b9e\u73b0\u7b97\u6cd5-\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_1","title":"\u6570\u636e\u5e93\u67e5\u8be2\u5b9e\u73b0\u7b97\u6cd5\u6982\u8ff0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_2","title":"\u67e5\u8be2\u5b9e\u73b0\u4e0e\u67e5\u8be2\u4f18\u5316","text":"<p>\u67e5\u8be2\u5b9e\u73b0\u7b97\u6cd5\u603b\u89c8</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_3","title":"\u6570\u636e\u5e93\u7684\u4e09\u5927\u7c7b\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#-_1","title":"\u8fde\u63a5\u64cd\u4f5c\u7684\u5b9e\u73b0\u7b97\u6cd5-\u7531\u903b\u8f91\u5c42\u9762\u5230\u7269\u7406\u5c42\u9762","text":"<p>1\u3001\u8fde\u63a5\u64cd\u4f5c\u7684\u903b\u8f91\u5b9e\u73b0\u7b97\u6cd5</p> <p>2\u3001\u5173\u7cfb\u7684\u7269\u7406\u5b58\u50a8\u76f8\u5173\u7684\u53c2\u6570</p> <p></p> <p>3\u3001\u8fde\u63a5\u64cd\u4f5c\u7684\u57fa\u672c\u5b9e\u73b0\u7b97\u6cd5</p> <p></p> <p>4\u3001\u8fde\u63a5\u64cd\u4f5c\u7684\u5168\u4e3b\u5b58\u5b9e\u73b0\u7b97\u6cd5</p> <p></p> <p>5\u3001\u8fde\u63a5\u64cd\u4f5c\u7684\u534a\u4e3b\u5b58\u5b9e\u73b0\u7b97\u6cd5</p> <p></p> <p>6\u3001\u8fde\u63a5\u64cd\u4f5c\u7684\u5927\u5173\u7cfb\u5b9e\u73b0\u7b97\u6cd5</p> <p></p> <p></p> <p>7\u3001\u5176\u4ed6\u7b97\u6cd5</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_4","title":"\u5229\u7528\u8fed\u4ee3\u5668\u6784\u9020\u67e5\u8be2\u5b9e\u73b0\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#1","title":"1\u3001\u8fed\u4ee3\u5668\u7b97\u6cd5\u7684\u63d0\u51fa","text":"<p>2\u3001\u8fed\u4ee3\u5668\u7b97\u6cd5\u7684\u57fa\u7840</p> <p></p> <p>3\u3001\u8fed\u4ee3\u5668\u7684\u6784\u9020</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_5","title":"\u4ec0\u4e48\u662f\u4e00\u8d9f\u7b97\u6cd5\uff1f","text":"<p>\u53d6\u51b3\u4e8e\u5185\u5b58\u80fd\u5426\u4e00\u6b21\u653e\u5165\u6240\u6709\u5173\u7cfb</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_6","title":"\u6570\u636e\u5e93\u67e5\u8be2\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5","text":"<p>3\u3001\u6574\u4e2a\u5173\u7cfb\u7684\u4e00\u5143\u64cd\u4f5c\u5b9e\u73b0\u7b97\u6cd5</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_7","title":"\u5efa\u7acb\u6563\u5217\u5185\u5b58\u7ed3\u6784\u5b9e\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_8","title":"\u6574\u4e2a\u5173\u7cfb\u7684\u4e8c\u5143\u64cd\u4f5c\u5b9e\u73b0\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-19%E8%AE%B2/#_9","title":"\u57fa\u4e8e\u7d22\u5f15\u7684\u7b97\u6cd5","text":"<p>ending</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/","title":"\u6570\u636e\u5e93\u5b66\u4e60-23\u8bb2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_1","title":"\u6570\u636e\u5e93\u4e8b\u52a1\u5904\u7406\u6280\u672f\uff08\u6545\u969c\u6062\u590d\uff09","text":"<p>\u57fa\u672c\u5185\u5bb9</p> <p>1\u3001\u6570\u636e\u5e93\u6545\u969c\u6062\u590d\u7684\u5b8f\u89c2\u601d\u8def</p> <p>2\u3001\u8fd0\u884c\u65e5\u5fd7\u53ca\u5176\u68c0\u67e5\u70b9</p> <p>3\u3001\u4e09\u79cd\u7c7b\u578b\u7684\u8fd0\u884c\u65e5\u5fd7</p> <p>4\u3001\u5229\u7528\u8fd0\u884c\u65e5\u5fd7\u8fdb\u884c\u6545\u969c\u6062\u590d</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_2","title":"\u6570\u636e\u5e93\u7684\u6545\u969c\u53ca\u5176\u5f71\u54cd","text":"<p>DBMS\u4e2d\u6545\u969c\u6062\u590d\u7a0b\u5e8f\u7ea6\u536010%</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_3","title":"\u6570\u636e\u5e93\u6545\u969c\u6062\u590d\u7684\u5b8f\u89c2\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_4","title":"\u7cfb\u7edf\u6545\u969c\u6062\u590d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_5","title":"\u4ecb\u8d28\u6545\u969c\u6062\u590d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_6","title":"\u4ec0\u4e48\u662f\u65e5\u5fd7","text":"<p>\u7f13\u51b2\u533a\u5904\u7406\u7b56\u7565</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>undo\u578b\u65e5\u5fd7</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#_7","title":"\u68c0\u67e5\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0-23%E8%AE%B2/#redo","title":"REDO\u578b\u65e5\u5fd7\u53ca\u5176\u6545\u969c\u6062\u590d","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/","title":"\u6570\u636e\u5e93\u5b66\u4e6020\u8bb2-\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_1","title":"\u57fa\u672c\u5185\u5bb9","text":"<p>1\u3001\u4e3a\u4ec0\u4e48\u9700\u8981\u4e24\u8d9f\u7b97\u6cd5\u4ee5\u53ca\u76f8\u5173\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3</p> <p>2\u3001\u4e24\u9636\u6bb5\u591a\u8def\u5f52\u5e76\u6392\u5e8f\u7b97\u6cd5</p> <p>3\u3001\u57fa\u4e8e\u6392\u5e8f\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5</p> <p>4\u3001\u57fa\u4e8e\u6563\u5217\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_2","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\uff1f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_3","title":"\u4e24\u8d9f\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u8def","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_4","title":"\u4e24\u9636\u6bb5\u591a\u8def\u5f52\u5e76\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_5","title":"\u5185\u6392\u5e8f\u548c\u5916\u6392\u5e8f\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_6","title":"\u5916\u6392\u5e8f\u5206\u6790","text":"<p>\u591a\u8def\u5f52\u5e76\u6392\u5e8f</p> <p>\u6bcf\u6b21\u8bfbn\u8def\uff0c\u53d6\u6700\u5c0f\u5143\u7d20\uff0c\u53d6\u5b8c\u4e86\u5bf9\u5e94\u8def\u7684\u5143\u7d20\uff0c\u5c31\u5c06\u6e38\u6807\u5bf9\u76f8\u5e94\u7684\u8def\u8fdb\u884c\u5904\u7406\u5f80\u540e\u8bfb\uff0c\u7ee7\u7eed\u53d6\u6700\u5c0f\u5143\u7d20\uff0c\u8fd9\u6837\u5faa\u73af\u5904\u7406\u3002</p> <p></p> <p></p> <p>\u53bb\u91cd\u590d\u64cd\u4f5c\uff0c\u5206\u7ec4\u805a\u96c6\u64cd\u4f5c\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A020%E8%AE%B2-%E4%B8%A4%E8%B6%9F%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95/#_7","title":"\u57fa\u4e8e\u6563\u5217\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5","text":"<p>\u53bb\u91cd\u590d\u64cd\u4f5c</p> <p></p> <p>\u5206\u7ec4\u805a\u96c6\u64cd\u4f5c</p> <p></p> <p>ENDING</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/","title":"\u6570\u636e\u5e93\u5b66\u4e6021\u8bb2-\u6570\u636e\u5e93\u67e5\u8be2\u4f18\u5316\u6280\u672f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_1","title":"\u4ec0\u4e48\u662f\u67e5\u8be2\u4f18\u5316\uff1f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_2","title":"\u5982\u4f55\u4f7f\u6570\u636e\u5e93\u67e5\u8be2\u7684\u6267\u884c\u65f6\u95f4\u6700\u77ed\uff1f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_3","title":"\u67e5\u8be2\u4f18\u5316\u7684\u603b\u4f53\u601d\u8def","text":"<p>1\u3001\u8bed\u4e49\u4f18\u5316-\u5185\u5bb9\u7b49\u4ef7\u6027</p> <p>2\u3001\u8bed\u6cd5\u4f18\u5316\uff08\u903b\u8f91\u5c42\u4f18\u5316\uff09-\u8bed\u6cd5\u7b49\u4ef7\u6027</p> <p></p> <p></p> <p>3\u3001\u6267\u884c\u4f18\u5316\uff08\u7269\u7406\u5c42\u4f18\u5316\uff09</p> <p></p> <p>4\u3001\u4f18\u5316\u4f4d\u7f6e</p> <p></p> <p>5\u3001\u7b80\u8981\u56de\u987e</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_4","title":"\u903b\u8f91\u5c42\u67e5\u8be2\u4f18\u5316","text":"<p>1\u3001\u903b\u8f91\u67e5\u8be2\u4f18\u5316\u603b\u4f53\u601d\u8def</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_5","title":"\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c\u6b21\u5e8f\u4ea4\u6362\u7684\u7b49\u4ef7\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_6","title":"\u54ea\u4e9b\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c\u80fd\u591f\u4ea4\u6362\u6b21\u5e8f\uff1f","text":"<p>\u5173\u7cfb\u4ee3\u6570\u4ea4\u6362\u5b9a\u7406</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_7","title":"\u4ec0\u4e48\u662f\u5173\u7cfb\u64cd\u4f5c\u6b21\u5e8f\u4ea4\u6362\u7684\u7b49\u4ef7\u6027","text":"<p>3\u3001\u54ea\u4e9b\u5173\u7cfb\u64cd\u4f5c\u6b21\u5e8f\u53ef\u4ee5\u4ea4\u6362\uff1f</p> <p></p> <p></p> <p></p> <p>\u4e24\u904d\u626b\u63cf\u53d8\u4e3a\u4e00\u904d\u626b\u63cf</p> <p>\u5c5e\u6027\u6269\u5c55\u4fbf\u4e8e\u6295\u5f71\u64cd\u4f5c\u7684\u79fb\u52a8</p> <p></p> <p>\u5206\u89e3\u590d\u6742\u64cd\u4f5c\u4fbf\u4e8e\u9009\u62e9\u64cd\u4f5c\u7684\u79fb\u52a8</p> <p>\u4e24\u904d\u626b\u63cf\u53d8\u4e3a\u4e00\u904d\u626b\u63cf</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_8","title":"\u57fa\u4e8e\u5173\u7cfb\u4ee3\u6570\u7684\u67e5\u8be2\u4f18\u5316\u7b97\u6cd5\u53ca\u5b9e\u4f8b","text":"<p>1\u3001\u7b97\u6cd5\u8868\u8fbe</p> <p></p> <p>2\u3001\u793a\u4f8b</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_9","title":"\u7269\u7406\u5c42\u67e5\u8be2\u4f18\u5316","text":"<p>1\u3001\u7269\u7406\u67e5\u8be2\u4f18\u5316-\u603b\u4f53\u601d\u8def</p> <p></p> <p></p> <p>\u8fed\u4ee3\u5668\u6784\u9020--\u6d41\u6c34\u5316\u3001\u7269\u5316\uff1b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_10","title":"\u8861\u91cf\u4e00\u4e2a\u7269\u7406\u67e5\u8be2\u8ba1\u5212\u7684\u597d\u4e0e\u574f","text":"<p>\u6839\u636e\u4e0a\u8ff0\u4fe1\u606f\u6765\u8bc4\u4f30\u6570\u636e\u5e93\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_11","title":"\u600e\u4e48\u6536\u96c6\u4fe1\u606f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A021%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF/#_12","title":"\u4ee3\u4ef7\u4f30\u7b97","text":"<p>2\u3001\u6295\u5f71\u8fd0\u7b97\u7684\u4ee3\u4ef7\u4f30\u7b97</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/","title":"\u6570\u636e\u5e93\u5b66\u4e6022\u8bb2-\u6570\u636e\u5e93\u5e76\u53d1\u63a7\u5236","text":"<p>\u57fa\u672c\u5185\u5bb9</p> <p>1\u3001\u4e3a\u4ec0\u4e48\u9700\u8981\u5e76\u53d1\u63a7\u5236</p> <p>2\u3001\u4e8b\u52a1\u8c03\u5ea6\u53ca\u53ef\u4e32\u884c\u6027</p> <p>3\u3001\u57fa\u4e8e\u5c01\u9501\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5</p> <p>4\u3001\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5</p> <p>5\u3001\u57fa\u4e8e\u6709\u6548\u6027\u786e\u8ba4\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_1","title":"\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u5e76\u53d1\u63a7\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_2","title":"\u4e09\u79cd\u5178\u578b\u7684\u4e0d\u4e00\u81f4\u73b0\u8c61","text":"<p>3\u3001\u5e76\u53d1\u63a7\u5236\u7684\u7f18\u7531</p> <p></p> <p>4\u3001\u5e76\u53d1\u63a7\u5236\u53ca\u76f8\u5e94\u7684\u4e8b\u52a1\u5904\u7406\u6280\u672f\u662fDBMS\u7684\u6838\u5fc3\u6280\u672f</p> <p></p> <p>\u4e8b\u52a1\u3001\u5e76\u53d1\u3001\u5c01\u9501\u662f\u4e09\u4e2a\u91cd\u8981\u73af\u8282</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_3","title":"\u4ec0\u4e48\u662f\u4e8b\u52a1","text":"<p>1\u3001\u4e8b\u52a1\u7684\u6982\u5ff5</p> <p></p> <p>2\u3001\u4e8b\u52a1\u7684\u5b8f\u89c2\u6027\u548c\u5fae\u89c2\u6027</p> <p></p> <p></p> <p>\u4e8b\u52a1\u7684\u5fae\u89c2\u6027</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_4","title":"\u4e8b\u52a1\u7684\u7279\u6027","text":"<p>ACID</p> <p>\u539f\u5b50\u6027\uff0c\u4e00\u81f4\u6027\uff0c\u9694\u79bb\u6027\uff0c\u6301\u4e45\u6027</p> <p></p> <p>4\u3001DBMS\u5bf9\u4e8b\u52a1\u7684\u63a7\u5236</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_5","title":"\u4e8b\u52a1\u8c03\u5ea6\u4e0e\u53ef\u4e32\u884c\u6027","text":"<p>\u57fa\u672c\u6982\u5ff5</p> <p></p> <p></p> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>\u53ef\u4e32\u884c\u5316\u8c03\u5ea6\u4e00\u5b9a\u662f\u6b63\u786e\u7684\u5e76\u884c\u8c03\u5ea6\uff0c\u4f46\u6b63\u786e\u7684\u5e76\u884c\u8c03\u5ea6\uff0c\u5374\u672a\u5fc5\u90fd\u662f\u53ef\u4e32\u884c\u5316\u7684\u8c03\u5ea6\u3002</p> <p>\u5e76\u884c\u8c03\u5ea6\u7684\u6b63\u786e\u6027\u662f\u6307\u5185\u5bb9\u4e0a\u7ed3\u679c\u6b63\u786e\u6027\uff0c\u800c\u53ef\u4e32\u884c\u6027\u662f\u6307\u5f62\u5f0f\u4e0a\u7ed3\u679c\u6b63\u786e\u6027\uff0c\u4fbf\u4e8e\u64cd\u4f5c</p> <p>\u53ef\u4e32\u884c\u5316\u7684\u5e8f\u5217\u4e0d\u4e00\u5b9a\u552f\u4e00\u3002</p> <p>2\u3001\u4e00\u79cd\u7b80\u5355\u7684\u4e8b\u52a1\u8c03\u5ea6\u7684\u6807\u8bb0\u6a21\u578b</p> <p>\u8868\u8fbe\u4e8b\u52a1\u8c03\u5ea6\u7684\u4e00\u79cd\u6a21\u578b\u3002</p> <p>3\u3001\u51b2\u7a81\u53ef\u4e32\u884c\u6027</p> <p></p> <p></p> <p>\u51b2\u7a81\u53ef\u4e32\u884c\u6027\u662f\u6bd4\u53ef\u4e32\u884c\u6027\u8981\u4e25\u683c\u7684\u6982\u5ff5</p> <p>\u6ee1\u8db3\u51b2\u7a81\u53ef\u4e32\u884c\u6027\uff0c\u4e00\u5b9a\u6ee1\u8db3\u53ef\u4e32\u884c\u6027\uff0c\u53cd\u4e4b\u4ea6\u7136</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_6","title":"\u51b2\u7a81\u53ef\u4e32\u884c\u6027\u5224\u522b\u7b97\u6cd5","text":"<p>\u7b97\u6cd5\u8868\u8fbe</p> <p></p> <p>3\u3001\u793a\u4f8b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_7","title":"\u57fa\u4e8e\u5c01\u9501\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5","text":"<p>1\u3001\u95ee\u9898</p> <p>2\u3001\u4ec0\u4e48\u662f\u9501</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_8","title":"\u5c01\u9501\u534f\u8bae\u9700\u8981\u8003\u8651\u4ec0\u4e48","text":"<p>3\u3001\u5c01\u9501\u534f\u8bae\u9700\u8981\u8003\u8651\u4ec0\u4e48</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_9","title":"\u4e24\u6bb5\u5c01\u9501\u534f\u8bae","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_10","title":"\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u5e76\u53d1\u63a7\u5236","text":"<p>4\u3001\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u7b80\u5355\u8c03\u5ea6\u89c4\u5219</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_11","title":"\u57fa\u4e8e\u6709\u6548\u6027\u786e\u8ba4\u7684\u5e76\u53d1\u63a7\u5236\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A022%E8%AE%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/#_12","title":"\u6709\u6548\u6027\u786e\u8ba4\u89c4\u5219","text":"<p>\u7b80\u5355\u5b9e\u4f8b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/","title":"\u6570\u636e\u5e93\u5b66\u4e60\uff08\u7248\u672c1\uff09","text":"<p>\u5b66\u81ea\u6218\u5fb7\u81e3\u8001\u5e08\u3002</p> <p>b\u7ad9\u8bfe\u7a0b\uff1a\u54c8\u5de5\u5927\u6570\u636e\u5e93\u7cfb\u7edf \u6218\u5fb7\u81e3\uff08\u516823\u8bb2\uff09</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_1","title":"\u7ae0\u8282\u5212\u5206","text":"<ul> <li> \u6570\u636e\u5e93\u7cfb\u7edf\u57fa\u672c\u6982\u5ff5</li> <li> \u5173\u7cfb\u6a21\u578b\u4e0e\u5173\u7cfb\u8fd0\u7b97</li> <li> \u4ea4\u4e92\u5f0fsql\u8bed\u8a00\u53ca\u5176\u5e94\u7528</li> <li> \u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u7a0b\u5e8f\u5f00\u53d1</li> <li> \u6570\u636e\u5efa\u6a21\u4e0e\u6570\u636e\u5e93\u8bbe\u8ba1</li> <li> \u6570\u636e\u5e93\u8bbe\u8ba1\u7406\u8bba</li> <li> \u6570\u636e\u5e93\u5b58\u50a8\u4e8e\u7d22\u5f15\u6280\u672f</li> <li> \u6570\u636e\u5e93\u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0\u7b97\u6cd5</li> <li> \u6570\u636e\u5e93\u67e5\u8be2\u4f18\u5316\u4e0e\u67e5\u8be2\u5b9e\u73b0</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_2","title":"\u4e00\u3001\u6570\u636e\u5e93\u7cfb\u7edf\u57fa\u672c\u6982\u5ff5","text":"<p>\u6570\u636e\u5e93\u7cfb\u7edf\uff1a\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff0c\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8ba1\u7b97\u673a\u57fa\u672c\u7cfb\u7edf\u3002</p> <p>DDL,DCL,DBA,DML\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_3","title":"\u4e8c\u3001\u6570\u636e\u5e93\u7684\u7ed3\u6784\u62bd\u8c61\u4e0e\u6f14\u53d8","text":"<p>\u91cd\u70b9\u4e0e\u96be\u70b9\uff1a</p> <p>\u4e09\u7ea7\u6a21\u5f0f\u4e24\u5c42\u6620\u50cf\uff0c\u7269\u7406\u72ec\u7acb\u6027\u548c\u903b\u8f91\u72ec\u7acb\u6027</p> <p>\u6570\u636e-\u300b\u6a21\u5f0f-\u300b\u6570\u636e\u6a21\u578b</p> <p>\u7f51\u72b6/\u5c42\u72b6\u6a21\u578b-\u300b\u5173\u7cfb\u6a21\u578b-\u300boo\u6570\u636e\u6a21\u578b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#dbms","title":"DBMS\u7ba1\u7406\u6570\u636e\u7684\u4e09\u4e2a\u5c42\u6b21","text":"<p>\u7528\u6237\u5c42\u6b21\u3001\u6982\u5ff5\u5c42\u6b21\u3001\u5185\u90e8\u5c42\u6b21</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_4","title":"\u6570\u636e\u4e0e\u6a21\u5f0f","text":"<p>\u4ec0\u4e48\u53eb\u6a21\u5f0f\uff1f</p> <p>\u6a21\u5f0f\u5c31\u662f\u5bf9\u6570\u636e\u5e93\u4e2d\u6570\u636e\u6240\u8fdb\u884c\u7684\u4e00\u79cd\u7ed3\u6784\u6027\u7684\u63cf\u8ff0\u6240\u89c2\u5bdf\u5230\u6570\u636e\u7684\u7ed3\u6784\u4fe1\u606f\u3002</p> <p>\u7c7b\u4f3c\u4e8e\u8868\u7684\u8868\u5934\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u6a21\u5f0f\u662f\u5bf9\u89c6\u56fe\u7684\u62bd\u8c61\u3002\u6570\u636e\u7684\u7ed3\u6784\u2014\u2014\u6a21\u5f0f</p> <p>\u4ec0\u4e48\u53eb\u505a\u89c6\u56fe\uff1f</p> <p>\u67d0\u4e00\u79cd\u8868\u73b0\u5f62\u5f0f\u559c\u7231\u8868\u73b0\u51fa\u6765\u7684\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u3002\uff08\u901a\u4fd7\u6765\u8bb2\uff0c\u5c31\u662f\u6211\u4eecselect\u51fa\u6765\u7684\u6240\u6ee1\u8db3\u6761\u4ef6\u7684\u5c55\u73b0\u51fa\u6765\u7684\u6570\u636e\u3002\uff09</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_5","title":"\u4e09\u7ea7\u6a21\u5f0f(\u4e09\u7ea7\u89c6\u56fe)","text":"<p>\u56fe\u753b\u793a\u4f8b</p> <p></p> <p>\u5916\u6a21\u5f0f\uff1a\u5f88\u660e\u663e\uff0c\u5916\u6a21\u5f0f\u5c31\u662f\u67d0\u4e00\u7528\u6237\u80fd\u591f\u770b\u5230\u4e0e\u5904\u7406\u7684\u6570\u636e\u7684\u7ed3\u6784\u63cf\u8ff0\u3002</p> <p>\u6982\u5ff5\u6a21\u5f0f\uff1a\u4ece\u5168\u5c40\u89d2\u5ea6\u7406\u89e3\u7ba1\u7406\u7684\u6570\u636e\u7684\u7ed3\u6784\u63cf\u8ff0\uff0c\u542b\u76f8\u5e94\u7684\u5173\u8054\u7ea6\u675f\uff0c\u4f53\u73b0\u5728\u6570\u636e\u4e4b\u95f4\u7684\u5185\u5728\u7684\u672c\u8d28\u7684\u8054\u7cfb\u3002</p> <p>\u5185\u6a21\u5f0f\uff1a\u5b58\u50a8\u5728\u4ecb\u8d28\u4e0a\u7684\u6570\u636e\u7684\u7ed3\u6784\u63cf\u8ff0\uff0c\u542b\u5b58\u50a8\u8def\u5f84\u3001\u5b58\u50a8\u65b9\u5f0f\u3001\u7d22\u5f15\u65b9\u5f0f\u7b49\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_6","title":"\u4e24\u5c42\u6620\u50cf","text":"<p>\u5916\u6a21\u5f0f/\u6982\u5ff5\u6a21\u5f0f E-C\u6620\u50cf</p> <p>C-I\u6620\u50cf\uff0c\u6982\u5ff5\u6a21\u5f0f/\u5185\u6a21\u5f0f</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_7","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u6807\u51c6\u7ed3\u6784","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_8","title":"\u4e3a\u4ec0\u4e48\u8981\u6309\u7167\u6807\u51c6\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u62bd\u8c61\uff1f","text":"<p>\u4e24\u4e2a\u72ec\u7acb\u6027\uff1a\u903b\u8f91\u6570\u636e\u72ec\u7acb\u6027\uff0c\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027\u3002</p> <p>\u903b\u8f91\u6570\u636e\u72ec\u7acb\u6027\uff1a\u5728\u6a21\u5f0f\uff08\u6982\u5ff5\u6a21\u5f0f\uff09\u9700\u6539\u8fdb\u578b\u6539\u53d8\u65f6\uff0c\u53ea\u9700\u8981\u6539\u53d8\u5bf9\u5e94\u7684E-C\u6620\u50cf\uff0c\u800c\u4e0d\u9700\u8981\u6539\u53d8\u76f8\u5e94\u7684\u5916\u90e8\u6a21\u5f0f\uff0c\u56e0\u6b64\u5b9e\u73b0\u7684\u6570\u636e\u7684\u903b\u8f91\u4e0a\u7684\u72ec\u7acb\u6027\uff0c\u4ece\u800c\u65e0\u9700\u6539\u53d8\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u7269\u7406\u72ec\u7acb\u6027\uff1a\u5f53\u6570\u636e\u5e93\u7684\u5b58\u50a8\u7ed3\u6784\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u6539\u53d8\u76f8\u5e94\u7684C-I\u6620\u50cf\uff0c\u4ece\u800c\u4e0d\u6539\u53d8\u6982\u5ff5\u6a21\u5f0f\uff0c\u8fdb\u800c\u4e0d\u7528\u6539\u53d8\u5916\u90e8\u6a21\u5f0f\uff0c\u4ece\u800c\u8ba9\u6570\u636e\u5e93\u7cfb\u7edf\u5b9e\u73b0\u76f8\u5173\u7684\u7a33\u5b9a\u6027\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_9","title":"\u6570\u636e\u6a21\u578b","text":"<p>\u4e09\u5927\u7ecf\u5178\u6570\u636e\u6a21\u578b</p> <p>\u5173\u7cfb\u6a21\u578b\uff1a\u8868\u7684\u5f62\u5f0f\u7ec4\u7ec7\u6570\u636e</p> <p>\u5c42\u6b21\u6a21\u578b\uff1a\u6811\u7684\u5f62\u5f0f\u7ec4\u7ec7\u6570\u636e</p> <p>\u7f51\u72b6\u6a21\u578b\uff1a\u56fe\u7684\u5f62\u5f0f\u7ec4\u7ec7\u6570\u636e</p> <p>\u5e38\u89c1\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff1aneo4j\uff0c\u952e\u503c\u6570\u636e\u5e93redis</p> <p>\u963f\u91cc\u7684\u6570\u636e\u5e93\uff1aoceanbase\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_10","title":"\u5173\u7cfb\u6a21\u578b\u7684\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_11","title":"\u5c42\u6b21\u6a21\u578b\u7684\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_12","title":"\u7f51\u72b6\u6a21\u578b\u7684\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_13","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u7684\u6f14\u53d8\u4e0e\u53d1\u5c55","text":"<p>\u56db\u4e2a\u9636\u6bb5</p> <p>1\u3001\u6570\u636e\u5e93\u6280\u672f\u63a2\u7d22\u9636\u6bb5</p> <p>2\u3001\u6570\u636e\u5e93\u6280\u672f\u786e\u7acb\u9636\u6bb5</p> <p>3\u3001\u6570\u636e\u5e93\u6280\u672f\u6210\u719f\u9636\u6bb5</p> <p></p> <p>4\u3001\u6570\u636e\u5e93\u968f\u673a\u6570\u6df1\u5316\u53d1\u5c55\u9636\u6bb5</p> <p></p> <p>\u5f97\u5230\u4e86\u76f8\u5173\u7684\u7cfb\u7edf\u5316\u53d1\u5c55\u3002</p> <p>\u6570\u636e\u5e93\u7cfb\u7edf</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_14","title":"\u7531\u5c42\u6b21\u6a21\u578b\u6570\u636e\u5e93\u3001\u7f51\u72b6\u6a21\u578b\u6570\u636e\u5e93\u5230\u5173\u7cfb\u6570\u636e\u5e93","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_15","title":"\u7531\u5173\u7cfb\u6570\u636e\u5e93\u5230\u5bf9\u8c61\u5173\u7cfb\u6570\u636e\u5e93\u3001\u9762\u5411\u5bf9\u8c61\u6570\u636e\u5e93","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_16","title":"\u4e09\u3001\u5173\u7cfb\u6a21\u578b\u4e4b\u57fa\u672c\u6982\u5ff5","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <ul> <li>\u5173\u7cfb\u6a21\u578b\u6982\u8ff0</li> <li>\u4ec0\u4e48\u662f\u5173\u7cfb</li> <li>\u5173\u7cfb\u6a21\u578b\u4e2d\u7684\u5b8c\u6574\u6027\u7ea6\u675f</li> </ul> <p>\u56f4\u7ed5\u5173\u7cfb\u7684\u76f8\u5173\u6982\u5ff5\u548c\u76f8\u5173\u7ea6\u675f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_17","title":"\u5173\u7cfb\u6a21\u578b\u7684\u63d0\u51fa","text":"<p>\u6700\u65e9\u662f\u7531E.F.Codd\u57281970\u5e74\u63d0\u51fa\uff0c\u5b83\u662f\u8868\u53ca\u5176\u8868\u7684\u5904\u7406\u65b9\u5f0f\u4e2d\u62bd\u8c61\u51fa\u6765\u7684\uff0c\u662f\u5bf9\u4f20\u7edf\u8868\u53ca\u5176\u64cd\u4f5c\u8fdb\u884c\u4e25\u683c\u6570\u5b66\u5316\u5b9a\u4e49\u57fa\u7840\u4e0a\uff0c\u5f15\u5165\u4e86\u96c6\u5408\u8bba\u548c\u903b\u8f91\u5b66\u3002\u662f\u6570\u636e\u5e93\u7684\u4e09\u5927\u7ecf\u5178\u6a21\u578b\u4e4b\u4e00\uff0cSQL\u4e5f\u662f\u5efa\u7acb\u5728\u5173\u7cfb\u6a21\u578b\u57fa\u7840\u4e0a\u7684\u3002</p> <p>\u903b\u8f91\u5b66\uff1a\u7c7b\u4f3c\u4e8e\u5927\u5b66\u65f6\u671f\u5b66\u7684\u79bb\u6563\u6570\u5b66\u7684\u9ad8\u7ea7\u8fdb\u9636\u7248\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_18","title":"\u5173\u7cfb\u6a21\u578b\u7814\u7a76\u4ec0\u4e48","text":"<p>\u4e00\u4e2a\u5173\u7cfb\u5c31\u662f\u4e00\u4e2aTABLE</p> <p>\u5173\u7cfb\u6a21\u578b\u5c31\u662f\u5904\u7406\u8868\u7684\uff0c\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a</p> <p>1\u3001\u63cf\u8ff0DB\u5404\u79cd\u6570\u636e\u7684\u57fa\u672c\u7ed3\u6784\u5f62\u5f0f</p> <p>2\u3001\u63cf\u8ff0\u8868\u4e0e\u8868\u4e4b\u95f4\u6240\u53ef\u80fd\u53d1\u751f\u7684\u5404\u79cd\u64cd\u4f5c</p> <p>3\u3001\u63cf\u8ff0\u8fd9\u4e9b\u64cd\u4f5c\u6240\u5e94\u8be5\u9075\u5faa\u7684\u7ea6\u675f\u6761\u4ef6\uff08\u5b8c\u6574\u6027\u7ea6\u675f\uff09</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_19","title":"\u5173\u7cfb\u6a21\u578b\u4e09\u8981\u7d20","text":"<p>\u57fa\u672c\u7ed3\u6784</p> <p>\u57fa\u672c\u64cd\u4f5c</p> <p></p> <p>\u5b8c\u6574\u6027\u7ea6\u675f\uff1a\u5b9e\u4f53\u5b8c\u6574\u6027\uff0c\u53c2\u7167\u5b8c\u6574\u6027\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5b8c\u6574\u6027</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_20","title":"\u5173\u7cfb\u8fd0\u7b97\uff1a\u5173\u7cfb\u4ee3\u6570\u548c\u5173\u7cfb\u6f14\u7b97\u3002\u5173\u7cfb\u6f14\u7b97\uff1a\u5143\u7ec4\u6f14\u7b97\u548c\u57df\u6f14\u7b97\u3002","text":"<p>\u6570\u636e\u5e93\u7684\u4e00\u79cd\u601d\u7ef4\uff1a\u5173\u7cfb\u8fd0\u7b97-\u300b\u5173\u7cfb\u6570\u636e\u5e93\u8bed\u8a00-\u300bDBMS\u7684\u5b9e\u73b0</p> <p>\u8868\u7684\u57fa\u672c\u6784\u6210\u8981\u7d20</p> <p></p> <p>\u9996\u5148\u5b9a\u4e49\u5217\u7684\u53d6\u503c\u8303\u56f4\u201c\u57df\u201d</p> <p></p> <p>\u518d\u5b9a\u4e49\u5143\u7ec4\u53ca\u5176\u6240\u6709\u53ef\u80fd\u7ec4\u5408\u6210\u7684\u5143\u7ec4\uff1a\u7b1b\u5361\u5c14\u79ef</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_21","title":"\u5173\u7cfb","text":"<p>\u7531\u4e8e\u7b1b\u5361\u5c14\u79ef\u4e2d\u7684\u6240\u6709\u5143\u7ec4\u5e76\u4e0d\u90fd\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64...\u5f15\u5165\u4e86\u76f8\u5173\u7684\u5173\u7cfb\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_22","title":"\u5173\u7cfb\u6a21\u5f0f","text":"<p>\u4e3e\u4f8b\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_23","title":"\u5173\u7cfb\u6a21\u5f0f\u4e0e\u5173\u7cfb","text":"<p>\u5173\u7cfb\u6a21\u5f0f\u53ef\u80fd\u4f1a\u5b58\u5728\u5f88\u591a\u4e0d\u540c\u7684\u5173\u7cfb\uff0c\u5173\u7cfb\u5c31\u662f\u5173\u7cfb\u6a21\u5f0f\u7684\u67d0\u4e00\u79cd\u60c5\u51b5\u4e0b\u7684\u6570\u636e\uff0c\u540c\u65f6\u4e5f\u662f\u7b1b\u5361\u5c14\u79ef\u7684\u5b50\u96c6\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_24","title":"\u5173\u7cfb\u7684\u7279\u6027","text":"<p>\u5217\u662f\u540c\u8d28\uff0c\u5373\u6bcf\u4e00\u5217\u7684\u5206\u91cf\u90fd\u6765\u81ea\u540c\u4e00\u4e2a\u57df\uff0c\u662f\u540c\u4e00\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f8b\u5982\uff0c\u603b\u4e0d\u80fd\u67d0\u4e00\u5217\u65e2\u6709\u6027\u522b\uff0c\u53c8\u6709\u5b66\u53f7\u5427</p> <p></p> <p>\u5217\u4f4d\u7f6e\u4e92\u6362\u6027\uff1a\u533a\u5206\u54ea\u4e00\u5217\u9760\u7684\u662f\u5217\u540d</p> <p>\u884c\u4f4d\u7f6e\u4e92\u6362\u6027\uff1a\u533a\u5206\u54ea\u4e00\u884c\u662f\u9760\u67d0\u4e00\u6216\u67d0\u51e0\u5217\u7684\u503c\u3002</p> <p>\u5173\u7cfb\u662f\u4ee5\u5185\u5bb9\u6765\u8fdb\u884c\u533a\u5206\u7684\uff0c\u800c\u4e0d\u662f\u5c5e\u6027\u5728\u5173\u7cfb\u7684\u4f4d\u7f6e\u6765\u533a\u5206\uff0c\u56e0\u6b64\u540c\u4e00\u4e2a\u5173\u7cfb\u6539\u53d8\u4ed6\u7684\u5217\u7684\u987a\u5e8f\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002</p> <p>\u5728\u540c\u4e00\u4e2a\u5173\u7cfb\u4e2d\uff0c\u5b58\u5728\u76f8\u540c\u7684\u5143\u7ec4\uff0c\u53bb\u6389\u5176\u4e2d\u91cd\u590d\u7684\u5143\u7ec4\u3002</p> <p>\u5c5e\u6027\u4e0d\u53ef\u518d\u5206\u7279\u6027\uff1a\u5173\u7cfb\u7684\u7b2c\u4e00\u8303\u5f0f</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_25","title":"\u5019\u9009\u7801/\u5019\u9009\u952e","text":"<p>\u5019\u9009\u7801\u53ef\u4ee5\u6709\u5f88\u591a\u7ec4\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u7684\u65f6\u5019\u6839\u636e\u9700\u8981=\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_26","title":"\u4e3b\u7801/\u4e3b\u952e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_27","title":"\u4e3b\u5c5e\u6027\u548c\u975e\u4e3b\u5c5e\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_28","title":"\u5916\u7801/\u5916\u952e","text":"<p>\u5916\u7801\u901a\u5e38\u662f\u94fe\u63a5\u4e24\u4e2a\u6216\u8005\u591a\u79cd\u5173\u7cfb\u7684\u7ebd\u5e26\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_29","title":"\u5c0f\u7ed3","text":"<p>\u8fd8\u5b66\u4e60\u4e86\u5ea6/\u76ee \u57fa\u6570 \u5019\u9009\u7801 \u4e3b\u5c5e\u6027\u4e0e\u975e\u4e3b\u5c5e\u6027 \u5916\u7801</p> <p>\u5ea6\u662f\u5173\u7cfb\u4e2d\u7684\u5c5e\u6027\u7684\u6570\u76ee\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_30","title":"\u5173\u7cfb\u6a21\u578b\u4e2d\u7684\u5b8c\u6574\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_31","title":"\u5b9e\u4f53\u5b8c\u6574\u6027","text":"<p>\u5b9e\u4f53\u5c31\u7c7b\u4f3c\u4e8e\u6bcf\u4e2a\u5143\u7d20\u503c\uff0c\u5fc5\u987b\u6ee1\u8db3\u4e0d\u4e3a\u7a7a\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_32","title":"\u7a7a\u503c","text":"<p>\u6709\u7a7a\u503c\u7684\u65f6\u5019\u9700\u8981\u8fdb\u884c\u7279\u6b8a\u5904\u7406\uff0c\u8981\u7279\u522b\u6ce8\u610f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_33","title":"\u53c2\u7167\u5b8c\u6574\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_34","title":"\u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027","text":"<p>\u5b8c\u6574\u6027\u7ea6\u675f\uff1a\u5176\u5b9e\u5b8c\u6574\u6027\u53ef\u4ee5\u7406\u89e3\u4e3a\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5f97\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\u548c\u89c4\u8303\uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u6c42\u5143\u7d20\u7684\u683c\u5f0f\u5b8c\u6574\uff0c\u5e76\u8fdb\u884c\u76f8\u5173\u7684\u7ea6\u675f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#dbms_1","title":"DBMS\u5bf9\u4e8e\u5173\u7cfb\u5b8c\u6574\u6027\u7684\u652f\u6301","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_35","title":"\u56db\u3001\u5173\u7cfb\u6a21\u578b\u4e4b\u5173\u7cfb\u4ee3\u6570","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001\u5173\u7cfb\u4ee3\u6570\u4e4b\u57fa\u672c\u64cd\u4f5c</p> <p>2\u3001\u5173\u7cfb\u4ee3\u6570\u4e4b\u6269\u5c55\u64cd\u4f5c</p> <p>3\u3001\u5173\u7cfb\u4ee3\u6570\u4e4b\u7ec4\u5408\u4e0e\u5e94\u7528\u8bad\u7ec3</p> <p>4\u3001\u5173\u7cfb\u4ee3\u6570\u4e4b\u590d\u6742\u6269\u5c55\u64cd\u4f5c(\u9009)</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_36","title":"\u5173\u7cfb\u4ee3\u6570\u8fd0\u7b97\u7279\u70b9","text":"<p>\u57fa\u4e8e\u96c6\u5408\uff0c\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c\uff1a\u5e76\u3001\u5dee\u3001\u7b1b\u5361\u5c14\u79ef\u3001\u9009\u62e9\u3001\u6295\u5f71\u548c\u66f4\u540d\u7b49\u57fa\u672c\u64cd\u4f5c</p> <p>\u4ee5\u53ca\u4ea4\u3001\u8fde\u63a5\uff0c\u5173\u7cfb\u9664\u7b49\u6269\u5c55\u64cd\u4f5c\u3002</p> <p>\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c\u4ee5\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5173\u7cfb\u4e3a\u8f93\u5165\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u65b0\u7684\u5173\u7cfb\u3002</p> <p></p> <p>\u662f\u4e00\u79cd\u62bd\u8c61\u8bed\u8a00\uff0c\u662f\u5b66\u4e60\u5176\u4ed6\u6570\u636e\u5e93\u7684\u57fa\u7840\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_37","title":"\u57fa\u672c\u64cd\u4f5c\uff1f","text":"<p>1\u3001\u96c6\u5408\u64cd\u4f5c</p> <p></p> <p>2\u3001\u7eaf\u5173\u7cfb\u64cd\u4f5c</p> <p></p> <p>\u4e3a\u4ec0\u4e48\u63d0\u51fa\u5173\u7cfb\u4ee3\u6570</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_38","title":"\u5173\u7cfb\u4ee3\u6570\u4e4b\u57fa\u672c\u64cd\u4f5c","text":"<p>1\u3001\u5e76\u76f8\u5bb9\u6027</p> <p></p> <p>2\u3001\u5e76</p> <p></p> <p>3\u3001\u5dee</p> <p></p> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>4\u3001\u5e7f\u4e49\u7b1b\u5361\u5c14\u79ef</p> <p></p> <p></p> <p>\u6570\u76ee\u786e\u5b9e\u662f12\uff0c\u5ea6\u6570\u4e3a6</p> <p>\u76f8\u5173\u6027\u8d28</p> <p></p> <p>5\u3001\u9009\u62e9</p> <p></p> <p>6\u3001\u6295\u5f71\u64cd\u4f5c</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_39","title":"\u5173\u7cfb\u4ee3\u6570\u7684\u6269\u5c55\u64cd\u4f5c","text":"<p>1\u3001\u4ea4\u8fd0\u7b97</p> <p></p> <p>2\u3001\u8fde\u63a5\u64cd\u4f5c</p> <p></p> <p></p> <p></p> <p>\u66f4\u540d\u64cd\u4f5c\u3002</p> <p>\u5728\u9700\u8981\u8fdb\u884c\u81ea\u8fde\u63a5\u7684\u65f6\u5019\u4f7f\u7528\u3002</p> <p>\u7279\u522b\u6ce8\u610f\uff1a\u867d\u7136\u6211\u4eec\u5728\u8bb2\u89e3\u76f8\u5173\u7684\u94fe\u63a5\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u7b1b\u5361\u5c14\u79ef\u7136\u540e\u518d\u8fdb\u884c\u9009\u62e9\u6765\u5f97\u5230\u94fe\u63a5\u7ed3\u679c\uff0c\u4e3b\u8981\u662f\u65b9\u67cf\u9713\u7406\u89e3\uff0c\u4f46\u662f\u5f53\u5f15\u5165\u8fde\u63a5\u64cd\u4f5c\u540e\uff0cDBMS\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8fde\u63a5\u64cd\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u5148\u5f62\u6210\u7b1b\u5361\u5c14\u79ef\u3002</p> <p>3\u3001\u7b49\u503c\u8fde\u63a5</p> <p></p> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>4\u3001\u81ea\u7136\u8fde\u63a5</p> <p></p> <p></p> <p></p> <p>\u76f8\u5173\u4f8b\u5b50\uff1a </p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_40","title":"\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c\u4e4b\u7ec4\u5408\u4e0e\u5e94\u7528\u8bad\u7ec3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_1","title":"1\u3001\u96c6\u5408\u64cd\u4f5c\u601d\u7ef4\u8bad\u7ec3","text":"<p>\u76f8\u5173\u7ec3\u4e60\u3002</p> <p>\u6709\u7684\u65f6\u5019\u53ef\u80fd\u903b\u8f91\u4e0a\u770b\u8d77\u6765\u662f\u6b63\u786e\u7684\u4f46\u662f\u8bed\u4e49\u662f\u9519\u7684\u3002</p> <p></p> <p>\u81ea\u5df1\u5bf9\u81ea\u5df1\u505a\u81ea\u7136\u8fde\u63a5\uff0c\u7ed3\u679c\u8fd8\u662f\u8fd9\u4e2a\u5173\u7cfb\u81ea\u5df1\u3002</p> <p>\u524d\u4f8b\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u4ea4\u8fd0\u7b97\u6765\u5b9e\u73b0\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_41","title":"\u4e66\u5199\u5173\u7cfb\u4ee3\u6570\u7684\u601d\u7ef4","text":"<p>\u57fa\u672c\u601d\u8def\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_42","title":"\u5173\u7cfb\u4ee3\u6570\u590d\u6742\u6269\u5c55\u64cd\u4f5c","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_43","title":"\u9664\u8fd0\u7b97","text":"<p>\u9664\u6cd5\u8fd0\u7b97\u7ecf\u5e38\u7528\u4e8e\u6c42\u89e3\u201c\u67e5\u8be2.....\u5168\u90e8\u7684/\u6240\u6709\u7684....\u201d\u95ee\u9898</p> <p></p> <p></p> <p></p> <p></p> <p>\u76f8\u5173\u4f8b\u5b50\uff1a</p> <p>,</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_44","title":"\u5916\u8fde\u63a5","text":"<p>\u5916\u8fde\u63a5\u64cd\u4f5c</p> <p></p> <p>\u5916\u8fde\u63a5\u53ef\u4ee5\u5206\u4e3a\u5de6\u5916\u8fde\u63a5\uff0c\u53f3\u5916\u8fde\u63a5\uff0c\u5168\u5916\u8fde\u63a5\u3002</p> <p></p> <p>\u8981\u6ce8\u610f\u76f8\u5173\u7684\u8fde\u63a5\u7b26\u53f7\uff01</p> <p>\u5916\u8fde\u63a5\u64cd\u4f5c\u7684\u793a\u4f8b\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_45","title":"\u4e94\u3001\u5173\u7cfb\u6a21\u578b\u4e4b\u5173\u7cfb\u6f14\u7b97","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001\u5173\u7cfb\u6f14\u7b97\u4e4b\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97</p> <p>2\u3001\u5173\u7cfb\u6f14\u7b97\u4e4b\u5173\u7cfb\u57df\u6f14\u7b97</p> <p>3\u3001\u5173\u7cfb\u6f14\u7b97\u4e4b\u5b89\u5168\u6027</p> <p>4\u3001\u5173\u4e8e\u4e09\u79cd\u5173\u7cfb\u8fd0\u7b97\u7684\u4e00\u4e9b\u89c2\u70b9</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_46","title":"\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_2","title":"1\u3001\u6982\u8bba","text":"<p>\u524d\u9762\u51fa\u73b0\u8fc7\u5173\u7cfb\u6f14\u7b97\u5f62\u5f0f</p> <p></p> <p>\u5173\u7cfb\u6f14\u7b97\u662f\u4ee5\u6570\u7406\u903b\u8f91\u4e2d\u7684\u8c13\u8bcd\u6f14\u7b97\u4e3a\u57fa\u7840\u7684\u3002</p> <p>\u5173\u7cfb\u6f14\u7b97\u662f\u63cf\u8ff0\u5173\u7cfb\u8fd0\u7b97\u7684\u53e6\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\u3002</p> <p>SQL\u8bed\u8a00\u662f\u7ee7\u627f\u4e86\u5173\u7cfb\u4ee3\u6570\u548c\u5173\u7cfb\u6f14\u7b97\u5404\u81ea\u7684\u4f18\u70b9\u6240\u5f62\u6210\u7684\u3002</p> <p>\u6309\u7167\u8c13\u8bcd\u53d8\u91cf\u7684\u4e0d\u540c\uff0c\u53ef\u5206\u4e3a\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u548c\u5173\u7cfb\u57df\u6f14\u7b97\u3002</p> <ul> <li>\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u662f\u4ee5\u5143\u7ec4\u53d8\u91cf\u4f5c\u4e3a\u8c13\u8bcd\u53d8\u91cf\u7684\u57fa\u672c\u5bf9\u8c61</li> <li>\u5173\u7cfb\u57df\u6f14\u7b97\u662f\u4ee5\u57df\u53d8\u91cf\u4f5c\u4e3a\u8c13\u8bcd\u53d8\u91cf\u7684\u57fa\u672c\u5bf9\u8c61</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#2","title":"2\u3001\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u516c\u5f0f\u7684\u5f62\u5f0f","text":"<p>\u516c\u5f0f\u53ea\u9650\u4e8e\u4ee5\u4e0a\u5f62\u5f0f\u3002</p> <p>\u516c\u5f0f\u5b9a\u4e49\u5f88\u7b80\u5355\uff0c\u7406\u89e3\u8fd0\u7528\u662f\u5173\u952e</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_47","title":"\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u516c\u5f0f\u4e4b\u539f\u5b50\u516c\u5f0f\u53ca\u4e0e\u3001\u6216\u3001\u975e\u3001\u4e4b\u7406\u89e3\u4e0e\u8fd0\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_3","title":"1\u3001\u5143\u7ec4\u6f14\u7b97\u516c\u5f0f\u4e4b\u539f\u5b50\u516c\u5f0f","text":"<p>\u4f8b\u5b50\uff1a\u68c0\u7d22\u51fa\u5e74\u9f84\u5c0f\u4e8e20\u5c81\u5e76\u4e14\u662f\u7537\u540c\u5b66\u7684\u6240\u6709\u5b66\u751f\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#3","title":"3\u3001\u6ce8\u610f\u8fd0\u7b97\u7b26\u4e4b\u6b21\u5e8f\u53ca\u8bed\u4e49\u6b63\u786e\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_48","title":"\u5b58\u5728\u91cf\u8bcd\u4e0e\u5168\u79f0\u91cf\u8bcd\u4e4b\u7406\u89e3\u4e0e\u8fd0\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_4","title":"1\u3001\u5b58\u5728\u91cf\u8bcd\u4e0e\u5168\u79f0\u91cf\u8bcd\u516c\u5f0f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#2_1","title":"2\u3001\u5b58\u5728\u91cf\u8bcd\u4e0e\u5168\u79f0\u91cf\u8bcd\u516c\u5f0f\u4e4b\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_49","title":"\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u4e4b\u5e94\u7528\u8bad\u7ec3\u8bed\u4e49\u6b63\u786e\u6027\u4e0e\u7b49\u4ef7\u6027\u53d8\u6362\u8bad\u7ec3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_5","title":"1\u3001\u5143\u7ec4\u6f14\u7b97\u7684\u7b49\u4ef7\u6027\u53d8\u6362","text":"<p>\u7b49\u4ef7\u6027\u793a\u4f8b\uff1a</p> <p></p> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>\u5b58\u5728\u91cf\u8bcd\u548c\u5168\u79f0\u91cf\u8bcd \u7684\u7b49\u4ef7\u6027</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_50","title":"\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u4e4b\u5e94\u7528\u8bad\u7ec3\u56db\u4e2a\u6700\u590d\u6742\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_6","title":"1\u3001\u5168\u90fd\u5b66\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#2_2","title":"2\u3001\u5168\u90fd\u6ca1\u5b66\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#3_1","title":"3\u3001\u81f3\u5c11\u5b66\u8fc7\u4e00\u95e8","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#4","title":"4\u3001\u81f3\u5c11\u6709\u4e00\u95e8\u6ca1\u5b66\u8fc7","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_51","title":"\u5173\u7cfb\u5143\u7ec4\u6f14\u7b97\u4e4b\u5e94\u7528\u8bad\u7ec3\u5c06\u5173\u7cfb\u4ee3\u6570\u8f6c\u6362\u4e3a\u5143\u7ec4\u6f14\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_7","title":"1\u3001\u5143\u7ec4\u6f14\u7b97\u516c\u5f0f\u57df\u5173\u7cfb\u4ee3\u6570\u7684\u7b49\u4ef7\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#2_3","title":"2\u3001\u5143\u7ec4\u6f14\u7b97\u516c\u5f0f\u603b\u7ed3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_52","title":"\u5173\u7cfb\u57df\u6f14\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1_8","title":"1\u3001\u5173\u7cfb\u57df\u6f14\u7b97\u516c\u5f0f","text":"<p>\u57df\u6f14\u7b97\u662f\u4ee5\u57df\u53d8\u91cf\u4e3a\u57fa\u672c\u5355\u4f4d\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#qbe","title":"\u57fa\u4e8e\u5173\u7cfb\u57df\u6f14\u7b97\u7684QBE\u8bed\u8a00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#1qbe","title":"1\u3001\u5173\u7cfb\u57df\u6f14\u7b97\u8bed\u8a00QBE","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#2qbe","title":"2\u3001QBE\u7684\u57fa\u672c\u5f62\u5f0f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#3qbe","title":"3\u3001QBE\u7684\u64cd\u4f5c\u547d\u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#qbe_1","title":"QBE\u7684\u590d\u6742\u6761\u4ef6\u4e66\u5199\u57df\u793a\u4f8b\u5143\u7d20","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#qbe_2","title":"qbe\u5e94\u7528\u6f14\u7ec3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_53","title":"\u5173\u7cfb\u6f14\u7b97\u7684\u5b89\u5168\u6027","text":"<p>\u5173\u7cfb\u8fd0\u7b97\u7684\u5b89\u5168\u6027\uff1f</p> <p></p> <p>\u5173\u7cfb\u6f14\u7b97\u7684\u7ea6\u675f</p> <p></p> <p>\u5b89\u5168\u5143\u7ec4\u6f14\u7b97\u8868\u8fbe\u5f0f</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_54","title":"\u5173\u4e8e\u5173\u7cfb\u8fd0\u7b97\u7684\u4e00\u4e9b\u89c2\u70b9","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql","title":"\u516d\u3001SQL\u8bed\u8a00\u4e4b\u6982\u8ff0","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001SQL\u8bed\u8a00\u6982\u8ff0</p> <p>2\u3001SQL\u8bed\u8a00\u4e4bddl\u5b9a\u4e49\u6570\u636e\u5e93</p> <p>3\u3001SQL\u8bed\u8a00\u4e4bDML\u64cd\u7eb5\u6570\u636e\u5e93</p> <p>\u91cd\u70b9\u96be\u70b9\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_1","title":"SQL\u8bed\u8a00\u6982\u8ff0","text":"<p>1\u3001SQL\u8bed\u8a00\u63d0\u51fa\u548c\u53d1\u5c55</p> <p>\u8fd9\u4e2a\u81ea\u884c\u641c\u7d22\u5373\u53ef\uff0c\u4e0d\u8981\u505a\u8fc7\u591a\u89e3\u91ca</p> <p>2\u3001SQL\u8bed\u8a00\u7684\u529f\u80fd\u6982\u8ff0</p> <p>SQL\u8bed\u8a00\u662f\u96c6DDL,DML,\u548cDCL\u4e0e\u4e00\u4f53\u7684\u6570\u636e\u5e93\u8bed\u8a00\u3002</p> <p></p> <p>\u4ea4\u4e92\u5f0fSQL-&gt;\u5d4c\u5165\u5f0fSQL-&gt;\u52a8\u6001SQL\u7b49\u7b49\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_2","title":"\u5229\u7528SQL\u8bed\u8a00\u5efa\u7acb\u6570\u636e\u5e93","text":"<p>\u5efa\u7acb\u6570\u636e\u5e93</p> <p></p> <p>DDL\u901a\u5e38\u7531DBA\u6765\u4f7f\u7528\uff0c\u4e5f\u6709\u7ecfDBA\u6388\u6743\u540e\u7531\u5e94\u7528\u7a0b\u5e8f\u5458\u6765\u4f7f\u7528\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#database","title":"\u521b\u5efaDatabase","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#table","title":"\u521b\u5efaTable","text":"<p>\u6570\u636e\u7c7b\u578b</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#_55","title":"\u5efa\u7acb\u6570\u636e\u5e93","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#-insert-into","title":"\u5411\u8868\u4e2d\u8ffd\u52a0\u5143\u7ec4\u7684\u503c-insert into","text":"<p>\u76f8\u5173\u4f8b\u5b50</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_3","title":"\u5229\u7528SQL\u8bed\u8a00\u8fdb\u884c\u7b80\u5355\u67e5\u8be2","text":"<p>1\u3001\u5355\u8868\u67e5\u8be2</p> <p></p> <p>\u76f8\u5173\u4f8b\u5b50\uff1a</p> <p></p> <p>2\u3001\u68c0\u7d22\u6761\u4ef6</p> <p>\u68c0\u7d22\u6761\u4ef6\u7684\u4e66\u5199</p> <p></p> <p>\u8981\u6ce8\u610f\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7</p> <p></p> <p>3\u3001\u68c0\u7d22\u7ed3\u679c\u7ed3\u679c\u552f\u4e00\u6027\u95ee\u9898</p> <p></p> <p></p> <p>4\u3001\u7ed3\u679c\u6392\u5e8f\u95ee\u9898</p> <p></p> <p>5\u3001\u6a21\u7cca\u67e5\u8be2\u95ee\u9898</p> <p></p> <p>\u793a\u4f8b\uff1a\u68c0\u7d22\u6240\u6709\u59d3\u5f20\u7684\u5b66\u751f\u5b66\u53f7\u53ca\u59d3\u540d</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_4","title":"\u5229\u7528SQL\u8bed\u8a00\u8fdb\u884c\u591a\u8868\u8054\u5408\u67e5\u8be2","text":"<p>1\u3001\u591a\u8868\u8054\u5408\u67e5\u8be2</p> <p></p> <p></p> <p>2\u3001\u91cd\u540d\u4e4b\u5904\u7406\uff0c\u8868\u66f4\u540d\u4e0e\u8868\u522b\u540d</p> <p></p> <p>3\u3001\u4e0d\u7b49\u503c\u8fde\u63a5</p> <p></p> <p>4\u3001\u591a\u8868\u8054\u5408\u67e5\u8be2\u8bad\u7ec3</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_5","title":"\u5229\u7528SQL\u8bed\u8a00\u8fdb\u884c\u589e\u5220\u6539\u64cd\u4f5c","text":"<p>1\u3001SQL-\u4e4b\u66f4\u65b0\u64cd\u4f5c</p> <p></p> <p>2\u3001SQL\u4e4bINSERT</p> <p></p> <p></p> <p>\u590d\u6742\u7528\u6cd5\uff1a</p> <p></p> <p>3\u3001SQL\u4e4bDELETE\u547d\u4ee4</p> <p></p> <p>\u76f8\u5173\u5b9e\u4f8b\uff1a</p> <p></p> <p></p> <p>4\u3001SQL\u4e4bUPDATE</p> <p></p> <p>\u76f8\u5173\u5b9e\u4f8b\uff1a</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sql_6","title":"\u5229\u7528SQL\u8bed\u8a00\u4fee\u6b63\u4e0e\u64a4\u9500\u6570\u636e\u5e93","text":"<p>1\u3001SQL-DDL\u4e4b\u64a4\u9500\u4e0e\u4fee\u6539</p> <p></p> <p></p> <p>2\u3001\u64a4\u9500\u57fa\u672c\u8868</p> <p></p> <p>3\u3001\u64a4\u9500\u6570\u636e\u5e93</p> <p></p> <p>4\u3001\u6570\u636e\u5e93\u6307\u5b9a\u4e0e\u5173\u95ed\u547d\u4ee4</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%89/#sqlserverdbms","title":"SQLSERVER\u2014\u2014\u5178\u578bDBMS","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/","title":"\u6570\u636e\u5e93\u5b66\u4e60\uff08\u7248\u672c1\uff09-03","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#sql","title":"\u7b2c\u516b\u8bb2 SQL\u8bed\u8a00\u4e0e\u6570\u636e\u5e93\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027","text":"<p>\u57fa\u672c\u5185\u5bb9</p> <p>1\u3001\u6570\u636e\u5e93\u5b8c\u6574\u6027\u7684\u6982\u5ff5\u53ca\u5206\u7c7b</p> <p>2\u3001SQL\u8bed\u8a00\u4e4b\u5217\u7ea6\u675f\u4e0e\u8868\u7ea6\u675f-\u9759\u6001\u7ea6\u675f</p> <p>3\u3001SQL\u8bed\u8a00\u4e4b\u89e6\u53d1\u5668-\u52a8\u6001\u7ea6\u675f</p> <p>4\u3001\u6570\u636e\u5e93\u5b89\u5168\u6027\u7684\u6982\u5ff5\u53ca\u5206\u7c7b</p> <p>5\u3001SQL\u8bed\u8a00\u4e4b\u5b89\u5168\u6027\u5b9e\u73b0</p> <p>\u76f8\u5173\u91cd\u70b9\u548c\u96be\u70b9</p> <p>1\u3001\u6570\u636e\u5e93\u5b8c\u6574\u6027\u7684\u6982\u5ff5\uff0c\u5b8c\u6574\u6027\u89c4\u5219\uff0c\u9759\u6001\u7ea6\u675f\uff0c\u52a8\u6001\u7ea6\u675f(\u89e6\u53d1\u5668)</p> <p>2\u3001\u6570\u636e\u5e93\u5b89\u5168\u6027\u7684\u6982\u5ff5\uff0c\u5b89\u5168\u6027\u8bbf\u95ee\u89c4\u5219\uff0c\u6743\u5229\u4e0e\u6388\u6743</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_1","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027\u7684\u6982\u5ff5\u53ca\u5206\u7c7b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#1","title":"1\u3001\u4ec0\u4e48\u662f\u6570\u636e\u5e93\u5b8c\u6574\u6027","text":"<p>\u6570\u636e\u5e93\u5b8c\u6574\u6027\u662f\u6307DBMS\u5e94\u4fdd\u8bc1\u7684DB\u7684\u4e00\u79cd\u7279\u6027-\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u7684\u6b63\u786e\u6027\u3001\u6709\u6548\u6027\u548c\u4e00\u81f4\u6027</p> <p>\u5e7f\u4e49\u5b8c\u6574\u6027\uff1a\u8bed\u4e49\u5b8c\u6574\u6027\u3001\u5e76\u53d1\u63a7\u5236\u3001\u5b89\u5168\u63a7\u5236\u3001DB\u6545\u969c\u6062\u590d\u7b49</p> <p>\u72ed\u4e49\u5b8c\u6574\u6027\uff1a\u4e13\u6307\u8bed\u4e49\u5b8c\u6574\u6027\u3001DBMS\u901a\u5e38\u6709\u4e13\u95e8\u7684\u5b8c\u6574\u6027\u7ba1\u7406\u673a\u5236\u4e0e\u7a0b\u5e8f\u6765\u5904\u7406\u8bed\u4e49\u5b8c\u6574\u6027\u95ee\u9898\u3002</p> <p>\u672c\u8bb2\u4e13\u6307\u8bed\u4e49\u5b8c\u6574\u6027\u3002</p> <p>\u5173\u7cfb\u6a21\u578b\u4e2d\u7684\u5b8c\u6574\u6027\u8981\u6c42\uff1a\u5b9e\u4f53\u5b8c\u6574\u6027\u3001\u53c2\u7167\u5b8c\u6574\u6027\u3001\u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#2","title":"2\u3001\u4e3a\u4ec0\u4e48\u4f1a\u5f15\u53d1\u6570\u636e\u5e93\u5b8c\u6574\u6027\u7684\u95ee\u9898\u5462","text":"<p>dbms\u600e\u4e48\u81ea\u52a8\u4fdd\u8bc1\u5b8c\u6574\u6027\u5462\uff1f</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#3","title":"3\u3001\u600e\u6837\u4fdd\u8bc1\u6570\u636e\u5e93\u5b8c\u6574\u6027","text":"<p>\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u7684\u4e00\u822c\u5f62\u5f0f\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_2","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027\u7684\u5206\u7c7b","text":"<p>\u6309\u7ea6\u675f\u5bf9\u8c61\u5206\u7c7b</p> <p></p> <p>\u6309\u7167\u7ea6\u675f\u6765\u6e90\u5206\u7c7b</p> <p></p> <p>\u6309\u7ea6\u675f\u72b6\u6001\u5206\u7c7b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#sql_1","title":"\u5229\u7528SQL\u8bed\u8a00\u5b9e\u73b0\u6570\u636e\u5e93\u7684\u9759\u6001\u5b8c\u6574\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#1sql","title":"1\u3001SQL\u8bed\u8a00\u652f\u6301\u7684\u7ea6\u675f\u7c7b\u522b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#2sql-create-table","title":"2\u3001SQL\u8bed\u8a00\u5b9e\u73b0\u7ea6\u675f\u7684\u65b9\u6cd5-create table","text":"<p>\u76f8\u5173\u5b9e\u4f8b</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#table_constr","title":"table_constr\u8868\u7ea6\u675f","text":"<p>\u76f8\u5173\u5b9e\u4f8b</p> <p></p> <p></p> <p>check\u7684\u6761\u4ef6\u53ef\u4ee5\u662fselect-from-where\u5185\u4efb\u4f55where\u540e\u7684\u96e8\u5177\uff0c\u5305\u542b\u5b50\u67e5\u8be2</p> <p>\u76f8\u5173\u4f8b\u5b50\uff1a</p> <p></p> <p></p> <p>\u4e00\u4e9b\u7b80\u5355\u793a\u4f8b</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#3sql-","title":"3\u3001SQL\u8bed\u8a00\u5b9e\u73b0\u7ea6\u675f\u7684\u65b9\u6cd5-\u65ad\u8a00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#sql_2","title":"\u5229\u7528SQL\u8bed\u8a00\u5b9e\u73b0\u6570\u636e\u5e93\u7684\u52a8\u6001\u5b8c\u6574\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#1sql-","title":"1\u3001SQL\u8bed\u8a00\u652f\u6301\u7684\u7ea6\u675f\u7c7b\u522b-\u56de\u987e","text":"<p>\u652f\u6301\u9759\u6001\u7ea6\u675f\uff0c\u52a8\u6001\u7ea6\u675f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#2-trigger","title":"2\u3001\u52a8\u6001\u5b8c\u6574\u6027\u7684\u65b9\u6cd5-\u89e6\u53d1\u5668Trigger","text":"<p>\u57fa\u672c\u8bed\u6cd5</p> <p></p> <p></p> <p></p> <p>\u793a\u4f8b1</p> <p></p> <p>\u793a\u4f8b2</p> <p></p> <p>\u793a\u4f8b3</p> <p></p> <p>\u793a\u4f8b4</p> <p></p> <p>\u793a\u4f8b5</p> <p></p> <p>\u793a\u4f8b6</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_3","title":"\u6570\u636e\u5e93\u5b89\u5168\u6027\u7684\u6982\u5ff5\u53ca\u5206\u7c7b","text":"<p>\u6570\u636e\u5e93\u5b89\u5168\u6027\u662f\u6307DBMS\u5e94\u8be5\u4fdd\u8bc1\u7684\u6570\u636e\u5e93\u7684\u4e00\u79cd\u7279\u6027\uff0c\u514d\u53d7\u975e\u6cd5\u3001\u975e\u6388\u6743\u7528\u6237\u7684\u4f7f\u7528\u3001\u6cc4\u9732\u3001\u66f4\u6539\u6216\u7834\u574f</p> <p>\u6570\u636e\u5e93\u5b89\u5168\u6027\u7ba1\u7406\u6d89\u53ca\u8bb8\u591a\u65b9\u9762\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#dbms","title":"DBMS\u7684\u5b89\u5168\u673a\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#dba","title":"DBA\u7684\u8d23\u4efb\u548c\u4e49\u52a1","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_4","title":"\u6570\u636e\u5e93\u81ea\u4e3b\u5b89\u5168\u6027\u673a\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#dbms_1","title":"DBMS\u600e\u4e48\u81ea\u52a8\u5b9e\u73b0\u81ea\u4e3b\u5b89\u5168\u6027\u5462\uff1f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_5","title":"\u6570\u636e\u5e93\u81ea\u4e3b\u5b89\u5168\u6027\u8bbf\u95ee\u89c4\u5219","text":"<p>\u6743\u5229\uff1a\u589e\u5220\u6539\u67e5\uff0c\u521b\u5efa\u7b49\u7b49</p> <p>\u8c13\u8bcd\uff1a\u62e5\u6709\u6743\u5229\u9700\u6ee1\u8db3\u7684\u6761\u4ef6\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_6","title":"\u4e00\u4e2a\u81ea\u4e3b\u5b89\u5168\u6027\u63a7\u5236\u7684\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_7","title":"\u4e24\u79cd\u63a7\u5236\u793a\u4f8b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_8","title":"\u81ea\u4e3b\u5b89\u5168\u6027\u7684\u5b9e\u73b0\u65b9\u5f0f","text":"<p>\u7b2c\u4e00\u79cd</p> <p></p> <p>\u7b2c\u4e8c\u79cd\uff1a\u89c6\u56fe</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#1sql_1","title":"1\u3001SQL\u8bed\u8a00\u7684\u7528\u6237\u4e0e\u6743\u5229","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#sql-dcl","title":"SQL-DCL\u7684\u547d\u4ee4\u53ca\u5176\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_9","title":"\u6388\u6743\u547d\u4ee4","text":"<p>\u76f8\u5173\u793a\u4f8b\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_10","title":"\u6536\u56de\u6388\u6743\u547d\u4ee4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_11","title":"\u5b89\u5168\u578b\u63a7\u5236\u7684\u5176\u4ed6\u7b80\u4ecb","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#1_1","title":"1\u3001\u81ea\u4e3b\u5b89\u5168\u6027\u7684\u6388\u6743\u8fc7\u7a0b\u53ca\u5176\u95ee\u9898","text":"<p>\u6388\u6743\u8fc7\u7a0b</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_12","title":"\u5f3a\u5236\u5b89\u5168\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_13","title":"\u5f3a\u5236\u5b89\u5168\u6027\u673a\u5236\u7684\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8903/#_14","title":"\u672c\u8bb2\u4e3b\u8981\u8bb2\u4e86\u6570\u636e\u5e93\u5b89\u5168\u6027\u548c\u6570\u636e\u5e93\u7684\u5b8c\u6574\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/","title":"\u6570\u636e\u5e93\u5b66\u4e60\uff084\uff09-04","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#sql","title":"\u7b2c\u4e5d\u8bb2 \u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u4e4b\u57fa\u672c\u6280\u5de7","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001\u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u6982\u8ff0</p> <p>2\u3001\u53d8\u91cf\u58f0\u660e\u4e0e\u6570\u636e\u5e93\u8fde\u63a5</p> <p>3\u3001\u6570\u636e\u96c6\u4e0e\u6e38\u6807</p> <p>4\u3001\u53ef\u6eda\u52a8\u6e38\u6807\u4e0e\u6570\u636e\u5e93\u7684\u589e\u5220\u6539</p> <p>5\u3001\u72b6\u6001\u6355\u83b7\u53ca\u9519\u8bef\u5904\u7406\u673a\u5236</p> <p>\u91cd\u70b9\u4e0e\u96be\u70b9</p> <ul> <li>\u6570\u636e\u5e93\u8bed\u8a00\u5d4c\u5165\u5230\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u4f7f\u7528\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e00\u8fc7\u7a0b\u53ca\u5176\u601d\u7ef4</li> <li>\u600e\u6837\u5728\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u5904\u7406\u6570\u636e\u96c6-\u6e38\u6807\u7684\u4f7f\u7528\u6280\u5de7</li> <li>\u9519\u8bef\u6355\u83b7\u673a\u5236-\u8bbe\u7f6e\u9519\u8bef\u9677\u9631\u4e0eSQLCA\u7684\u4f5c\u7528\u4e0e\u4f7f\u7528</li> <li>\u4e8b\u52a1\u7684\u6982\u5ff5-\u4fdd\u8bc1\u6570\u636e\u6b63\u786e\u6027\u7684\u673a\u5236</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#sql_1","title":"\u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u6982\u8ff0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#1sql","title":"1\u3001\u4ea4\u4e92\u5f0fSQL\u8bed\u8a00\u7684\u5c40\u9650","text":"<p>\u4ea4\u4e92\u5f0fSQL\u8bed\u8a00\u6709\u5f88\u591a\u4f18\u70b9</p> <p>1\u3001\u8bb0\u5f55\u96c6\u5408\u64cd\u4f5c</p> <p>2\u3001\u975e\u8fc7\u7a0b\u6027\u64cd\u4f5c\uff1a\u6307\u51fa\u8981\u505a\u4ec0\u4e48\uff0c\u800c\u4e0d\u9700\u8981\u6307\u51fa\u600e\u4e48\u505a</p> <p>3\u3001\u4e00\u6761\u8bed\u53e5\u5c31\u53ef\u5b9e\u73b0\u590d\u6742\u67e5\u8be2\u7684\u7ed3\u679c</p> <p>\u4f46\u662f\uff0c\u4ea4\u4e92\u5f0fSQL\u672c\u8eab\u4e5f\u6709\u5f88\u591a\u5c40\u9650</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_1","title":"\u4ece\u4f7f\u7528\u8005\u89d2\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#sql_2","title":"\u4eceSQL\u672c\u8eab\u89d2\u5ea6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#3sqlsql","title":"3\u3001\u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u4e0e\u4ea4\u4e92\u5f0fSQL\u8bed\u8a00\u7684\u5bf9\u6bd4","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#4sql","title":"4\u3001\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u4f7f\u7528\u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#5sql","title":"5\u3001\u5d4c\u5165\u5f0fSQL\u8bed\u8a00\u5b66\u4e60\u7684\u76ee\u6807","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_2","title":"\u5b66\u4e60\u76ee\u6807","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_3","title":"\u53d8\u91cf\u58f0\u660e\u4e0e\u6570\u636e\u5e93\u8fde\u63a5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_4","title":"\u53d8\u91cf\u7684\u58f0\u660e\u4e0e\u4f7f\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_5","title":"\u7a0b\u5e8f\u4e0e\u6570\u636e\u5e93\u7684\u94fe\u63a5\u4e0e\u65ad\u5f00","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#sql_3","title":"SQL\u6267\u884c\u7684\u63d0\u4ea4\u4e0e\u64a4\u9500","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_6","title":"\u4e8b\u52a1\u7684\u6982\u5ff5\u4e0e\u7279\u6027","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_7","title":"\u4e8b\u52a1\u7684\u7279\u6027","text":"<p>\u76f8\u5173\u4f8b\u5b50</p> <p></p> <p></p> <p></p> <p></p> <p>return 1;</p> <p>}</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_8","title":"\u6570\u636e\u96c6\u4e0e\u6e38\u6807","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#1","title":"1\u3001\u6253\u7b97\u89e3\u51b3\u7684\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#2","title":"2\u3001\u5982\u4f55\u8bfb\u53d6\u5355\u884c\u6570\u636e\u548c\u591a\u884c\u6570\u636e","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#3","title":"3\u3001\u6e38\u6807\u7684\u4f7f\u7528\u6982\u89c8","text":"<p>\u6e38\u6807\u53ef\u4ee5\u5b9a\u4e49\u4e00\u6b21\uff0c\u591a\u6b21\u6253\u5f00\uff0c\u591a\u6b21\u5173\u95ed</p> <p></p> <p>...</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_9","title":"\u53ef\u6eda\u52a8\u6e38\u6807\u53ca\u6570\u636e\u5e93\u7684\u589e\u5220\u6539","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#1_1","title":"1\u3001\u53ef\u6eda\u52a8\u6e38\u6807\u7684\u6982\u5ff5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#2_1","title":"2\u3001\u53ef\u6eda\u52a8\u6e38\u6807\u7684\u5b9a\u4e49\u548c\u4f7f\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_10","title":"\u6570\u636e\u7684\u5220\u9664\u4e0e\u66f4\u65b0","text":"<p>\u6570\u636e\u5e93\u8bb0\u5f55\u7684\u66f4\u65b0</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_11","title":"\u6570\u636e\u5e93\u8bb0\u5f55\u7684\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_12","title":"\u72b6\u6001\u6355\u83b7\u53ca\u9519\u8bef\u5904\u7406\u673a\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_13","title":"\u57fa\u672c\u673a\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#sqlca","title":"SQLCA","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_14","title":"\u72b6\u6001\u6355\u83b7\u8bed\u53e5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_15","title":"\u57fa\u672c\u673a\u5236","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_16","title":"\u72b6\u6001\u4fe1\u606f","text":"<p>\u5178\u578bDBMS\u7cfb\u7edf\u8bb0\u5f55\u72b6\u6001\u4fe1\u606f\u7684\u4e09\u79cd\u65b9\u6cd5</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%89%88%E6%9C%AC1%EF%BC%8904/#_17","title":"\u7a0b\u5e8f\u81ea\u8eab\u8fdb\u884c\u9519\u8bef\u4fe1\u606f\u7684\u5904\u7406","text":"<p>ending!!!</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u7248\u672c1-\u90e8\u52062","text":"<p>\u5b66\u4e60\u81eaB\u7ad9\uff0c\u6218\u5fb7\u81e3\u8001\u5e08\u7684\u8bfe\u7a0b\uff0c\u4ec5\u7528\u4e8e\u4e2a\u4eba\u5b66\u4e60\uff0c\u5982\u9700\u8fdb\u884c\u76f8\u5173\u7814\u7a76\uff0c\u8bf7\u79fb\u6b65\u76f8\u5173\u6559\u7a0b\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#-sql","title":"\u7b2c\u4e03\u8bb2 \u6570\u636e\u5e93\u8bed\u8a00-SQL","text":"<p>\u57fa\u672c\u5185\u5bb9\uff1a</p> <p>1\u3001SQL\u8bed\u8a00\u4e4b\u5b50\u67e5\u8be2\u8fd0\u7528</p> <p>2\u3001SQL\u8bed\u8a00\u4e4b\u7ed3\u679c\u8ba1\u7b97\u4e0e\u805a\u96c6\u51fd\u6570</p> <p>3\u3001SQL\u8bed\u8a00\u4e4b\u5206\u7ec4\u67e5\u8be2\u4e0e\u5206\u7ec4\u8fc7\u6ee4</p> <p>4\u3001\u5229\u7528SQL\u8bed\u8a00\u5b9e\u73b0\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c</p> <p>5\u3001SQL\u8bed\u8a00\u4e4b\u89c6\u56fe\u53ca\u5176\u5e94\u7528</p> <p>\u91cd\u70b9\u548c\u96be\u70b9</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql-notin","title":"\u5229\u7528SQL\u8bed\u8a00\u8868\u8fbe\u590d\u6742\u67e5\u8be2-\uff08NOT\uff09IN\u5b50\u67e5\u8be2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#1","title":"1\u3001\u5b50\u67e5\u8be2","text":"<p>\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u5b50\u67e5\u8be2\uff1f</p> <p></p> <p>\u5b50\u67e5\u8be2\u7684\u5b9a\u4e49\uff1a</p> <p></p> <p>\u603b\u5171\u4e09\u79cd\u7c7b\u578b\u7684\u5b50\u67e5\u8be2\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#2innot-in","title":"2\u3001IN\u4e0eNOT IN\u8c13\u8bcd\u5b50\u67e5\u8be2","text":"<p>\u7b80\u5355\u7684\u8bed\u6cd5\u5f62\u5f0f\uff1a</p> <p></p> <p>\u7b80\u5355\u793a\u4f8b\uff1a\u5217\u51fa\u5f20\u4e09\u3001\u738b\u4e09\u540c\u5b66\u7684\u6240\u6709\u4fe1\u606f</p> <p>\u53ef\u4ee5\u6709\u4f7f\u7528\u96c6\u5408\u548cor\u8bed\u6cd5\u601d\u8def</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_1","title":"\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6240\u6709\u53d8\u91cf\u6211\u90fd\u76f4\u63a5\u5927\u5199\u4e86\uff0c\u540e\u7eed\u6839\u636e\u5b9e\u9645\u60c5\u51b5\uff0c\u81ea\u884c\u5224\u65ad\u5927\u5c0f\u5199\u3002","text":"<p>\u4f8b2\uff1a\u5217\u51fa\u9009\u4fee\u4e86001\u53f7\u8bfe\u7a0b\u7684\u5b66\u751f\u7684\u5b66\u53f7\u548c\u59d3\u540d</p> SQL<pre><code>SELECT s1.sno,s1,sname\nFROM Student as s1,Course as c1\nWHERE s1.sno=c1.sno AND c1.cno=\"001\";\n</code></pre> SQL<pre><code>SELECT sno,sname\nFROM Student\nWHERE sno in (\n    SELECT sno \n    FROM SC\n    WHERE cno='001'\n);\n</code></pre> <p>\u4f8b3\uff1a\u6c42\u65e2\u5b66\u8fc7001\u53f7\u8bfe\u7a0b\uff0c\u53c8\u5b66\u8fc7002\u53f7\u8bfe\u7a0b\u7684\u5b66\u751f\u7684\u5b66\u53f7</p> SQL<pre><code>SELECT SNO\nFROM SC\nWHERE CNO='001' AND SNO IN (\n    SELECT SNO\n    FROM SC\n    WHERE S2.CNO='002'\n);\n</code></pre> <p>\u5217\u51fa\u6ca1\u5b66\u8fc7\u674e\u660e\u8001\u5e08\u8bb2\u6388\u8bfe\u7a0b\u7684\u6240\u6709\u540c\u5b66\u7684\u59d3\u540d</p> SQL<pre><code>SELECT SNAME\nFROM STUDENT\nWHERE  SNO  NOT IN (\n    SELECT SNO\n    FROM SC,COURSE C,TEACHER T\n    WHERE T.TNAME='\u674e\u660e' AND SC.CNO=C.CNO AND T.TNO=C.TNO\n)\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_2","title":"\u975e\u76f8\u5173\u5b50\u67e5\u8be2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_3","title":"\u76f8\u5173\u5b50\u67e5\u8be2","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#-someall","title":"\u590d\u6742\u67e5\u8be2- Some\u4e0eAll\u5b50\u67e5\u8be2","text":"<p>\u4f8b\u5b50\uff1a</p> <p>\u627e\u51fa\u5de5\u8d44\u6700\u4f4e\u7684\u6559\u5e08\u59d3\u540d</p> SQL<pre><code>SELECT TNAME \nFROM TEACHER\nWHERE SALARY&lt;=ALL ( SELECT SALARY FROM TEACHER);\n</code></pre> <p>\u627e\u51fa001\u53f7\u8bfe\u7a0b\u6210\u7ee9\u4e0d\u662f\u6700\u9ad8\u7684\u6240\u6709\u5b66\u751f\u7684\u5b66\u53f7</p> SQL<pre><code>SELECT SNO\nFROM SC\nWHERE CNO= '001' AND SCORE &lt; SOME(SELECT SCORE FROM SC WHERE CNO='001');\n</code></pre> <p>\u627e\u51fa\u6240\u6709\u8bfe\u7a0b\u90fd\u4e0d\u53ca\u683c\u7684\u5b66\u751f\u59d3\u540d</p> SQL<pre><code>SELECT SNAME\nFROM STUDENT \nWHERE 60&gt; ALL(SELECT SCORE FROM SC WHERE SNO=STUDENT.SNO);\n</code></pre> <p>\u627e\u51fa001\u53f7\u8bfe\u7a0b\u6210\u7ee9\u6700\u9ad8\u7684\u6240\u6709\u5b66\u751f\u7684\u5b66\u53f7</p> SQL<pre><code>SELECT SNO FROM SC\nWHERE CNO='001' AND SCORE &gt;= ALL(SELECT SCORE FROM SC WHERE CNO='001');\n</code></pre> <p>\u627e\u51fa98030101\u53f7\u540c\u5b66\u6210\u7ee9\u6700\u4f4e\u7684\u8bfe\u7a0b\u53f7</p> SQL<pre><code>SELECT CNO FROM SC\nWHERE SNO='98030101' AND SCORE &lt;= ALL (SELECT SCORE FROM SC WHERE SNO='98030101');\n</code></pre> <p>\u627e\u51fa\u5f20\u4e09\u540c\u5b66\u6210\u7ee9\u6700\u4f4e\u7684\u8bfe\u7a0b\u53f7</p> SQL<pre><code>SELECT CNO\nFROM SC,STUDENT S\nWHERE SNAME='\u5f20\u4e09' AND S.SNO=SC.SNO AND SCORE &lt;=ALL(SELECT SCORE FROM SC WHERE SNO=S.SNO);\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_4","title":"\u9700\u8981\u6ce8\u610f\u7684","text":"<p>\u8fd9\u4e2a\u5730\u65b9\u7684&lt;&gt;some\u53ef\u80fd\u627e\u51fa\u6765\u7684\u7ed3\u679c\u4e0d\u5168\uff0c\u56e0\u6b64\u4ed6\u662f\u548c\u5176\u4f59\u4e24\u4e2a\u4e0d\u7b49\u4ef7\u7684\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#notexists","title":"\u590d\u6742\u67e5\u8be2\u2014\u2014\uff08NOT\uff09EXISTS\u5b50\u67e5\u8be2","text":"<p>\u4f8b\u5b50\uff1a\u5217\u51fa\u6ca1\u5b66\u8fc7\u674e\u660e\u8001\u5e08\u8bb2\u6388\u4efb\u4f55\u4e00\u95e8\u8bfe\u7a0b\u7684\u6240\u6709\u540c\u5b66\u7684\u59d3\u540d\u3002</p> <p></p> <p>\u4f8b\u5b502\uff1a</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql","title":"\u5229\u7528SQL\u8bed\u8a00\u8fdb\u884c\u7ed3\u679c\u8ba1\u7b97\u4e0e\u805a\u96c6\u8ba1\u7b97","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#1_1","title":"1\u3001\u7ed3\u679c\u8ba1\u7b97","text":"<p>\u6c42\u89e3\u6709\u5dee\u989d\u7684\u4efb\u610f\u4e24\u4f4d\u6559\u5e08\u7684\u85aa\u6c34\u5dee\u989d\uff0c\u5dee\u989d&gt;0</p> SQL<pre><code>SELECT T1.TNAME AS TR1,T2.TNAME AS TR2,T1.SALARY-T2.SALARY\nFROM TEACHER T1,TEACHER T2\nWHERE T1.SALARY&gt;T2.SALARY;\n</code></pre> <p>\u4f9d\u636e\u5b66\u751f\u5e74\u9f84\u6c42\u5b66\u751f\u7684\u51fa\u751f\u5e74\u4efd\uff0c\u5f53\u524d\u662f2024\u5e74</p> SQL<pre><code>SELECT S.SNO,S.SNAME,2024-S.SAGE+1 AS SYEAR\nFROM STUDENT S;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#2","title":"2\u3001\u5e94\u7528\u805a\u96c6\u51fd\u6570\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97","text":"<p>\u6c42\u6559\u5e08\u7684\u5de5\u8d44\u603b\u989d</p> SQL<pre><code>SELECT SUM(SALARY) FROM TEACHER;\n</code></pre> <p>\u6c42\u8ba1\u7b97\u673a\u7cfb\u6559\u5e08\u7684\u5de5\u8d44\u603b\u989d</p> SQL<pre><code>SELECT SUM(SALARY) FROM TEACHER T,DEPT WHERE DEPT.DNAME='\u8ba1\u7b97\u673a' AND DEPT.DNO=T.DNO;\n</code></pre> <p>\u7403\u6570\u636e\u5e93\u8bfe\u7a0b\u7684\u5e73\u5747\u6210\u7ee9</p> Text Only<pre><code>SELECT AVG(SCORE)\nFROM COURSE C,SC\nWHERE C.CNAME='\u6570\u636e\u5e93' AND C.CNO=SC.CNO;\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_5","title":"\u5206\u7ec4\u67e5\u8be2 \u5206\u7ec4\u8fc7\u6ee4","text":"<p>\u5206\u7ec4\u8fc7\u6ee4</p> <p></p> <p>\u5206\u7ec4\u8fc7\u6ee4\u793a\u4f8b</p> <p></p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql_1","title":"SQL\u8bed\u8a00\u5b9e\u73b0\u5173\u7cfb\u4ee3\u6570\u64cd\u4f5c","text":"<p>SQL\u5e76\u8fd0\u7b97</p> <p></p> <p></p> <p>SQL\u4ea4\u8fd0\u7b97</p> <p></p> <p>SQL\u5dee\u8fd0\u7b97</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_6","title":"\u7a7a\u503c\u7684\u5904\u7406","text":"<p>\u76f8\u5173\u8bed\u6cd5\u548c\u793a\u4f8b</p> <p></p> <p>\u73b0\u884c\u7684DBMS\u7684\u7a7a\u503c\u5904\u7406\u5c0f\u7ed3</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_7","title":"\u5185\u8fde\u63a5\uff0c\u5916\u8fde\u63a5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql_2","title":"SQL\u8bed\u8a00\u4e4b\u89c6\u56fe\u53ca\u5176\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql_3","title":"SQL\u6570\u636e\u5e93\u7ed3\u6784","text":"<p>\u89c6\u56fe\u5c31\u662f\u7b26\u5408\u8981\u6c42\u7684\u6570\u636e\u7684\u5bfc\u51fa\u516c\u5f0f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_8","title":"\u5b9a\u4e49\u89c6\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_9","title":"\u4f7f\u7528\u89c6\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#sql_4","title":"SQL\u89c6\u56fe\u66f4\u65b0\u7684\u76f8\u5173\u95ee\u9898","text":"<p>\u793a\u4f8b\uff1a</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_10","title":"\u53ef\u66f4\u65b0\u89c6\u56fe\u7684\u4e00\u4e9b\u4f8b\u5b50","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC1-%E9%83%A8%E5%88%862/#_11","title":"\u64a4\u9500\u89c6\u56fe","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/","title":"\u6570\u636e\u5e93\u7d22\u5f15","text":"<p>\u7d22\u5f15\u7684\u6982\u5ff5\uff1a</p> <p></p> <p>\u5b58\u50a8\u7d22\u5f15\u9879\u7684\u6587\u4ef6\u4e3a\u7d22\u5f15\u6587\u4ef6\uff0c\u76f8\u5e94\u7684\uff0c\u5b58\u50a8\u8868\u53c8\u79f0\u4e3a\u4e3b\u6587\u4ef6</p> <p>\u7d22\u5f15\u7684\u4e00\u822c\u6027\u7279\u70b9</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_2","title":"\u5173\u4e8e\u7d22\u5f15\u5e94\u7528\u7684\u8bc4\u4ef7\u95ee\u9898","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_3","title":"\u5173\u4e8e\u7d22\u5f15\u76f8\u5173\u7684\u6982\u5ff5\u542b\u4e49\u7684\u533a\u5206","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#sql","title":"SQL\u8bed\u8a00\u4e2d\u7684\u7d22\u5f15\u521b\u5efa\u4e0e\u7ef4\u62a4","text":"<p>\u7d22\u5f15\u5e94\u7528\u8981\u6ce8\u610f\u6548\u679c</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_4","title":"\u7a20\u5bc6\u7d22\u5f15\u548c\u7a00\u758f\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_5","title":"\u6982\u5ff5","text":"<p>\u7a00\u758f\u7d22\u5f15\u5982\u4f55\u5b9a\u4f4d</p> <p></p> <p>\u7a20\u5bc6\u7d22\u5f15\u5982\u4f55\u5b9a\u4f4d</p> <p></p> <p>\u975e\u5019\u9009\u952e\u5c5e\u6027\u7684\u7a20\u5bc6\u7d22\u5f15\uff081\uff09</p> <p>\u4e00\u79cd\u662f\u5b57\u6bb5\u503c\u6709\u91cd\u590d\u7684\uff0c\u4e00\u79cd\u662f\u5b57\u6bb5\u503c\u6ca1\u6709\u91cd\u590d\u7684</p> <p>\u4e00\u79cd\u662f\u5f15\u5165\u4e00\u4e2a\u6307\u9488\u6876\u5904\u7406\u975e\u5019\u9009\u952e\u7d22\u5f15\u7684\u591a\u8bb0\u5f55\u60c5\u51b5</p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_6","title":"\u4e3b\u7d22\u5f15\u4e0e\u8f85\u52a9\u7d22\u5f15","text":"<p>\u4e3b\u7d22\u5f15\u662f\u7a00\u758f\u7d22\u5f15</p> <p></p> <p>\u8f85\u52a9\u7d22\u5f15\u662f\u7a20\u5bc6\u7d22\u5f15</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_7","title":"\u5176\u4ed6\u7c7b\u578b\u7684\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_8","title":"\u805a\u7c07\u7d22\u5f15\u548c\u975e\u805a\u7c07\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_9","title":"\u5012\u6392\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_10","title":"\u5176\u4ed6\u7ed3\u6784\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#b","title":"B+\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#b_1","title":"B+\u6811\u7684\u5b58\u50a8\u7ea6\u5b9a","text":"<p>\u53f6\u5b50\u7ed3\u70b9\u548c\u975e\u53f6\u7ed3\u70b9\u6307\u5411\u4ec0\u4e48</p> <p></p> <p></p> <p></p> <p></p> <p>\u7528b+\u6811\u5efa\u7acb\u5efa\u5c5e\u6027\u7a20\u5bc6\u7d22\u5f15</p> <p></p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#b_2","title":"B\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#b_3","title":"B+\u6811\u4e4b\u952e\u503c\u63d2\u5165\u4e0e\u7ed3\u70b9\u5206\u88c2\u8fc7\u7a0b","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_11","title":"\u6563\u5217\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_12","title":"\u53ef\u6269\u5c55\u6563\u5217\u7d22\u5f15\u4e0e\u7ebf\u6027\u6563\u5217\u7d22\u5f15","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_13","title":"\u53ef\u6269\u5c55\u6563\u5217\u7d22\u5f15\u601d\u60f3","text":""},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/#_14","title":"\u7ebf\u6027\u6563\u5217\u7d22\u5f15","text":"<p>ENDING</p>"},{"location":"%E6%AF%8F%E5%91%A8%E5%B0%8F%E8%AE%A1/20240911/","title":"2024/9/11","text":"<p>\u4e0a\u5468\u5b66\u4e60\u4e86\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\uff0c\u8fdb\u7a0b\u8c03\u5ea6\uff0c\u7ebf\u7a0b\u8c03\u5ea6\uff0c\u8fdb\u7a0b\u5207\u6362\u3002</p> <p>\u4ee5\u53ca\u7ebf\u7a0b\u6a21\u578b\uff0c\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u591a\uff0c\u4e00\u5bf9\u4e00\u7b49\u7b49\u6a21\u578b</p> <p>\u8fdb\u7a0b\u521b\u5efa\u51fd\u6570fork\uff0c\u7ebf\u7a0b\u662fpthread_create\u51fd\u6570\u3002\u5b66\u4e60\u4e86\u76f8\u5173\u7684\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u6982\u5ff5\u548c\u7279\u6027\u3002</p> <p>\u5b66\u4e60\u4e86\u6570\u636e\u5e93\uff0c\u5b66\u4e60\u4e86\u51fd\u6570\u4f9d\u8d56\uff0carmstrong\u516c\u7406\uff0cE-R\u56fe\uff0ccrow's foot\uff0c\u7b49\u7b49\u76f8\u5173\u5b9a\u4e49\u548c\u7406\u89e3\u3002</p> <p>\u6682\u65f6\u5c1a\u672a\u505a\u6709\u5173\u6570\u636e\u5e93\u7684E-R\u56fe\u7684\u9898\u76ee\uff0c\u540e\u7eed\u4f1a\u627e\u51e0\u4e2a\u4f8b\u9898\u8fdb\u884c\u603b\u7ed3\u548c\u6c42\u89e3\u5236\u4f5c\u3002</p> <p>SQL\u8bed\u53e5\uff0c\u5d4c\u5165\u5f0fSQL\uff0c\u4ee5\u53ca\u5bf9\u4e8e\u9ad8\u7ea7\u8bed\u8a00\u7684SQL\u7684\u5e94\u7528\u7b49\u7b49\uff0c\u4ece\u51fd\u6570\u4f9d\u8d56\uff0c\u8303\u5f0f\u5b9a\u7406\u7b49\u7b49\u5f00\u59cb\u6211\u662f\u8fdb\u884c\u7eb8\u8d28\u7684\u5b66\u4e60\u548c\u7b14\u8bb0\u8bb0\u5f55\uff0c\u540e\u7eed\u4f1a\u5c06\u76f8\u5173\u7684\u5185\u5bb9\u603b\u7ed3\u5230\u7535\u5b50\u7248\u4e0a\uff0c\u5e76\u8fdb\u884c\u76f8\u5173\u7684\u5185\u5bb9\u66f4\u65b0\u3002</p> <p>\u5bf9\u4e8e\u6570\u5b66\u65b9\u9762\uff0c\u5b66\u4e60\u4e86\u591a\u5143\u5fae\u5206\u65b9\u7a0b\u548c\u4e0d\u5b9a\u79ef\u5206\u7684\u5148\u5173\u89e3\u6cd5\uff0c\u4ee5\u53ca\u5fae\u5206\u65b9\u7a0b\u7684\u6c42\u89e3\u7b49\u7b49\uff0c\u5e76\u505a\u4e86\u674e\u6797880\u7684\u6781\u9650\u90e8\u5206\u4e60\u9898\uff0c\u548c\u591a\u5143\uff0c\u5fae\u5206\u65b9\u7a0b\u7b49\u7ae0\u8282\u7684\u9898\u76ee\u3002</p> <p>\u5bf9\u4e8e\u7b97\u6cd5\u65b9\u9762\uff0c\u6253\u7b97\u5f00\u542f\u7b97\u6cd5\u7ade\u8d5b\u8fd9\u672c\u4e66\u7684\u5b66\u4e60\uff0c\u5e76\u4f18\u5148\u5c06\u4ee3\u7801\u968f\u60f3\u5f55\u4e2d\u7684\u6700\u540e\u4e24\u7ae0\uff0c\u56fe\u8bba\u548c\u756a\u5916\u7bc7\u8fdb\u884c\u5b66\u4e60\u603b\u7ed3\uff0c\u8ba1\u5212\u572812\u6708\u4e4b\u524d\uff0c\u7cbe\u901a\u7b97\u6cd5\u7ade\u8d5b\u4e0a\u518c\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5e76\u79ef\u7d2f\u76f8\u5e94\u7684\u4ee3\u7801\u91cf\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u5b66\u4e60\u7b14\u8bb0\u548c\u603b\u7ed3\u3002</p> <p>\u5bf9\u4e8e\u6570\u636e\u5e93\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e0b\u4e2a\u6708\u5c06\u5f00\u542f\u65b0\u7684\u6570\u636e\u5e93\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bfe\u7a0b\u5e76\u8fdb\u884c\u76f8\u5173\u5b66\u4e60\u3002</p> <p>\u91cd\u70b9\u5173\u6ce8\uff1a\u6982\u7387\u8bba\uff0c\u8fd1\u671f\u6253\u7b97\u5f00\u542f\u590d\u4e60\u548c\u7b14\u8bb0\u603b\u7ed3\u5b66\u4e60\uff0c\u5e76\u5904\u7406\u76f8\u5173\u7684\u9898\u76ee\uff0c\u8fdb\u884c\u77e5\u8bc6\u70b9\u7684\u7535\u5b50\u5316\u3002</p>"},{"location":"%E6%AF%8F%E5%91%A8%E5%B0%8F%E8%AE%A1/20240911/#_1","title":"\u4e0a\u5468\u5c0f\u7ed3\u5b8c\u6bd5\u3002","text":""},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/","title":"dijkstra\u7b97\u6cd5","text":"<p>\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u603b\u7ed3</p> <p>\u4f8b\u9898\uff1a\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1047</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u5c0f\u660e\u662f\u4e00\u4f4d\u79d1\u5b66\u5bb6\uff0c\u4ed6\u9700\u8981\u53c2\u52a0\u4e00\u573a\u91cd\u8981\u7684\u56fd\u9645\u79d1\u5b66\u5927\u4f1a\uff0c\u4ee5\u5c55\u793a\u81ea\u5df1\u7684\u6700\u65b0\u7814\u7a76\u6210\u679c\u3002</p> <p>\u5c0f\u660e\u7684\u8d77\u70b9\u662f\u7b2c\u4e00\u4e2a\u8f66\u7ad9\uff0c\u7ec8\u70b9\u662f\u6700\u540e\u4e00\u4e2a\u8f66\u7ad9\u3002\u7136\u800c\uff0c\u9014\u4e2d\u7684\u5404\u4e2a\u8f66\u7ad9\u4e4b\u95f4\u7684\u9053\u8def\u72b6\u51b5\u3001\u4ea4\u901a\u62e5\u5835\u7a0b\u5ea6\u4ee5\u53ca\u53ef\u80fd\u7684\u81ea\u7136\u56e0\u7d20\uff08\u5982\u5929\u6c14\u53d8\u5316\uff09\u7b49\u4e0d\u540c\uff0c\u8fd9\u4e9b\u56e0\u7d20\u90fd\u4f1a\u5f71\u54cd\u6bcf\u6761\u8def\u5f84\u7684\u901a\u884c\u65f6\u95f4\u3002</p> <p>\u5c0f\u660e\u5e0c\u671b\u80fd\u9009\u62e9\u4e00\u6761\u82b1\u8d39\u65f6\u95f4\u6700\u5c11\u7684\u8def\u7ebf\uff0c\u4ee5\u786e\u4fdd\u4ed6\u80fd\u591f\u5c3d\u5feb\u5230\u8fbe\u76ee\u7684\u5730\u3002</p> <p>\u3010\u8f93\u5165\u63cf\u8ff0\u3011</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570 N \u8868\u793a\u4e00\u5171\u6709 N \u4e2a\u516c\u5171\u6c7d\u8f66\u7ad9\uff0c\u7b2c\u4e8c\u4e2a\u6b63\u6574\u6570 M \u8868\u793a\u6709 M \u6761\u516c\u8def\u3002</p> <p>\u63a5\u4e0b\u6765\u4e3a M \u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e09\u4e2a\u6574\u6570\uff0cS\u3001E \u548c V\uff0c\u4ee3\u8868\u4e86\u4ece S \u8f66\u7ad9\u53ef\u4ee5\u5355\u5411\u76f4\u8fbe E \u8f66\u7ad9\uff0c\u5e76\u4e14\u9700\u8981\u82b1\u8d39 V \u5355\u4f4d\u7684\u65f6\u95f4\u3002</p> <p>\u3010\u8f93\u51fa\u63cf\u8ff0\u3011</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5c0f\u660e\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u6240\u82b1\u8d39\u7684\u6700\u5c0f\u65f6\u95f4\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/#_1","title":"\u6734\u7d20\u7248","text":""},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/#_2","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u601d\u8def\u5f88\u7b80\u5355\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8eprim\u7b97\u6cd5\u7684\u601d\u8def\uff0c\u6211\u4eec\u8003\u8651\u70b9\uff0c\u6211\u4eec\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\uff0c\u540c\u65f6\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2amindist\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u5b58\u653e\u6bcf\u4e2a\u8282\u70b9\u5230\u8d77\u59cb\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4eec\u5c06\u5176\u521d\u59cb\u5316\u4e3aINT_MAX,\u8fd9\u4e2a\u5e38\u91cf\u7684\u5b9a\u4e49\u5b58\u653e\u5728climits\u5e93\u4e2d\uff0c\u6ce8\u610f\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u5f15\u7528\u76f8\u5173\u7684\u5e93\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2avisited\u6570\u7ec4\uff0c\u7528\u6765\u6807\u8bb0\u5f53\u524d\u6570\u7ec4\u5143\u7d20\u662f\u5426\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5c31\u8bb0\u4e3afalse\u3002</p> <p>\u66f4\u65b0mindist\u6570\u7ec4\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u6700\u77ed\u8fb9\u7684\u70b9\u65f6\uff0c\u6211\u4eec\u5c31\u66f4\u65b0\u6240\u6709\u7ed3\u70b9\u7684mindist\u6570\u7ec4\u3002</p> <p>\u6700\u540e\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u7ec8\u70b9\u7684mindist\u6570\u7ec4\u7684\u5143\u7d20\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;climits&gt;\nusing namespace std;\nint main() {\n    int n, m, p1, p2, val;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;vector&lt;int&gt;&gt; grid(n + 1, vector&lt;int&gt;(n + 1, INT_MAX));\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val;\n        grid[p1][p2] = val;\n    }\n\n    int start = 1;\n    int end = n;\n\n    // \u5b58\u50a8\u4ece\u6e90\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    std::vector&lt;int&gt; minDist(n + 1, INT_MAX);\n\n    // \u8bb0\u5f55\u9876\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n    std::vector&lt;bool&gt; visited(n + 1, false);\n\n    minDist[start] = 0;  // \u8d77\u59cb\u70b9\u5230\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a0\n\n    for (int i = 1; i &lt;= n; i++) { // \u904d\u5386\u6240\u6709\u8282\u70b9\n\n        int minVal = INT_MAX;\n        int cur = 1;\n\n        // 1\u3001\u9009\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u4e14\u672a\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\n        for (int v = 1; v &lt;= n; ++v) {\n            if (!visited[v] &amp;&amp; minDist[v] &lt; minVal) {\n                minVal = minDist[v];\n                cur = v;\n            }\n        }\n\n        visited[cur] = true;  // 2\u3001\u6807\u8bb0\u8be5\u8282\u70b9\u5df2\u88ab\u8bbf\u95ee\n\n        // 3\u3001\u7b2c\u4e09\u6b65\uff0c\u66f4\u65b0\u975e\u8bbf\u95ee\u8282\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\uff08\u5373\u66f4\u65b0minDist\u6570\u7ec4\uff09\n        for (int v = 1; v &lt;= n; v++) {\n            if (!visited[v] &amp;&amp; grid[cur][v] != INT_MAX &amp;&amp; minDist[cur] + grid[cur][v] &lt; minDist[v]) {\n                minDist[v] = minDist[cur] + grid[cur][v];\n            }\n        }\n\n    }\n\n    if (minDist[end] == INT_MAX) cout &lt;&lt; -1 &lt;&lt; endl; // \u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\n    else cout &lt;&lt; minDist[end] &lt;&lt; endl; // \u5230\u8fbe\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/#_3","title":"\u5806\u4f18\u5316\u7248","text":""},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/#_4","title":"\u601d\u8def","text":"<p>\u6211\u4eec\u4f7f\u7528\u5c0f\u6839\u5806\u6765\u5bf9\u7b2c\u4e00\u4e2a\u5faa\u73af\u7684\u9009\u62e9\u6700\u8fd1\u8282\u70b9\u7684\u6548\u7387\u8fdb\u884c\u4f18\u5316\uff0c\u56e0\u4e3a\u6734\u7d20\u7248\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n2),\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u5c0f\u6839\u5806\u5bf9\u5185\u5c42\u7684\u4e00\u4e2a\u5faa\u73af\u8fdb\u884c\u4f18\u5316\uff0c\u7136\u540e\u6211\u4eec\u5904\u7406\u7684\u662f\u8fb9\uff0c\u56e0\u6b64\u80fd\u591f\u51cf\u5c11\u6734\u7d20\u7248\u672c\u5bf9\u4e8e\u70b9\u7684\u5904\u7406\u7684\u6b21\u6570\u7684\u6d6a\u8d39\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)</p> <p>\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5806\uff08\u4f18\u5148\u7ea7\u961f\u5217\uff09\u548c\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;queue&gt;\n#include &lt;climits&gt;\nusing namespace std; \n// \u5c0f\u9876\u5806\nclass mycomparison {\npublic:\n    bool operator()(const pair&lt;int, int&gt;&amp; lhs, const pair&lt;int, int&gt;&amp; rhs) {\n        return lhs.second &gt; rhs.second;\n    }\n};\n// \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u8868\u793a\u5e26\u6743\u91cd\u7684\u8fb9\nstruct Edge {\n    int to;  // \u90bb\u63a5\u9876\u70b9\n    int val; // \u8fb9\u7684\u6743\u91cd\n\n    Edge(int t, int w): to(t), val(w) {}  // \u6784\u9020\u51fd\u6570\n};\n\nint main() {\n    int n, m, p1, p2, val;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;list&lt;Edge&gt;&gt; grid(n + 1);\n\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val; \n        // p1 \u6307\u5411 p2\uff0c\u6743\u503c\u4e3a val\n        grid[p1].push_back(Edge(p2, val));\n\n    }\n\n    int start = 1;  // \u8d77\u70b9\n    int end = n;    // \u7ec8\u70b9\n\n    // \u5b58\u50a8\u4ece\u6e90\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    std::vector&lt;int&gt; minDist(n + 1, INT_MAX);\n\n    // \u8bb0\u5f55\u9876\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\n    std::vector&lt;bool&gt; visited(n + 1, false); \n\n    // \u4f18\u5148\u961f\u5217\u4e2d\u5b58\u653e pair&lt;\u8282\u70b9\uff0c\u6e90\u70b9\u5230\u8be5\u8282\u70b9\u7684\u6743\u503c&gt;\n    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, mycomparison&gt; pq;\n\n\n    // \u521d\u59cb\u5316\u961f\u5217\uff0c\u6e90\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u4e3a0\uff0c\u6240\u4ee5\u521d\u59cb\u4e3a0\n    pq.push(pair&lt;int, int&gt;(start, 0)); \n\n    minDist[start] = 0;  // \u8d77\u59cb\u70b9\u5230\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a0\n\n    while (!pq.empty()) {\n        // 1. \u7b2c\u4e00\u6b65\uff0c\u9009\u6e90\u70b9\u5230\u54ea\u4e2a\u8282\u70b9\u8fd1\u4e14\u8be5\u8282\u70b9\u672a\u88ab\u8bbf\u95ee\u8fc7 \uff08\u901a\u8fc7\u4f18\u5148\u7ea7\u961f\u5217\u6765\u5b9e\u73b0\uff09\n        // &lt;\u8282\u70b9\uff0c \u6e90\u70b9\u5230\u8be5\u8282\u70b9\u7684\u8ddd\u79bb&gt;\n        pair&lt;int, int&gt; cur = pq.top(); pq.pop();\n\n        if (visited[cur.first]) continue;\n\n        // 2. \u7b2c\u4e8c\u6b65\uff0c\u8be5\u6700\u8fd1\u8282\u70b9\u88ab\u6807\u8bb0\u8bbf\u95ee\u8fc7\n        visited[cur.first] = true;\n\n        // 3. \u7b2c\u4e09\u6b65\uff0c\u66f4\u65b0\u975e\u8bbf\u95ee\u8282\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\uff08\u5373\u66f4\u65b0minDist\u6570\u7ec4\uff09\n        for (Edge edge : grid[cur.first]) { // \u904d\u5386 cur\u6307\u5411\u7684\u8282\u70b9\uff0ccur\u6307\u5411\u7684\u8282\u70b9\u4e3a edge\n            // cur\u6307\u5411\u7684\u8282\u70b9edge.to\uff0c\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a edge.val\n            if (!visited[edge.to] &amp;&amp; minDist[cur.first] + edge.val &lt; minDist[edge.to]) { // \u66f4\u65b0minDist\n                minDist[edge.to] = minDist[cur.first] + edge.val;\n                pq.push(pair&lt;int, int&gt;(edge.to, minDist[edge.to]));\n            }\n        }\n\n    }\n\n    if (minDist[end] == INT_MAX) cout &lt;&lt; -1 &lt;&lt; endl; // \u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\n    else cout &lt;&lt; minDist[end] &lt;&lt; endl; // \u5230\u8fbe\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/dijkstra%E7%AE%97%E6%B3%95/#ending","title":"ending!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/","title":"\u4e70\u5356\u80a1\u7968","text":"<p>\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u5237\u9898\u7684\u76f8\u5173\u601d\u8def\u603b\u548c\u548c\u56de\u987e\uff0c\u4ec5\u7528\u4e8e\u4e2a\u4eba\u5b66\u4e60\u7528\u9014\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#1","title":"\u6700\u4f73\u65f6\u673a1","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/best-time-to-buy-and-sell-stock/</p> <p>\u601d\u8def\uff1a\u7ed9\u5b9a\u4e86\u4e00\u4e2a\u6570\u7ec4prices\uff0c\u7b2ci\u4e2a\u5143\u7d20\u8868\u793a\u4e00\u53ea\u7ed9\u5b9a\u7684\u80a1\u7968\u7b2cI\u5929\u7684\u4ef7\u683c\u3002</p> <p>\u8981\u6c42\uff1a\u6700\u5927\u5229\u6da6\u3002</p> <p>\u53ea\u80fd\u4e70\u5356\u4e00\u6b21\u3002</p> <p>\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u542b\u4e49\uff1adp[i][0]\u8868\u793a\u7b2cI\u5929\u7684\u65f6\u5019\uff0c\u5c31\u6301\u6709\u80a1\u7968\u65f6\u7684\u5f53\u524d\u7684\u6240\u5f97\u6700\u591a\u73b0\u91d1\u3002dp[i][1]\u8868\u793a\u7b2ci\u5929\u7684\u65f6\u5019\uff0c\u4e0d\u6301\u6709\u80a1\u7968\u7684\u6240\u5f97\u6700\u591a\u73b0\u91d1\u3002</p> <p>2\u3001dp\u6570\u7ec4\u7684\u63a8\u5bfc\u516c\u5f0f\uff0c\u6bcf\u4e00\u5929\u90fd\u6709\u4e24\u79cd\u72b6\u6001\uff0c\u6301\u6709\u80a1\u7968\u548c\u4e0d\u6301\u6709\u80a1\u7968\uff0c</p> <p>\u6301\u6709\u80a1\u7968\u7684\u65f6\u5019\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u4eca\u5929\u4e4b\u524d\u5c31\u4e70\u8fc7\u80a1\u7968\u4e86\uff0c\u4eca\u5929\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4f7f\u7528\u524d\u4e00\u5929\u7684\u73b0\u91d1\u91d1\u989d\u5373\u53ef\uff0c\u53e6\u4e00\u79cd\u662f\u524d\u4e00\u5929\u6ca1\u4e70\uff0c\u4eca\u5929\u624d\u521a\u4e70\uff0c\u53ea\u9700\u8981\u8ba1\u7b97dp[i-1][1]-prices[i]\u5373\u53ef</p> <p>\u6240\u4ee5\uff0cdp[i][0]=max(dp[i-1][0],-prices[i]);</p> <p>\u4e0d\u6301\u6709\u80a1\u7968\u4e5f\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u4eca\u5929\u4e4b\u524d\u5df2\u7ecf\u5356\u8fc7\u4e86\uff0c\u4e00\u79cd\u662f\u4eca\u5929\u521a\u5356\u3002</p> <p>dp[i][1]=max(dp[i-1][1],dp[i-1][0]+prices[i]);</p> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c\u5f88\u660e\u663e\uff0c\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4f9d\u8d56\u4e8e\u524d\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u521d\u59cb\u5316dp[0][0]\u548cdp[0][1]\u5373\u53ef\u3002dp[0][0]\u8868\u793a\u7b2c\u96f6\u5929\u6301\u6709\u80a1\u7968\uff0cdp[0][0]-=prices[0],dp[0][1]=0\uff0c\u7b2c0\u5929\u4e0d\u6301\u6709\u80a1\u7968\u4ee3\u8868\u7740\u5f53\u5929\u7684\u80a1\u7968\u5df2\u7ecf\u5f53\u5929\u4e70\u5f53\u5929\u5356\u4e86\uff0c\u56e0\u6b64\u4e3a0.</p> <p>4\u3001dp\u6570\u7ec4\u7684\u63a8\u5bfc\u987a\u5e8f\uff0c\u6211\u4eec\u6839\u636e\u63a8\u5bfc\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\u6765\u662f\u6839\u636e\u524d\u540e\u63a8\u5bfc\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2afor\u5faa\u73af\u5373\u53ef\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u63a8\u5bfc\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int len = prices.size();\n        if (len == 0) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(len, vector&lt;int&gt;(2));\n        dp[0][0] -= prices[0];\n        dp[0][1] = 0;\n        for (int i = 1; i &lt; len; i++) {\n            dp[i][0] = max(dp[i - 1][0], -prices[i]);\n            dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0]);\n        }\n        return dp[len - 1][1];\n    }\n</code></pre> <p>\u7b2c\u4e00\u79cd\u9898\u76eeending</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#2","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a2","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/</p> <p>\u9898\u76ee\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8ba1\u7b97\u6700\u5927\u5229\u6da6\uff0c\u540c\u65f6\u5c3d\u53ef\u80fd\u5b8c\u6210\u66f4\u591a\u4ea4\u6613\uff0c\u6bcf\u6b21\u8d2d\u4e70\u80a1\u7968\u4e4b\u524d\u90fd\u5f97\u4fdd\u8bc1\u4e4b\u524d\u7684\u80a1\u7968\u5df2\u7ecf\u5356\u4e86\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u5176\u5b9e\u548c\u4e0a\u4e00\u4e2a\u9898\u76ee\u7684\u601d\u8def\u7c7b\u4f3c\uff0c\u4f46\u662f\uff0c\u552f\u4e00\u533a\u522b\u7684\u5730\u65b9\u5c31\u662f\u6bcf\u4e2a\u80a1\u7968\u6301\u6709\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u6709\u524d\u4e00\u5929\u7684\u6240\u5269\u4f59\u7684\u73b0\u91d1\uff0c\u56e0\u6b64\u53ea\u6709\u8fd9\u4e2a\u5730\u65b9\u6709\u4e0d\u4e00\u6837\u7684\u4e1c\u897f\u3002</p> <p>\u4e5f\u5c31\u662fdp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i]);</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int len = prices.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(len, vector&lt;int&gt;(2, 0));\n        dp[0][0] -= prices[0];\n        dp[0][1] = 0;\n        for (int i = 1; i &lt; len; i++) {\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]); // \u6ce8\u610f\u8fd9\u91cc\u662f\u548c121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u552f\u4e00\u4e0d\u540c\u7684\u5730\u65b9\u3002\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);\n        }\n        return dp[len - 1][1];\n    }\n</code></pre> <p>\u51cf\u5c11\u7a7a\u95f4\u4f7f\u7528\u7387\u7684\u89e3\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u6bcf\u6b21\u8ba1\u7b97\u7684\u65f6\u5019\u53ea\u6d89\u53ca\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\uff0c\u4e14\u6700\u540e\u6c42\u89e3\u7684\u65f6\u5019\u662f\u9009\u62e9\u6700\u540e\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u5927\u5c0f\u4e3a2*2\u7684\u52a8\u6001\u6570\u7ec4\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int len = prices.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(2, vector&lt;int&gt;(2));\n        dp[0][0] -= prices[0];\n        dp[0][1] = 0;\n        for (int i = 1; i &lt; len; i++) {\n            dp[i % 2][0] = max(dp[(i - 1) % 2][0], dp[(i - 1) % 2][1] - prices[i]);\n            dp[i % 2][1] = max(dp[(i - 1) % 2][1], prices[i] + dp[(i - 1) % 2][0]);\n        }\n        return dp[(len - 1) % 2][1];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#3","title":"\u4e70\u5356\u80a1\u79683","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8be5\u9898\u9650\u5236\u4f60\u7684\u4ea4\u6613\u6b21\u6570\uff0c\u9650\u5236\u4e3a2\u4e24\u6b21\uff0c\u800c\u4e14\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u4e2a\u4ea4\u6613\uff0c\u56e0\u6b64\u6bcf\u6b21\u4ea4\u6613\u4e4b\u524d\u5fc5\u987b\u5148\u5356\u6389\u4e4b\u524d\u6301\u6709\u7684\u80a1\u7968\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u5173\u952e\u5176\u5b9e\u5728\u4e8e\u81f3\u591a\u4e70\u5356\u4e24\u6b21\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e70\u5356\u4e00\u6b21\u4e5f\u53ef\u4ee5\u4e70\u5356\u4e24\u6b21\u3002</p> <p>\u6b64\u65f6\u9700\u8981\u8003\u8651\u7684\u72b6\u6001\u5c31\u6709\u5f88\u591a\u3002</p> <p>0\u3001\u4ec0\u4e48\u4e5f\u4e0d\u5e72</p> <p>1\u3001\u7b2c\u4e00\u6b21\u6301\u6709\u80a1\u7968</p> <p>2\u3001\u7b2c\u4e00\u6b21\u4e0d\u6301\u6709\u80a1\u7968</p> <p>3\u3001\u7b2c\u4e8c\u6b21\u6301\u6709\u80a1\u7968</p> <p>4\u3001\u7b2c\u4e8c\u6b21\u4e0d\u6301\u6709\u80a1\u7968</p> <p>dp[i][1]=max(dp[i-1][0] - prices[i], dp[i - 1][1]);</p> <p>dp[i][2]=max(dp[i-1][2],dp[i][1]+prices[i]);</p> <p>dp[i][3]=max(dp[i-1][2]-prices[i],dp[i-1][3]);</p> <p>dp[i][4]=max(dp[i-1][3]+prices[i],dp[i-1][4]);</p> <p>\u6570\u7ec4\u521d\u59cb\u5316\uff1adp[0][0]=0,dp[0][1]=-prices[0],dp[0][3]=-prices[0];</p> <p>\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff0c\u5f88\u660e\u663e\u4ece\u524d\u5f80\u540e\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n        if (prices.size() == 0) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(prices.size(), vector&lt;int&gt;(5, 0));\n        dp[0][1] = -prices[0];\n        dp[0][3] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            dp[i][0] = dp[i - 1][0];\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);\n            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]);\n            dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);\n            dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);\n        }\n        return dp[prices.size() - 1][4];\n    }\n</code></pre> <p>\u7a7a\u95f4\u4f18\u5316\u7248\u672c\uff1a</p> C++<pre><code> int maxProfit(vector&lt;int&gt;&amp; prices) {\n        if (prices.size() == 0) return 0;\n        vector&lt;int&gt; dp(5, 0);\n        dp[1] = -prices[0];\n        dp[3] = -prices[0];\n        for (int i = 1; i &lt; prices.size(); i++) {\n            dp[1] = max(dp[1], dp[0] - prices[i]);\n            dp[2] = max(dp[2], dp[1] + prices[i]);\n            dp[3] = max(dp[3], dp[2] - prices[i]);\n            dp[4] = max(dp[4], dp[3] + prices[i]);\n        }\n        return dp[4];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#4","title":"\u4e70\u5356\u80a1\u79684","text":"<p>\u9898\u76ee\u6765\u6e90:https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8bbe\u7f6e\u6700\u591a\u53ea\u80fd\u5b8c\u6210k\u7b14\u4ea4\u6613</p> <p>\u4e0d\u80fd\u540c\u65f6\u53c2\u52a0\u591a\u7b14\u4ea4\u6613\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u548c\u4e0a\u4e00\u9898\u7684\u601d\u8def\u7c7b\u4f3c</p> <p>dp[i][j]\u8868\u793a\u7b2ci\u5929\uff0cj\u8868\u793a\u67d0\u6b21\u5356\u51fa\u4e70\u5165\u64cd\u4f5c\u3002</p> <p>j\u7684\u72b6\u6001\u8868\u793a\u4e3a\uff1a</p> <ul> <li>0 \u8868\u793a\u4e0d\u64cd\u4f5c</li> <li>1 \u7b2c\u4e00\u6b21\u4e70\u5165</li> <li>2 \u7b2c\u4e00\u6b21\u5356\u51fa</li> <li>3 \u7b2c\u4e8c\u6b21\u4e70\u5165</li> <li>4 \u7b2c\u4e8c\u6b21\u5356\u51fa</li> </ul> <p>...</p> <p>\u7136\u540e\u76f4\u63a5\u5728\u539f\u6765\u4e00\u5c42\u5faa\u73af\u4e2d\uff0c\u52a0\u4e0a\u4e00\u5c42\u5bf9\u4e8ej\u7684\u5faa\u73af\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(int k, vector&lt;int&gt;&amp; prices) {\n\n        if (prices.size() == 0) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(prices.size(), vector&lt;int&gt;(2 * k + 1, 0));\n        for (int j = 1; j &lt; 2 * k; j += 2) {\n            dp[0][j] = -prices[0];\n        }\n        for (int i = 1;i &lt; prices.size(); i++) {\n            for (int j = 0; j &lt; 2 * k - 1; j += 2) {\n                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);\n                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);\n            }\n        }\n        return dp[prices.size() - 1][2 * k];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#_2","title":"\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p> <ul> <li>\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</li> <li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li> </ul> <p>\u601d\u8def\uff1a</p> <p>\u8be5\u9898\u9700\u8981\u8bbe\u7f6e\u7684dp\u6570\u7ec4\u9700\u8981\u8003\u8651\u56db\u79cd\u72b6\u6001\u3002</p> <p>1\u3001\u6301\u6709\u80a1\u7968\u72b6\u6001</p> <p>2\u3001\u4e0d\u6301\u6709\u80a1\u7968\u72b6\u6001\u2014\u2014\u4eca\u5929\u5356\u51fa\u80a1\u7968</p> <p>3\u3001\u4e0d\u6301\u6709\u80a1\u7968\u72b6\u6001\u2014\u2014\u4fdd\u6301\u5356\u51fa\u80a1\u7968\u7684\u72b6\u6001\uff08\u4e00\u79cd\u662f\u4e24\u5929\u4e4b\u524d\u5c31\u5356\u51fa\u4e86\uff0c\u8d85\u8fc7\u4e86\u4e00\u5929\u51b7\u51bb\u671f\uff0c\u4e00\u79cd\u662f\u524d\u4e00\u5929\u624d\u5356\uff0c\u4e00\u76f4\u6ca1\u64cd\u4f5c\uff09</p> <p>4\u3001\u5f53\u5929\u4e3a\u51b7\u51bb\u671f\uff0c\u6301\u7eed\u4e00\u5929\uff0c\u5f53\u5929\u6ca1\u6709\u64cd\u4f5c</p> <p>\u9012\u63a8\u516c\u5f0f\uff1a</p> <p>\u72b6\u60011\uff1a</p> <p>dp[i][0]=max(dp[i-1][0],dp[i-1][3]-prices[i],dp[i-1][2]-prices[i]);</p> <p>\u72b6\u60012\uff1a</p> <p>dp[i][1]=dp[i-1][0]+prices[i]</p> <p>\u72b6\u60013\uff1a</p> <p>dp[i][2]=max(dp[i-1][2],dp[i-1][3]);</p> <p>\u72b6\u60014\uff1a</p> <p>dp[i][3]=dp[i-1][1]</p> <p>\u9012\u63a8\u987a\u5e8f\uff1a\u5f88\u660e\u663e\u4ece\u524d\u5f80\u540e\u3002</p> <p>\u521d\u59cb\u5316\uff1a</p> <p>dp[0][0]=-prices[0];</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int n = prices.size();\n        if (n == 0) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(4, 0));\n        dp[0][0] -= prices[0]; // \u6301\u80a1\u7968\n        for (int i = 1; i &lt; n; i++) {\n            dp[i][0]=max(dp[i-1][0],dp[i-1][3]-prices[i],dp[i-1][2]-prices[i]);\n            dp[i][1]=dp[i-1][0]+prices[i];\n            dp[i][2]=max(dp[i-1][2],dp[i-1][3]);\n            dp[i][3]=dp[i-1][1];\n        }\n        return max(dp[n - 1][3], max(dp[n - 1][1], dp[n - 1][2]));\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#_3","title":"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002</p> <p>\u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002</p> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u4e00\u7b14\u4ea4\u6613\u6307\u4e70\u5165\u6301\u6709\u5e76\u5356\u51fa\u80a1\u7968\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u7b14\u4ea4\u6613\u4f60\u53ea\u9700\u8981\u4e3a\u652f\u4ed8\u4e00\u6b21\u624b\u7eed\u8d39\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u9898\u76ee\u7684\u601d\u8def\u548c\u4e70\u5356\u80a1\u79682\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4e3b\u8981\u5dee\u522b\u5728\u4e8e\u9700\u8981\u8ba1\u7b97\u624b\u7eed\u8d39\u3002</p> <p>\u56e0\u6b64\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u8fdb\u884c\u76f8\u5173\u7684\u7406\u89e3\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {\n        int n = prices.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(2, 0));\n        dp[0][0] -= prices[0]; // \u6301\u80a1\u7968\n        for (int i = 1; i &lt; n; i++) {\n            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);\n            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i] - fee);\n        }\n        return max(dp[n - 1][0], dp[n - 1][1]);\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/#ending","title":"\u80a1\u7968\u4e70\u5356\u95ee\u9898ending!","text":"<p>\u200b                                                                                                                                                   \u65e5\u671f\uff1a2024\u5e748\u670828\u65e5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/","title":"\u4ee3\u7801\u968f\u60f3\u5f55\u7b97\u6cd5\u5237\u9898\u3010\u6253\u57fa\u7840\u3011\u2014\u2014\u7b2c\u4e00\u8f6e","text":"<p>\u672c\u603b\u7ed3\uff0c\u5f15\u7528\u4e86Carl\u54e5\u7684\u4e00\u4e9b\u7d20\u6750\u56fe\u7247\uff0c\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u603b\u7ed3\u548c\u76f8\u5173\u590d\u4e60</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_2","title":"\u4e00\u3001\u4e8c\u53c9\u6811","text":"<ul> <li>\u4e8c\u53c9\u6811\u7684\u904d\u5386</li> <li>\u4e8c\u53c9\u6811\u7684\u5c5e\u6027</li> <li>\u4e8c\u53c9\u6811\u7684\u4fee\u6539\u4e0e\u6784\u9020</li> <li>\u6c42\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5c5e\u6027</li> <li>\u4e8c\u53c9\u6811\u516c\u5171\u7956\u5148\u95ee\u9898</li> <li>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4fee\u6539\u4e0e\u6784\u9020</li> </ul> <p>\u4ee3\u7801\u968f\u60f3\u5f55\u4e2d\uff0c\u8bb2\u89e3\u4e86\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b\u53ea\u6709\u6ee1\u4e8c\u53c9\u6811\u548c\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p> <p>\u6ee1\u4e8c\u53c9\u6811</p> <p></p> <p>\u6df1\u5ea6\u4e3ak\uff0c\u603b\u7ed3\u70b9\u6570\u4e3a2^k-1\u4e2a</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u9664\u4e86\u6700\u5e95\u5c42\u7ed3\u70b9\u672a\u586b\u6ee1\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u90fd\u586b\u6ee1\u4e86\uff0c\u5e76\u4e14\u6700\u5e95\u5c42\u672a\u586b\u6ee1\u7684\u7ed3\u70b9\u90fd\u5c3d\u53ef\u80fd\u9760\u5de6\u3002</p> <p></p> <p>\u5bf9\u4e8e\u4e8c\u53c9\u6811\u7684\u8fd9\u4e9b\u5b9a\u4e49\u8981\u719f\u6089\u3002</p> <p>\u4f18\u5148\u7ea7\u961f\u5217\u5176\u5b9e\u662f\u4e00\u4e2a\u5806\uff0c\u5806\u5c31\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u540c\u65f6\u4fdd\u8bc1\u7236\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u5173\u7cfb\u3002</p> <p>\u4e8c\u53c9\u641c\u7d22\u6811</p> <p>\uff01\uff01\uff01\u6ce8\u610f\uff1a\u524d\u9762\u7684\u5e38\u89c4\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u90fd\u6ca1\u6709\u6570\u503c\u3002</p> <p>\u5361\u54e5\u7684\u5c0ftips\u8fd8\u662f\u5f88\u68d2\u7684\u3002</p> <p>\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u6709\u6570\u503c\u7684\uff0c\u5e76\u4e14\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e00\u4e2a\u6709\u5e8f\u6811\u3002</p> <ul> <li>\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u6240\u6709\u5de6\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u5168\u90fd\u5c0f\u4e8e\u4ed6\u7684\u6839\u7ed3\u70b9\u7684\u503c</li> <li>\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u6240\u6709\u53f3\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u5168\u90fd\u5927\u4e8e\u4ed6\u7684\u6839\u7ed3\u70b9\u7684\u503c</li> <li>\u4ed6\u7684\u5de6\u53f3\u5b50\u6811\u4e5f\u90fd\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811</li> </ul> <p>\u4f8b\u5b50\uff1a</p> <p></p> <p>\u5e73\u8861\u4e8c\u53c9\u6392\u5e8f(\u641c\u7d22)\u6811</p> <p>\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u53ef\u4ee5\u662f\u7a7a\u6811\u3002</p> <p>C++\u4e2dmap\u3001set\u3001multimap\uff0cmultiset\u7684\u5e95\u5c42\u5b9e\u73b0\u90fd\u662f\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6240\u4ee5map\u3001set\u7684\u589e\u5220\u64cd\u4f5c\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u662flogn\uff0c\u6ce8\u610f\u6211\u8fd9\u91cc\u6ca1\u6709\u8bf4unordered_map\u3001unordered_set\uff0cunordered_map\u3001unordered_set\u5e95\u5c42\u5b9e\u73b0\u662f\u54c8\u5e0c\u8868\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_3","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f","text":"<p>\u4e8c\u53c9\u6811\u53ef\u4ee5\u94fe\u5f0f\u5b58\u50a8\uff0c\u4e5f\u53ef\u4ee5\u987a\u5e8f\u5b58\u50a8\u3002</p> <p>\u94fe\u5f0f\u5b58\u50a8\u4e0d\u5fc5\u591a\u8bf4\uff0c\u76f4\u63a5\u5c31\u662f\u4e00\u4e2a\u7ed3\u70b9\u5de6\u53f3\u4e24\u4e2a\u6307\u9488\u3002</p> <p>\u987a\u5e8f\u5b58\u50a8\u662f\u4e00\u4e2a\u6570\u7ec4\uff1a\u5982\u679c\u7236\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u662fi\uff0c\u90a3\u4e48\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u4e0b\u6807\u4e3a2*i+1,2*i+2.</p> <p>\u4e00\u822c\u94fe\u5f0f\u4e8c\u53c9\u6811\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u6240\u4ee5\u4e00\u822c\u90fd\u7528\u94fe\u5f0f\u5b58\u50a8\u6cd5</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_4","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u6211\u7684\u7406\u89e3\u5c31\u662f\uff0c\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\uff0c\u5c42\u5e8f\u3002</p> <p>\u5b9e\u9645\u662f\u4e3b\u8981\u4f7f\u7528\u4e86\u56fe\u8bba\u4e2d\u7684DFS\u548cBFS\uff0c</p> <p>DFS\u4ea7\u751f\u4e86\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\u3002</p> <p>BFS\u4ea7\u751f\u4e86\u5c42\u5e8f\u3002</p> <p>\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\u90fd\u6709\u9012\u5f52\u548c\u8fed\u4ee3\u3002</p> <p>\u5c42\u5e8f\u53ea\u6709\u8fed\u4ee3\u3002</p> <p>\u8fd9\u4e9b\u904d\u5386\u90fd\u662f\u9700\u8981\u6808\u548c\u961f\u5217\u7ed3\u5408\u7684\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_5","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"C++<pre><code>typedef struct TreeNode{\n    int val;\n    TreeNode*left;\n    TreeNode*right;\n    TreeNode(int x):val(x),left(nullptr),right(nullptr);\n}Tree;\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_6","title":"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386","text":"<p>\u4e3b\u8981\u4ecb\u7ecd\u4e86\u524d\u4e2d\u540e\u5e8f\u904d\u5386\u3002</p> <p>\u9012\u5f52\u4e09\u8981\u7d20\uff1a</p> <ol> <li>\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c</li> <li>\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u7ec8\u6b62\u6761\u4ef6</li> <li>\u786e\u5b9a\u5355\u5c42\u5faa\u73af\u7684\u903b\u8f91</li> </ol> <p>\u4ee5\u524d\u5e8f\u904d\u5386\u4e3a\u4f8b\uff1a</p> <ol> <li>\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c</li> </ol> C++<pre><code>void traversal(TreeNode*cur,vector&lt;int&gt;&amp;vec);\n</code></pre> <ol> <li>\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u7ec8\u6b62\u6761\u4ef6</li> </ol> C++<pre><code>if(cur==nullptr) return;\n</code></pre> <ol> <li>\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u5355\u5c42\u5faa\u73af\u903b\u8f91</li> </ol> C++<pre><code>vec.push_back(cur-&gt;val);\ntraversal(cur-&gt;left,vec);\ntraversal(cur-&gt;right,vec);\n</code></pre> <p>\u524d\u5e8f\u904d\u5386\u5b8c\u6574\u9012\u5f52\u4ee3\u7801\uff1a</p> C++<pre><code>class sulution{\npublic:\n    void traversal(TreeNode*cur,vector&lt;int&gt;&amp;vec){\n     if(cur==nullptr) return;\n        vec.push_back(cur-&gt;val);\n        traversal(cur-&gt;left,vec);\n        traversal(cur-&gt;right,vec);\n    }\n    vector&lt;int&gt; preorderTraversal(TreeNode* root){\n        vector&lt;int&gt; result;\n        traversal(root,result);\n        return result;\n    }\n};\n</code></pre> <p>\u4e2d\u5e8f\u904d\u5386\u5b8c\u6574\u9012\u5f52\u4ee3\u7801\uff1a</p> C++<pre><code>void traversal(TreeNode*cur,vector&lt;int&gt;&amp;vec){\n     if(cur==nullptr) return;\n        traversal(cur-&gt;left,vec);\n     vec.push_back(cur-&gt;val);\n        traversal(cur-&gt;right,vec);\n    }\n</code></pre> <p>\u540e\u5e8f\u904d\u5386\u5b8c\u6574\u9012\u5f52\u4ee3\u7801\uff1a</p> C++<pre><code>void traversal(TreeNode*cur,vector&lt;int&gt;&amp;vec){\n     if(cur==nullptr) return;\n        traversal(cur-&gt;left,vec);\n        traversal(cur-&gt;right,vec);\n     vec.push_back(cur-&gt;val);\n    }\n</code></pre> <p>### \u4e8c\u53c9\u6811\u7684\u8fed\u4ee3\u904d\u5386</p> <p>\u7528\u8fed\u4ee3\u6cd5(\u975e\u9012\u5f52\u7684\u65b9\u5f0f)\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u524d\u540e\u4e2d\u5e8f\u904d\u5386</p> <p>#### \u524d\u5e8f\u904d\u5386(\u8fed\u4ee3\u6cd5)</p> C++<pre><code>class solution{\n public:\n     vector&lt;int&gt; preorderTraversal(TreeNode*root){\n         stack&lt;TreeNode*&gt; st;\n         vector&lt;int&gt; result;\n         if(root==NULL) return result;\n         st.push(root);\n         while(!st.empty()){\n             TreeNode*node=st.top();\n             result.push_back(node-&gt;val);\n             if(node-&gt;right) st.push(node-&gt;right);\n             if(node-&gt;left) st.push(node-&gt;left);\n         }\n         return result;\n     }\n};\n</code></pre> <p>\u6b64\u65f6\u5982\u679c\u60f3\u628a\u524d\u5e8f\u904d\u5386\u4ee3\u7801\u6539\u4e0b\u987a\u5e8f\u5c31\u5f97\u5230\u4e2d\u5e8f\u904d\u5386\u8fd8\u662f\u5f88\u96be\u641e\u7684\u3002</p> <p>\u518d\u7528\u8fed\u4ee3\u6cd5\u5199\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0\u5957\u8def\u53c8\u4e0d\u4e00\u6837\u4e86\uff0c\u76ee\u524d\u7684\u524d\u5e8f\u904d\u5386\u7684\u903b\u8f91\u65e0\u6cd5\u76f4\u63a5\u5e94\u7528\u5230\u4e2d\u5e8f\u904d\u5386\u4e0a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_7","title":"\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09","text":"<ol> <li>\u5904\u7406\uff1a\u5c06\u5143\u7d20\u653e\u8fdbresult\u6570\u7ec4\u4e2d</li> <li>\u8bbf\u95ee\uff1a\u904d\u5386\u7ed3\u70b9</li> </ol> C++<pre><code>calss solution\n{\n    public:\n    vector&lt;int&gt; inorderTraversal(TreeNode*root){\n        stack&lt;TreeNode*&gt; st;\n        vector&lt;int&gt; result;\n        TreeNode*cur=root;//\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u6765\u8f85\u52a9\u8fdb\u884c\u6808\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u521d\u59cb\u503c\u4e3a\u6839\u7ed3\u70b9\u3002\n        if(root==nullptr) return result;\n        //st.push(cur);\u8fd9\u4e2a\u5730\u65b9\u4e0d\u7528\u63d0\u524d\u5165\u6808\uff0c\u56e0\u4e3a\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u5728\u5faa\u73af\u7b2c\u4e00\u6b21\u5c31\u653e\u5165\u6808\u5e95\uff0c\u56e0\u6b64\u4e0d\u7528\u63d0\u524d\u653e\uff0c\u5982\u679c\u63d0\u524d\u653e\u4e86\uff0c\u90a3\u4e48\u540e\u9762\u5faa\u73af\u4e2d\u5c31\u4f1a\u91cd\u590d\u5c06\u6839\u8282\u70b9\u8fdb\u6808\u4e24\u6b21\uff0c\u5bfc\u81f4\u6700\u540e\u8bbf\u95ee\u7684\u65f6\u5019\u51fa\u9519\u3002\n        while(cur!=null||!st.empty()){//\u5f53\u5f53\u524d\u6307\u9488\u548c\u6808\u5168\u4e3a\u7a7a\uff0c\u5faa\u73af\u505c\u6b62\u3002\n            if(cur!=nullptr){\n                st.push(cur);//\u5c06\u5f53\u524d\u7ed3\u70b9\u8fdb\u6808\n                cur=cur-&gt;left;\n                }\n            else{\n                cur=st.top();\n                st.pop();\n                result.push_back(cur-&gt;val);//\u51fa\u6808\uff0c\u8bbf\u95ee\u5c06\u6808\u9876\u5143\u7d20\u653e\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u5730\u65b9\u5176\u5b9e\u5305\u542b\u4e86\u5148\u8bbf\u95ee\u5de6\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u7ed3\u70b9\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5de6\u8282\u70b9\u4f1a\u540e\u8fdb\u6808\uff0c\u5148\u51fa\u6808\uff0c\u6240\u4ee5\u8bbf\u95ee\u7684\u65f6\u5019\u6c38\u8fdc\u662f\u5de6\u8282\u70b9\u5148\u8bbf\u95ee\uff0c\u4e2d\u7ed3\u70b9\u540e\u8bbf\u95ee\uff0c\u6240\u4ee5\u6709\u4e2a\u9690\u85cf\u987a\u5e8f\uff0c\u7136\u540e\u5728\u8bbf\u95ee\u5b8c\u4e4b\u540e\u4f1a\u8fdb\u884c\u76f8\u5173\u7684\u5de6\u6839\u53f3\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\u8fdb\u884ccur-&gt;cur-&gt;right;\n                cur=cur-&gt;right;\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_8","title":"\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09","text":"<p>\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u8ddf\u524d\u5e8f\u76f8\u53cd\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5730\u65b9\u53ea\u9700\u8981\u5728\u524d\u5e8f\u904d\u5386\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u5c31\u884c\u3002\u2018</p> C++<pre><code>class solution{\n    public:\n    vector&lt;int&gt; postorderTraverseal(TreeNode*root){\n        stack&lt;TreeNode*&gt; st;\n        vector&lt;int&gt; result;\n        if(root==null) return result;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode*cur=st.top();\n            st.pop();\n            result.push_back(cur-&gt;val);\n            if(cur-&gt;right) st.push(cur-&gt;left);\n            if(cur-&gt;left) st.push(cur-&gt;right);\n        }\n        reverse(result.begin(),result.end());\n        return result;\n    }\n};\n</code></pre> <p>\u601d\u8def\u5c31\u662f\u524d\u5e8f\u904d\u5386\u7684\u5de6\u53f3\u5b50\u6811\u4ea4\u6362\u8fdb\u884creverse\u5c31\u5f97\u5230\u540e\u5e8f\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_9","title":"\u4e8c\u53c9\u6811\u7684\u7edf\u4e00\u8fed\u4ee3\u6cd5","text":"<p>\u601d\u8def\uff1a \u5176\u5b9e\u5c31\u662f\u628a\u8981\u8bbf\u95ee\u7684\u7ed3\u70b9\u653e\u5165\u6808\u4e2d\uff0c\u540c\u65f6\u5c06\u8981\u5904\u7406\u7684\u7ed3\u70b9\u8fdb\u884c\u6807\u8bb0\u3002\u5176\u5b9e\u8fd9\u91cc\u5c31\u662f\u5bf9\u8981\u5904\u7406\u7684\u7ed3\u70b9\u653e\u5165\u6808\u540e\uff0c\u7d27\u63a5\u7740\u653e\u4e00\u4e2a\u7a7a\u6307\u9488\u4f5c\u4e3a\u6807\u8bb0\uff0c\u53eb\u505a\u6807\u8bb0\u6cd5\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386\uff1a</p> C++<pre><code>class solution{\n    public:\n    vector&lt;int&gt; traversal(TreeNode*root){\n        stack&lt;TreeNode*&gt; st;//\u5b58\u653e\u4e34\u65f6\u8282\u70b9\u7684\u6808\n        vector&lt;int&gt; result;//\u5b58\u653e\u7ed3\u679c\n        if(root==null) return result;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode*node=st.top();//\u627e\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u6808\u9876\u7684\u7ed3\u70b9\n            if(node!=nullptr){\n                st.pop();\n                if(node-&gt;right) st.push(node-&gt;right);//\u53f3\n                st.push(node);//\u4e2d\n                st.push(null);\n                if(node-&gt;left) st.push(node-&gt;left);//\u5de6\n            }\n            else{\n                st.pop();//\u5c06null\u51fa\u6808\n                node=st.top();//\u53d6\u8be5\u5904\u7406\u7684\u7ed3\u70b9\n                st.pop();//\u5f39\u51fa\u6808\n                result.push_back(node-&gt;val);//\u653e\u5165\u7ed3\u679c\n            }\n        }\n        return result;//\u8fd4\u56de\u7ed3\u679c\n    }\n};\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4ee3\u7801\u7684\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u51e0\u4e2a\u96be\u4ee5\u7406\u89e3\u7684\u5730\u65b9\uff0c</p> <p>1\u3001\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u9700\u8981\u4e00\u4e2anull\u6765\u6807\u8bb0\uff0c\u540c\u65f6\u4e3a\u4ec0\u4e48\u6bd4\u5982\u4e00\u5f00\u59cb\u6807\u8bb0\u7684\u662froot\uff0c\u6700\u540e\u4f9d\u7136\u80fd\u6309\u7167\u5de6\u8ddf\u53f3\u7684\u987a\u5e8f\u8bbf\u95ee\u3002</p> <p>\u56e0\u4e3a\uff0c\u8fd9\u4e2a\u5730\u65b9\uff0c\u6bd4\u5982\u8bf4\u8981\u8bbf\u95ee\u5de6\u8282\u70b9\uff0c\u6839\u7ed3\u70b9\uff0c\u53f3\u8282\u70b9\uff0c\u65e0\u8bba\u600e\u4e48\u5904\u7406\uff0c\u90fd\u662f\u4ece\u6839\u7ed3\u70b9\u8fdb\u5165\u7684\uff0c\u6240\u4ee5\u6839\u7ed3\u70b9\u4e00\u5b9a\u9700\u8981\u5904\u7406\uff0c\u4f46\u4e0d\u4f1a\u662f\u6700\u65e9\u7684\uff0c\u6240\u4ee5\u4f60\u4e00\u5f00\u59cb\u5c06root\u6807\u8bb0\u4e4b\u540e\uff0c\u53c8\u8fdb\u6808\u4e86\u5de6\u8282\u70b9\uff0c\u6700\u540e\u4e00\u5b9a\u4f1a\u4ee5\u5de6\u8282\u70b9\u4e3a\u57fa\u7840\uff0c\u53bb\u8fdb\u884c\u5faa\u73af\uff0c\u5c06\u5de6\u8282\u70b9\u6807\u8bb0\uff0c\u4ece\u800c\u5de6\u8282\u70b9\u4f1a\u4e00\u76f4\u5728root\u4e4b\u524d\uff0c\u800c\u53f3\u8282\u70b9\u4f1a\u4e00\u76f4\u5728root\u4e4b\u540e\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u7684\u9700\u8981\u5904\u7406\u7684\u7ed3\u70b9\uff0c\u4f1a\u9010\u5c42\u6807\u8bb0\uff0c\u76f4\u5230\u4e8c\u53c9\u6811\u6ca1\u6709\u5de6\u5b50\u6811\u4e86\uff0c\u5373\u8bbf\u95ee\u5230\u6700\u6df1\u4e86\u3002\u8fd9\u65f6\u5c31\u4f1a\u9006\u5411\u8fdb\u884c\u5904\u7406\u8282\u70b9\uff0c\u800c\u4e14\u4e5f\u662f\u6309\u7167\u987a\u5e8f\u7684\u3002</p> <p>2\u3001\u4e3a\u4ec0\u4e48\u8981\u5f39\u51fa\u4e24\u6b21\u6808\uff1f \u56e0\u4e3a\uff0c\u5f53\u4f60\u9047\u5230null\u65f6\uff0c\u8868\u793a\u51c6\u5907\u5904\u7406\u4e00\u4e2a\u7ed3\u70b9\u4e86\uff0c\u6b64\u65f6\u9700\u8981\u5f80result\u91cc\u9762\u6dfb\u52a0\u8282\u70b9\uff0c\u540c\u65f6\u4e0d\u80fd\u6dfb\u52a0\u5f53\u524d\u7684null\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u5730\u65b9\u8fdb\u884c\u4e86\u4e24\u6b21\u51fa\u6808\uff0c\u7b2c\u4e00\u6b21\u662f\u5c06null\u51fa\u6808\uff0c\u7b2c\u4e8c\u6b21\u662f\u5c06\u9700\u8981\u5904\u7406\u7684\u7ed3\u70b9\u51fa\u6808\uff0c\u5c06\u5176\u52a0\u5165\u5230result\u4e2d\u3002</p> <p>3\u3001\u600e\u4e48\u4fdd\u8bc1\u5faa\u73af\u4e00\u76f4\u5411\u4e0b\uff0c\u4f1a\u6267\u884c\u6b63\u786e\uff1f</p> <p>\u8fd9\u4e2a\u5730\u65b9\uff0c\u6211\u7684\u7406\u89e3\u662f\uff0c\u56e0\u4e3a\u4ed6\u6bcf\u6b21\u90fd\u662f\u53f3\u4e2d\u5de6\u7684\u987a\u5e8f\u5165\u6808\uff0c\u6bcf\u6b21\u5faa\u73af\u4f1a\u53d6\u6808\u9876\uff0c\u90a3\u4e48\u6bcf\u6b21\u5faa\u73af\u4f53\u7684\u6700\u540e\u4e00\u6b21\u5165\u6808\u5c31\u662f\u6808\u9876\u5143\u7d20\uff0c\u800c\u6bcf\u6b21\u90fd\u662f\u5de6\u8282\u70b9\u6700\u540e\u5165\u6808\uff0c\u56e0\u6b64\u6bcf\u6b21\u5faa\u73af\u7684\u4e0b\u6b21\u5faa\u73af\u90fd\u662f\u5bf9\u4e0a\u4e00\u5c42\u7684\u5de6\u5b50\u6811\u8fdb\u884c\u5904\u7406\uff0c\u4e00\u76f4\u7b26\u5408\u5de6\u4e2d\u53f3\uff0c\u76f4\u5230\u5faa\u73af\u5230\u6700\u5e95\uff0c\u6b64\u65f6\u4e5f\u80fd\u53d1\u73b0\u672c\u6765\u5c31\u5e94\u8be5\u5faa\u73af\u5230\u6700\u4f4e\uff0c\u4ece\u6700\u5de6\u8fb9\u7684\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u8bbf\u95ee\uff0c\u8fd9\u4e2a\u548c\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6\u76f8\u4e00\u81f4\uff0c\u4f46\u662f\u8fd9\u4e2a\u5730\u65b9\u7684\u7ec8\u6b62\u6761\u4ef6\u662f\u6808\u4e2d\u5143\u7d20\u90fd\u5904\u7406\u5b8c\u4e86\uff0c\u800c\u4e0d\u662fwhile(!node)\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5730\u65b9\u4e0d\u6b62\u5728\u6700\u5e95\u5c42\u9700\u8981\u4e3a\u7a7a\uff0c\u800c\u4e14\u5728\u6211\u4eec\u8fdb\u884c\u6807\u8bb0\u7684\u65f6\u5019\u4e5f\u4f1a\u89e6\u53d1\u7ec8\u6b62\u6761\u4ef6\uff0c\u540c\u65f6\u5982\u679c\u89e6\u53d1\u7ec8\u6b62\u6761\u4ef6\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd8\u4e0d\u80fd\u7ec8\u6b62\u5faa\u73af\uff0c\u800c\u662f\u5e94\u8be5\u7ee7\u7eed\u8fdb\u884c\u8be5\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u7684\u5904\u7406\uff0c\u56e0\u6b64\u8fd9\u91cc\u91c7\u7528\u4e86\u5f53\u6808\u4e3a\u7a7a\u65f6\u7ec8\u6b62\uff0c\u56e0\u4e3a\u6808\u4f1a\u5b58\u653e\u8fc7\u6240\u6709\u7ed3\u70b9\uff0c\u6240\u6709\u8282\u70b9\u5728\u672a\u88ab\u5904\u7406\u4e4b\u524d\u90fd\u662f\u4e0d\u4f1a\u8fdb\u884c\u51fa\u6808\u7684\uff0c\u56e0\u6b64\u80fd\u591f\u4fdd\u8bc1\u6240\u6709\u7ed3\u70b9\u90fd\u5904\u7406\u5230\u3002\u540c\u65f6\u4e5f\u6ee1\u8db3\u8bbf\u95ee\u987a\u5e8f\uff0c\u80fd\u591f\u5f97\u5230\u6700\u7ec8\u7b54\u6848\u3002</p> <p>\u524d\u5e8f\u904d\u5386\uff1a</p> C++<pre><code>class solution{\n    public:\n    vector&lt;int&gt; traversal(TreeNode* root){\n        vector&lt;int&gt; result;\n        stack&lt;TreeNode*&gt; st;\n        if(root==null) return result;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode*node=st.top();\n            if(!node==nullptr){\n                st.pop();\n                if(node-&gt;right) st.push(node-&gt;right);\n                if(node-&gt;left) st.push(node-&gt;left);\n                st.push(node);\n                st.push(null);\n            }\n            else{\n                st.pop();\n                node=st.top();\n                st.pop();\n                result.push_back(node-&gt;val);\n            }\n        }\n        return result;\n    }\n};\n</code></pre> <p>\u540e\u5e8f\u904d\u5386\uff1a</p> C++<pre><code>class solution{\n    public:\n    vector&lt;int&gt; traversal(TreeNode*root){\n        vector&lt;int&gt;result;\n        stack&lt;TreeNode*&gt;st;\n        if(root==null) return result;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode*node=st.top();\n            if(!node==nullptr){\n                st.pop();\n                st.push(node);\n                st.push(nullptr);\n                if(node-&gt;right) st.push(node-&gt;right);\n                if(node-&gt;left) st.push(node-&gt;left);\n            }\n            else{\n                st.pop();\n                node=st.top();\n                st.pop();\n                result.push_back(node-&gt;val);\n            }\n        }\n        return result;\n    }\n}\n</code></pre> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u904d\u5386\u65b9\u6cd5\uff0c\u5927\u5bb6\u968f\u610f\u638c\u63e1\uff0c\u53ea\u8981\u80fd\u5199\u51fa\u6765\u5c31\u53ef\u4ee5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_10","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>\u8fd9\u4e2a\u5c31\u662f\u5c42\u5e8f\u904d\u5386\uff0c\u5176\u5b9e\u5c42\u5e8f\u904d\u5386\u5c31\u662f\u6309\u7167\u5c42\u4e00\u5c42\u4e00\u5c42\u5c06\u4e8c\u53c9\u6811\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u8fd9\u4e2a\u5730\u65b9\u7528\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u961f\u5217\u6bd4\u8f83\u597d\uff0c\u800c\u7528\u6808\u5148\u8fdb\u540e\u51fa\u9002\u5408\u6a21\u62df\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4e5f\u5c31\u662f\u9012\u5f52\u7684\u903b\u8f91\u3002</p> <p>\u9012\u5f52\uff1a\u5176\u5b9e\u5c31\u662f\u5728\u5185\u5b58\u5e95\u90e8\u4f7f\u7528\u6808\u8fdb\u884c\u5b58\u50a8\u6bcf\u4e00\u5c42\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u6700\u540e\u4e00\u5c42\u4e00\u5c42\u8fdb\u884c\u8fd4\u56de\u3002\u5728\u8ba1\u7b97\u673a\u5e95\u5c42\u9012\u5f52\u5c31\u662f\u5229\u7528\u4e86\u6808\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u5c42\u5e8f\u904d\u5386\uff0c\u5c31\u662f\u56fe\u8bba\u4e2d\u7684\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u5e94\u7528\u5728\u4e8c\u53c9\u6811\u4e0a\u3002</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> C++<pre><code>class solution{\n    public:\n    vector&lt;vector&lt;int&gt;&gt; traversal_level(TreeNode*root){\n        queue&lt;TreeNode*&gt; que;\n        if(root!=null) que.push(root);\n        vector&lt;vector&lt;int&gt;&gt; result;\n        while(!que.empty()){\n            int size=que.size();\n            vector&lt;int&gt; vec;\n            //\u8fd9\u4e2a\u5730\u65b9\u7684size\u5fc5\u987b\u662f\u5f53\u524d\u5c42\u7684\u7ed3\u70b9\u6570\u91cf\uff1b\n            for(int i=0;i&lt;size;i++){\n                TreeNode* node=que.front();\n                que.pop();\n                vec.push_back(node-&gt;val);\n                if(node-&gt;left) que.push(node-&gt;left);\n                if(node-&gt;right) que.push(node-&gt;right);\n            }\n            result.push_back(vec);\n        }\n        return result;\n    }\n};\n</code></pre> <p>\u9012\u5f52\u5b9e\u73b0\uff1a</p> C++<pre><code>class solution{\n    public:\n    void order(TreeNode*cur,vector&lt;vector&lt;int&gt;&gt;&amp;result,int depth){\n        if(cur==nullptr) return;\n        if(result.size()==depth) result.push_back(vector&lt;int&gt;());\n        result[depth].push_bcak(cur-&gt;val);\n        order(cur-&gt;left,result,depth+1);\n        order(cur-&gt;right,result,depth+1);\n    }\n    vector&lt;vector&lt;int&gt;&gt; levelorder(TreeNode* root){\n        vector&lt;vector&lt;int&gt;&gt; result;\n        int depth=0;\n        order(root,result,depth);\n        return result;\n    }\n};\n</code></pre> <p>\u8fd9\u4e2a\u9012\u5f52\u5b9e\u73b0\u6bd4\u8f83\u7ed5\uff0c\u56e0\u6b64\u5c3d\u91cf\u638c\u63e1\u5c31\u884c\uff0c\u4e3b\u8981\u5c31\u662f\u4e00\u4e2a\u9012\u5f52\u4e09\u8981\u7d20\uff0c\u7ec8\u6b62\u6761\u4ef6\uff0c\u53c2\u6570\uff0c\u9012\u5f52\u4f53\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#2","title":"\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u53862","text":"<p>\u5c06\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u503c\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u5c42\u6b21\u904d\u5386\uff1a</p> <p>\u601d\u8def\uff1a\u5c31\u662f\u5c06\u6b63\u5e38\u7684\u5c42\u5e8f\u8bbf\u95ee\u987a\u5e8f\uff0c\u8fdb\u884c\u8bbf\u95ee\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u8fdb\u884c\u53cd\u8f6c\u3002</p> C++<pre><code>class solution{\n    public:\n    vector&lt;vector&lt;int&gt;&gt; traversal_level(TreeNode*root){\n        queue&lt;TreeNode*&gt; que;\n        if(root!=null) que.push(root);\n        vector&lt;vector&lt;int&gt;&gt; result;\n        while(!que.empty()){\n            int size=que.size();\n            vector&lt;int&gt; vec;\n            //\u8fd9\u4e2a\u5730\u65b9\u7684size\u5fc5\u987b\u662f\u5f53\u524d\u5c42\u7684\u7ed3\u70b9\u6570\u91cf\uff1b\n            for(int i=0;i&lt;size;i++){\n                TreeNode* node=que.front();\n                que.pop();\n                vec.push_back(node-&gt;val);\n                if(node-&gt;left) que.push(node-&gt;left);\n                if(node-&gt;right) que.push(node-&gt;right);\n            }\n            result.push_back(vec);\n        }\n        reverse(result.begin(),result.end());\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_11","title":"\u7ffb\u8f6c\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class solution{\n    public:\n    TreeNode* invertTree(TreeNode* root){\n        if(root==null) return root;\n        swap(root-&gt;left,root-&gt;right);\n        invertTree(root-&gt;left);\n        invertTree(root-&gt;right);\n        return root;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL) return root;\n        stack&lt;TreeNode*&gt; st;\n        st.push(root);\n        while(!st.empty()) {\n            TreeNode* node = st.top();              // \u4e2d\n            st.pop();\n            swap(node-&gt;left, node-&gt;right);\n            if(node-&gt;right) st.push(node-&gt;right);   // \u53f3\n            if(node-&gt;left) st.push(node-&gt;left);     // \u5de6\n        }\n        return root;\n    }\n};\n</code></pre> <p>\u7edf\u4e00\u8fed\u4ee3\u6cd5\uff1a\u90fd\u662f\u5148\u5e8f\u7684\u65b9\u6cd5\u3002</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        if (root != NULL) st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            if (node != NULL) {\n                st.pop();\n                if (node-&gt;right) st.push(node-&gt;right);  // \u53f3\n                if (node-&gt;left) st.push(node-&gt;left);    // \u5de6\n                st.push(node);                          // \u4e2d\n                st.push(NULL);\n            } else {\n                st.pop();\n                node = st.top();\n                st.pop();\n                swap(node-&gt;left, node-&gt;right);          // \u8282\u70b9\u5904\u7406\u903b\u8f91\n            }\n        }\n        return root;\n    }\n};\n</code></pre> <p>\u5c42\u5e8f\u904d\u5386\uff1a\u7ffb\u8f6c\u4e8c\u53c9\u6811</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        queue&lt;TreeNode*&gt; que;\n        if (root != NULL) que.push(root);\n        while (!que.empty()) {\n            int size = que.size();\n            for (int i = 0; i &lt; size; i++) {\n                TreeNode* node = que.front();\n                que.pop();\n                swap(node-&gt;left, node-&gt;right); // \u8282\u70b9\u5904\u7406\n                if (node-&gt;left) que.push(node-&gt;left);\n                if (node-&gt;right) que.push(node-&gt;right);\n            }\n        }\n        return root;\n    }\n};\n</code></pre> <p>\u9012\u5f52\u7684\u4e2d\u5e8f\u904d\u5386\u65b9\u5f0f\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == NULL) return root;\n        invertTree(root-&gt;left);         // \u5de6\n        swap(root-&gt;left, root-&gt;right);  // \u4e2d\n        invertTree(root-&gt;left);         // \u6ce8\u610f \u8fd9\u91cc\u4f9d\u7136\u8981\u904d\u5386\u5de6\u5b69\u5b50\uff0c\u56e0\u4e3a\u4e2d\u95f4\u8282\u70b9\u5df2\u7ecf\u7ffb\u8f6c\u4e86\n        return root;\n    }\n};\n</code></pre> <p>\u7edf\u4e00\u8fed\u4ee3\u6cd5\u4e2d\u5e8f\u904d\u5386\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        if (root != NULL) st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            if (node != NULL) {\n                st.pop();\n                if (node-&gt;right) st.push(node-&gt;right);  // \u53f3\n                st.push(node);                          // \u4e2d\n                st.push(NULL);\n                if (node-&gt;left) st.push(node-&gt;left);    // \u5de6\n\n            } else {\n                st.pop();\n                node = st.top();\n                st.pop();\n                swap(node-&gt;left, node-&gt;right);          // \u8282\u70b9\u5904\u7406\u903b\u8f91\n            }\n        }\n        return root;\n    }\n};\n</code></pre> <p>\u4e8c\u53c9\u6811\u603b\u7ed3\uff1a c++\u4e2dmap,multimap,set,multiset\u7684\u5e95\u5c42\u5b9e\u73b0\u673a\u5236\u662f\u4e8c\u53c9\u5e73\u8861\u641c\u7d22\u6811\u3002\u518d\u5177\u4f53\u4e00\u70b9\u5c31\u662f\u7ea2\u9ed1\u6811\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_12","title":"\u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\u89e3\u6cd5\uff1a</p> C++<pre><code>class solution{\n    public:\n    bool compare(TreeNode*left,TreeNode*right){\n        if(left==null&amp;&amp;right!=null) return false;\n        else if(left!=null&amp;&amp;right==null) return false;\n        else if(left==null&amp;&amp;right==null) return true;\n        else if(left-&gt;val!=right-&gt;val) return false;\n        bool outside=compare(left-&gt;left,right-&gt;right);\n        bool inside=compare(left-&gt;right,right-&gt;left);\n        bool isSame=outside&amp;inside;\n        return isSame;\n    }\n    bool isSymmetric(TreeNode*root){\n        if(root==null) return true;\n        return compare(root-&gt;left,root-&gt;right);\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class solution{\n    public:\n    bool compare(TreeNode*root){\n        if(root==null) return true;\n        queue&lt;TreeNode*&gt; que;\n        que.push(root-&gt;left);\n        que.push(root-&gt;right);\n        while(!que.empty()){\n            TreeNode*first=que.front();que.pop();\n            TreeNode*second=que.front();que.pop();\n            if(first==null&amp;&amp;second==null) continue;\n            if((first!=null||second!=null)||(first-&gt;val!=second-&gt;val)) return false;\n            que.push(first-&gt;left);\n            quye.push(second-&gt;right);\n            que.push(first-&gt;right);\n            que.push(second-&gt;left);\n        }\n        return true;\n    }\n};\n</code></pre> <p>\u8fd0\u7528\u961f\u5217\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_13","title":"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":"<p>\u5e38\u89c4\u6c42\u89e3\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u8be5\u9898\u548c\u6c42\u89e3\u4e8c\u53c9\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u76f8\u4f3c\u3002</p> <p>\u9012\u5f52\u6cd5\uff1a</p> C++<pre><code>#include &lt;algorithm&gt;\nclass solution{\n    public:\n    int depth(TreeNode*node){\n        if(node==null) return 0;\n        int a=depth(node-&gt;left);\n        int b=depth(node-&gt;right);\n        return 1+max(a,b);\n    }\n};\n</code></pre> <p>\u7b80\u5316\u540e\uff1a</p> C++<pre><code>#include &lt;algorithm&gt;\nclass solution{\n    public:\n    int depth(TreeNode*node){\n        if(node==null) return 0;\n        return 1+max(depth(node-&gt;left),depth(node-&gt;right));\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class solution{\npublic:\n    int maxDepth(TreeNode*root){\n        if(root==null) return 0;\n        int depth=0;\n        queue&lt;TreeNode*&gt; que;\n        que.push(root);\n        while(!que.empty()){\n            int size=que.size();\n            depth++;\n            for(int i=0;i&lt;size;i++){\n                TreeNode* cur=que.front();\n                que.pop();\n                if(cur-&gt;left) que.push(cur-&gt;left);\n                if(cur-&gt;right) que.push(cur-&gt;right);\n            }\n        }\n        return depth;\n    }\n\n};\n</code></pre> <p>n\u53c9\u6811\uff1a</p> <p>\u9012\u5f52\uff1a</p> C++<pre><code>#include &lt;algorithm&gt;\nclass solution{\n    public:\n    int depth(TreeNode*root){\n        if(root==null) return 0;\n        int depth=0;\n        for(int i=0;i&lt;root-&gt;children.size();i++){\n            depth=max(depth,root-&gt;children[i]);\n        }\n        return 1+depth;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class solution{\npublic:\n    int maxDepth(TreeNode*root){\n        if(root==null) return 0;\n        int depth=0;\n        queue&lt;TreeNode*&gt; que;\n        que.push(root);\n        while(!que.empty()){\n            int size=que.size();\n            depth++;\n            for(int i=0;i&lt;size;i++){\n                TreeNode* cur=que.front();\n                que.pop();\n                for(int j=0;j&lt;cur-&gt;children.size();j++){\n                    que.push(cur-&gt;children[i]);\n                }\n            }\n        }\n        return depth;\n    }\n\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_14","title":"\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","text":"<p>\u8be5\u9898\u76ee\u548c\u6700\u5927\u6df1\u5ea6\u5dee\u4e0d\u591a\uff0c\u53ea\u9700\u8981\u628a\u6c42\u89e3\u6700\u5927\u6df1\u5ea6\u7684\u51fd\u6570\uff0c\u53d6\u53cd\uff0c\u6c42\u89e3\u6700\u5c0f\u6df1\u5ea6\u5373\u53ef\u3002</p> <p>\u9012\u5f52\u6cd5\uff1a</p> C++<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int getDepth(TreeNode* node){\n        if(node==nullptr) return 0;\n        int leftdep=getDepth(node-&gt;left);\n        int rightdep=getDepth(node-&gt;right);\n        if(node-&gt;left==nullptr&amp;&amp;node-&gt;right!=nullptr){\n            return 1+rightdep;\n        }  \n        if(node-&gt;right==nullptr&amp;&amp;node-&gt;left!=nullptr){\n            return 1+leftdep;\n        }\n        return min(leftdep,rightdep)+1;\n    }\n    int minDepth(TreeNode* root) {\n        return getDepth(root);\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_15","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570","text":"<p>\u9012\u5f52\u6cd5\uff1a</p> C++<pre><code>class Solution {\nprivate:\n    int getNodesNum(TreeNode* cur) {\n        if (cur == NULL) return 0;\n        int leftNum = getNodesNum(cur-&gt;left);      // \u5de6\n        int rightNum = getNodesNum(cur-&gt;right);    // \u53f3\n        int treeNum = leftNum + rightNum + 1;      // \u4e2d\n        return treeNum;\n    }\npublic:\n    int countNodes(TreeNode* root) {\n        return getNodesNum(root);\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class Solution{\n    public:\n        int countNodes(TreeNode* root){\n            queue&lt;TreeNode*&gt; que;\n            if(root!=null) que.push(root);\n            int result;\n            while(!que.empty()){\n                int size=que.size();\n                for(int i=0;i&lt;size;i++){\n                    result++;\n                    TreeNode* node=que.front();\n                    que.pop();\n                    if(node-&gt;left) que.push(node-&gt;left);\n                    if(node-&gt;right) que.push(node-&gt;right);\n                }\n            }\n            return result;\n        }\n}\n</code></pre> <p>\u4e0a\u8ff0\u4e24\u4e2a\u7b97\u6cd5\u90fd\u662f\u5904\u7406\u666e\u901a\u4e8c\u53c9\u6811\u7684\uff0c\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u6811\uff0c\u800c\u672c\u9898\u7684\u91cd\u70b9\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u5f00\u59cb\u4ecb\u7ecd\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7b97\u6cd5\uff1a</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u4e00\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u4e8c\u662f\u6700\u540e\u4e00\u5c42\u53f6\u5b50\u8282\u70b9\u6ca1\u6709\u6ee1\u3002</p> <p>\u5bf9\u4e8e\u60c5\u51b5\u4e00\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 2^\u6811\u6df1\u5ea6 - 1 \u6765\u8ba1\u7b97\uff0c\u6ce8\u610f\u8fd9\u91cc\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a1\u3002</p> <p>\u5bf9\u4e8e\u60c5\u51b5\u4e8c\uff0c\u5206\u522b\u9012\u5f52\u5de6\u5b69\u5b50\uff0c\u548c\u53f3\u5b69\u5b50\uff0c\u9012\u5f52\u5230\u67d0\u4e00\u6df1\u5ea6\u4e00\u5b9a\u4f1a\u6709\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\u4e3a\u6ee1\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u4f9d\u7136\u53ef\u4ee5\u6309\u7167\u60c5\u51b51\u6765\u8ba1\u7b97\u3002</p> C++<pre><code>class Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == nullptr) return 0;\n        TreeNode* left = root-&gt;left;\n        TreeNode* right = root-&gt;right;\n        int leftDepth = 0, rightDepth = 0; // \u8fd9\u91cc\u521d\u59cb\u4e3a0\u662f\u6709\u76ee\u7684\u7684\uff0c\u4e3a\u4e86\u4e0b\u9762\u6c42\u6307\u6570\u65b9\u4fbf\n        while (left) {  // \u6c42\u5de6\u5b50\u6811\u6df1\u5ea6\n            left = left-&gt;left;\n            leftDepth++;\n        }\n        while (right) { // \u6c42\u53f3\u5b50\u6811\u6df1\u5ea6\n            right = right-&gt;right;\n            rightDepth++;\n        }\n        if (leftDepth == rightDepth) {\n            return (2 &lt;&lt; leftDepth) - 1; // \u6ce8\u610f(2&lt;&lt;1) \u76f8\u5f53\u4e8e2^2\uff0c\u6240\u4ee5leftDepth\u521d\u59cb\u4e3a0\n        }\n        return countNodes(root-&gt;left) + countNodes(root-&gt;right) + 1;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_16","title":"\u5e73\u8861\u4e8c\u53c9\u6811","text":"<p>\u8fd9\u4e2a\u9898\u76ee\u5c31\u662f\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002</p> C++<pre><code>class solution{\n    int getHeight(TreeNode* node){\n        if(node==NULL){\n            return 0;\n        }\n        int leftHeight=getHeight(node-&gt;left);\n        if(leftHeight==-1) return -1;\n        int rightHeight=getHeight(node-&gt;right);\n        if(rightHeight==-1) return -1;\n        if(abs(leftHeight-rightHeight)&gt;1){\n            return -1;\n        }\n        return 1+max(leftHeight,rightHeight);\n    }\n    bool isBalanced(TreeNode*root){\n        return getHeight(root)==-1 ? false:true;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> <p>\u901a\u8fc7\u6a21\u62df\u6808\uff0c\u8fdb\u884c\u540e\u5e8f\u904d\u5386\uff0c\u6765\u5bfb\u627e\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u9ad8\u5ea6\u3002</p> C++<pre><code>class solution{\n    int getDepth(TreeNode*cur){\n        stack&lt;TreeNode*&gt; st;\n        if(cur!=NULL) st.push(cur);\n        int depth=0;\n        int result=0;\n        while(!st.empty()){\n            TreeNode* node=st.top();\n            if(node!=NULL){\n                st.pop();\n                st.push(node);\n                st.push(NULL);\n                depth++;\n                if(node-&gt;right) st.push(node-&gt;right);\n                if(node-&gt;left) st.push(node-&gt;left);\n            }\n            else{\n                st.pop();\n                node=st.top();\n                st.pop();\n                depth--;\n            }\n            result=result&gt;depth?result:depth;\n        }\n        return result;\n    }\n    bool isBalanced(TreeNode*root){\n        stack&lt;TreeNode*&gt; st;\n        if(root==NULL) return true;\n        st.push(root);\n        while(!st.empty()){\n            TreeNode*node=st.top();\n            st.pop();\n            if(abs(getDepth(node-&gt;left)-getDepth(node-&gt;right))&gt;1){\n                return false;\n            }\n            if(node-&gt;left) st.push(node-&gt;left);\n            if(node-&gt;right) st.push(node-&gt;right);\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_17","title":"\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\u3002</p> <p>\u8bf4\u660e\uff1a\u53f6\u5b50\u7ed3\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u7ed3\u70b9\u3002</p> <p>1\u3001\u9012\u5f52</p> Text Only<pre><code>class Solution {\nprivate:\n    void traversal(TreeNode* cur, vector&lt;int&gt;&amp; path, vector&lt;string&gt;&amp; result){\n        path.push_back(cur-&gt;val); \n        if(cur-&gt;left==nullptr&amp;&amp;cur-&gt;right==nullptr){\n            string spath=NULL;\n            for(int i=0;i&lt;path.size()-1;i++){\n                spath+=to_string(path[i]);\n                spath+=\"-&gt;\";\n            }\n            spath+=to_string(path[path.size()-1]);\n            result.push_back(spath);\n            return;\n        }\n        if(cur-&gt;left){\n            traversal(cur-&gt;left,path,result);\n            path.pop_back();\n        }\n        if(cur-&gt;right){\n            traversal(cur-&gt;left,path,result);\n            path.pop_back();\n        }\n    }\npublic:\n    vector&lt;string&gt; binaryTreePaths(TreeNode* root) {\n        vector&lt;string&gt; result;\n        vector&lt;int&gt; path;\n        if (root == NULL) return result;\n        traversal(root, path, result);\n        return result;\n    }\n};\n</code></pre> <p>2\u3001\u8fed\u4ee3\u6cd5</p> Text Only<pre><code>class Solution {\npublic:\n    vector&lt;string&gt; binaryTreePaths(TreeNode* root) {\n        stack&lt;TreeNode*&gt; treeSt;// \u4fdd\u5b58\u6811\u7684\u904d\u5386\u8282\u70b9\n        stack&lt;string&gt; pathSt;   // \u4fdd\u5b58\u904d\u5386\u8def\u5f84\u7684\u8282\u70b9\n        vector&lt;string&gt; result;  // \u4fdd\u5b58\u6700\u7ec8\u8def\u5f84\u96c6\u5408\n        if (root == NULL) return result;\n        treeSt.push(root);\n        pathSt.push(to_string(root-&gt;val));\n        while (!treeSt.empty()) {\n            TreeNode* node = treeSt.top(); treeSt.pop(); // \u53d6\u51fa\u8282\u70b9 \u4e2d\n            string path = pathSt.top();pathSt.pop();    // \u53d6\u51fa\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u8def\u5f84\n            if (node-&gt;left == NULL &amp;&amp; node-&gt;right == NULL) { // \u9047\u5230\u53f6\u5b50\u8282\u70b9\n                result.push_back(path);\n            }\n            if (node-&gt;right) { // \u53f3\n                treeSt.push(node-&gt;right);\n                pathSt.push(path + \"-&gt;\" + to_string(node-&gt;right-&gt;val));\n            }\n            if (node-&gt;left) { // \u5de6\n                treeSt.push(node-&gt;left);\n                pathSt.push(path + \"-&gt;\" + to_string(node-&gt;left-&gt;val));\n            }\n        }\n        return result;\n    }\n};\n</code></pre> <p>\u672c\u9898\u4e3b\u8981\u6d89\u53ca\u4e86\u56de\u6eaf\uff0c\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u5224\u65ad\u7ed3\u70b9\u7684\u9012\u5f52\u4ee3\u7801\u5757\u4e2d\uff0c\u6709pop_back\u8fd9\u6837\u7684\u56de\u6eaf\u8fc7\u7a0b\u3002</p> <p>\u5728\u8fed\u4ee3\u6cd5\u4e2d\uff0c\u56de\u6eaf\u9690\u85cf\u5728while\u8bed\u53e5\u4e0b\u9762\u4e24\u884c\u4e2d\uff0c\u901a\u8fc7\u6bcf\u6b21\u51fa\u6808\u6765\u53d8\u76f8\u5b9e\u73b0\u56de\u6eaf\u8fc7\u7a0b\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_18","title":"\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c","text":"<p>\u9012\u5f52\uff1a</p> <p>\u4e3b\u8981\u662f\u5229\u7528\u524d\u5e8f\u904d\u5386\uff0c\u7136\u540e\u53ea\u8981\u4fdd\u8bc1\u5de6\u5b50\u6811\u5148\u9012\u5f52\u5c31\u884c\uff0c\u800c\u4e14\u6ee1\u8db3\u53f6\u5b50\u7ed3\u70b9\u5373\u53ef\u3002</p> C++<pre><code>class Solution {\npublic:\n    int maxdepth = INT_MIN;\n    int result;\n    void traversal(TreeNode* root, int depth) {\n        if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr){\n            if(depth&gt;maxdepth){\n                maxdepth=depth;\n                result=root-&gt;val;\n}\n}\nif(root-&gt;left) traversal(root-&gt;left,depth+1);\nif(root-&gt;right) traversal(root-&gt;right,depth+1);\nreturn;\n    }\n    int findBottomLeftValue(TreeNode* root) {\n        traversal(root, 0);\n        return result;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> <p>\u8fed\u4ee3\u6cd5\u4e3b\u8981\u4f7f\u7528\u4e86\u961f\u5217\u8fdb\u884c\u5c42\u5e8f\u904d\u5386\u3002</p> C++<pre><code>class Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        queue&lt;TreeNode*&gt; que;\n        if (root != NULL) que.push(root);\n        int result = 0;\n        while (!que.empty()) {\n            int size = que.size();\n            for (int i = 0; i &lt; size; i++) {\n                TreeNode* node = que.front();\n                que.pop();\n                if (i == 0) result = node-&gt;val; // \u8bb0\u5f55\u6700\u540e\u4e00\u884c\u7b2c\u4e00\u4e2a\u5143\u7d20\n                if (node-&gt;left) que.push(node-&gt;left);\n                if (node-&gt;right) que.push(node-&gt;right);\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#112","title":"112.\u8def\u5f84\u603b\u548c","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution{\n    bool find(TreeNode*root,int count){\n        if(!root-&gt;left&amp;&amp;!root-&gt;right&amp;&amp;(count-root-&gt;val)==0){\nreturn true;}\n        if(root-&gt;left){\n            if(find(root-&gt;left,count-root-&gt;val)) return true;\n        }\n        if(root-&gt;right){\n            if(find(root-&gt;right,count-root-&gt;val)) return true;\n        }\n        return false;\n    }\n   public:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        //\u9012\u5f52\n        if(!root) return false;\n        return find(root,targetSum);\n    }\n}\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum){\n        if(root==nullptr) return false;\n        stack&lt;pair&lt;TreeNode*,int&gt;&gt; st;\n        st.push(pair&lt;TreeNode*,int&gt;(root,root-&gt;val));\n        while (!st.empty()) {\n            pair&lt;TreeNode*, int&gt; node = st.top();\n            st.pop();\n            // \u5982\u679c\u8be5\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\u4e86\uff0c\u540c\u65f6\u8be5\u8282\u70b9\u7684\u8def\u5f84\u6570\u503c\u7b49\u4e8etargetSum\uff0c\u90a3\u4e48\u5c31\u8fd4\u56detrue\n            if (!node.first-&gt;left &amp;&amp; !node.first-&gt;right &amp;&amp; targetSum == node.second) return true;\n\n            // \u53f3\u8282\u70b9\uff0c\u538b\u8fdb\u53bb\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5c06\u8be5\u8282\u70b9\u7684\u8def\u5f84\u6570\u503c\u4e5f\u8bb0\u5f55\u4e0b\u6765\n            if (node.first-&gt;right) {\n                st.push(pair&lt;TreeNode*, int&gt;(node.first-&gt;right, node.second + node.first-&gt;right-&gt;val));\n            }\n\n            // \u5de6\u8282\u70b9\uff0c\u538b\u8fdb\u53bb\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5c06\u8be5\u8282\u70b9\u7684\u8def\u5f84\u6570\u503c\u4e5f\u8bb0\u5f55\u4e0b\u6765\n            if (node.first-&gt;left) {\n                st.push(pair&lt;TreeNode*, int&gt;(node.first-&gt;left, node.second + node.first-&gt;left-&gt;val));\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\u4e3b\u8981\u662f\u5f97\u8bb0\u5f55\u4e8c\u53c9\u6811\u8bbf\u95ee\u5230\u6bcf\u4e2a\u8282\u70b9\u4e4b\u540e\u7684\u76ee\u524d\u5230\u8be5\u8282\u70b9\u7684\u8def\u5f84\u603b\u548c\uff0c\u6240\u4ee5\u9700\u8981\u5229\u7528pair\u7c7b\u578b\u8fdb\u884c\u5904\u7406\u8ba1\u7b97\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_19","title":"\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\u6cd5\uff1a</p> C++<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* create(vector&lt;int&gt; inoder,int inoder_begin,int inoder_end,vector&lt;int&gt;postorder,int postorder_begin,int postorder_end){\n        if(postorder_end==postorder_begin) return nullptr;\n        TreeNode* root=new TreeNode(postorder[postorder_end-1]);\n        int i;\n        if(postorder_end-postorder_begin==1) return root;\n        for(i=0;i&lt;inoder.size();i++){\n            if(inoder[i]==postorder[postorder_end-1]){\n                break;\n            }\n        }\n        //\u5207\u5272\u4e2d\u5e8f\u6570\u7ec4\n        int left_inoder_pos_begin=inoder_begin;\n        int left_inoder_pos_end=i;\n        int right_inoder_pos_begin=i+1;\n        int right_inoder_pos_end=inoder_end;\n        //\u5207\u5272\u540e\u5e8f\u6570\u7ec4\n        int left_postnoder_pos_begin=postorder_begin;\n        int left_postnoder_pos_end=postorder_begin+i-inoder_begin;\n        int right_postnoder_pos_begin=postorder_begin+i-inoder_begin;\n        int right_postnoder_pos_end=postorder_end-1;\n        //\u9012\u5f52\u5de6\u5b50\u6811\n        root-&gt;left = create(inoder,left_inoder_pos_begin,left_inoder_pos_end,postorder,left_postnoder_pos_begin,left_postnoder_pos_end);\n        root-&gt;right=create(inoder,right_inoder_pos_begin,right_inoder_pos_end,postorder,right_postnoder_pos_begin,right_postnoder_pos_end);\n        return root;\n\n    }\npublic:\n    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n        if(inorder.size()==0||postorder.size()==0) return nullptr;\n        return create(inorder,0,inorder.size(),postorder,0,postorder.size());\n    }\n};\n</code></pre> <p>\u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u9020\u4e8c\u53c9\u6811</p> C++<pre><code>class Solution {\nprivate:\n        TreeNode* traversal (vector&lt;int&gt;&amp; inorder, int inorderBegin, int inorderEnd, vector&lt;int&gt;&amp; preorder, int preorderBegin, int preorderEnd) {\n        if (preorderBegin == preorderEnd) return NULL;\n\n        int rootValue = preorder[preorderBegin]; // \u6ce8\u610f\u7528preorderBegin \u4e0d\u8981\u75280\n        TreeNode* root = new TreeNode(rootValue);\n\n        if (preorderEnd - preorderBegin == 1) return root;\n\n        int delimiterIndex;\n        for (delimiterIndex = inorderBegin; delimiterIndex &lt; inorderEnd; delimiterIndex++) {\n            if (inorder[delimiterIndex] == rootValue) break;\n        }\n        // \u5207\u5272\u4e2d\u5e8f\u6570\u7ec4\n        // \u4e2d\u5e8f\u5de6\u533a\u95f4\uff0c\u5de6\u95ed\u53f3\u5f00[leftInorderBegin, leftInorderEnd)\n        int leftInorderBegin = inorderBegin;\n        int leftInorderEnd = delimiterIndex;\n        // \u4e2d\u5e8f\u53f3\u533a\u95f4\uff0c\u5de6\u95ed\u53f3\u5f00[rightInorderBegin, rightInorderEnd)\n        int rightInorderBegin = delimiterIndex + 1;\n        int rightInorderEnd = inorderEnd;\n\n        // \u5207\u5272\u524d\u5e8f\u6570\u7ec4\n        // \u524d\u5e8f\u5de6\u533a\u95f4\uff0c\u5de6\u95ed\u53f3\u5f00[leftPreorderBegin, leftPreorderEnd)\n        int leftPreorderBegin =  preorderBegin + 1;\n        int leftPreorderEnd = preorderBegin + 1 + delimiterIndex - inorderBegin; // \u7ec8\u6b62\u4f4d\u7f6e\u662f\u8d77\u59cb\u4f4d\u7f6e\u52a0\u4e0a\u4e2d\u5e8f\u5de6\u533a\u95f4\u7684\u5927\u5c0fsize\n        // \u524d\u5e8f\u53f3\u533a\u95f4, \u5de6\u95ed\u53f3\u5f00[rightPreorderBegin, rightPreorderEnd)\n        int rightPreorderBegin = preorderBegin + 1 + (delimiterIndex - inorderBegin);\n        int rightPreorderEnd = preorderEnd;\n\n        root-&gt;left = traversal(inorder, leftInorderBegin, leftInorderEnd,  preorder, leftPreorderBegin, leftPreorderEnd);\n        root-&gt;right = traversal(inorder, rightInorderBegin, rightInorderEnd, preorder, rightPreorderBegin, rightPreorderEnd);\n\n        return root;\n    }\n\npublic:\n    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) {\n        if (inorder.size() == 0 || preorder.size() == 0) return NULL;\n\n        // \u53c2\u6570\u575a\u6301\u5de6\u95ed\u53f3\u5f00\u7684\u539f\u5219\n        return traversal(inorder, 0, inorder.size(), preorder, 0, preorder.size());\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#654","title":"654.\u6700\u5927\u4e8c\u53c9\u6811","text":"C++<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    TreeNode* digui(vector&lt;int&gt;&amp; nums,int left,int right){//\u5de6\u95ed\u53f3\u5f00\n        //\u7ec8\u6b62\u6761\u4ef6\n        if(left==right) return nullptr;\n        //\u9012\u5f52\u4f53\n        int maxvalue=nums[left];\n        int maxvalueindex=left;\n        //\u627e\u6700\u5927\u7ed3\u70b9\n        for(int i=left+1;i&lt;right;i++){\n            if(nums[i]&gt;maxvalue){\n                maxvalue=nums[i];\n                maxvalueindex=i;\n            }\n        }\n        //\u5212\u5206\u5de6\u53f3\u5b50\u6811\n        TreeNode* root=new TreeNode(0);\n        root-&gt;val=maxvalue;\n        root-&gt;left=digui(nums,left,maxvalueindex);\n        root-&gt;right=digui(nums,maxvalueindex+1,right);\n        return root;\n    }\npublic:\n    TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) {\n        if(nums.size()==0) return nullptr;\n        return digui(nums,0,nums.size());\n    }\n};\n</code></pre> <p>\u4e0a\u9762\u662f\u5141\u8bb8\u7a7a\u8282\u70b9\u8fdb\u5165\u9012\u5f52\u7684\u7b97\u6cd5\u3002</p> <p>\u4e0d\u5141\u8bb8\u7a7a\u8282\u70b9\u8fdb\u5165\u9012\u5f52\u7684\u7b97\u6cd5\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* constructMaximumBinaryTree(vector&lt;int&gt;&amp; nums) {\n        TreeNode* node = new TreeNode(0);\n        if (nums.size() == 1) {\n            node-&gt;val = nums[0];\n            return node;\n        }\n        // \u627e\u5230\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u503c\u548c\u5bf9\u5e94\u7684\u4e0b\u6807\n        int maxValue = 0;\n        int maxValueIndex = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] &gt; maxValue) {\n                maxValue = nums[i];\n                maxValueIndex = i;\n            }\n        }\n        node-&gt;val = maxValue;\n        // \u6700\u5927\u503c\u6240\u5728\u7684\u4e0b\u6807\u5de6\u533a\u95f4 \u6784\u9020\u5de6\u5b50\u6811\n        if (maxValueIndex &gt; 0) {\n            vector&lt;int&gt; newVec(nums.begin(), nums.begin() + maxValueIndex);\n            node-&gt;left = constructMaximumBinaryTree(newVec);\n        }\n        // \u6700\u5927\u503c\u6240\u5728\u7684\u4e0b\u6807\u53f3\u533a\u95f4 \u6784\u9020\u53f3\u5b50\u6811\n        if (maxValueIndex &lt; (nums.size() - 1)) {\n            vector&lt;int&gt; newVec(nums.begin() + maxValueIndex + 1, nums.end());\n            node-&gt;right = constructMaximumBinaryTree(newVec);\n        }\n        return node;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_20","title":"\u5408\u5e76\u4e8c\u53c9\u6811","text":"<p>\u9012\u5f52\uff1a</p> <p>\u524d\u5e8f\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == NULL) return t2; // \u5982\u679ct1\u4e3a\u7a7a\uff0c\u5408\u5e76\u4e4b\u540e\u5c31\u5e94\u8be5\u662ft2\n        if (t2 == NULL) return t1; // \u5982\u679ct2\u4e3a\u7a7a\uff0c\u5408\u5e76\u4e4b\u540e\u5c31\u5e94\u8be5\u662ft1\n        // \u4fee\u6539\u4e86t1\u7684\u6570\u503c\u548c\u7ed3\u6784\n        t1-&gt;val += t2-&gt;val;                             // \u4e2d\n        t1-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);      // \u5de6\n        t1-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);   // \u53f3\n        return t1;\n    }\n};\n</code></pre> <p>\u4e2d\u5e8f\u548c\u540e\u5e8f\u5c31\u662f\u53d8\u6362\u4e00\u4e2a\u4f4d\u7f6e\u800c\u5df2\u3002</p> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == NULL) return t2;\n        if (t2 == NULL) return t1;\n        queue&lt;TreeNode*&gt; que;\n        que.push(t1);\n        que.push(t2);\n        while(!que.empty()) {\n            TreeNode* node1 = que.front(); que.pop();\n            TreeNode* node2 = que.front(); que.pop();\n            // \u6b64\u65f6\u4e24\u4e2a\u8282\u70b9\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0cval\u76f8\u52a0\n            node1-&gt;val += node2-&gt;val;\n\n            // \u5982\u679c\u4e24\u68f5\u6811\u5de6\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u52a0\u5165\u961f\u5217\n            if (node1-&gt;left != NULL &amp;&amp; node2-&gt;left != NULL) {\n                que.push(node1-&gt;left);\n                que.push(node2-&gt;left);\n            }\n            // \u5982\u679c\u4e24\u68f5\u6811\u53f3\u8282\u70b9\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u52a0\u5165\u961f\u5217\n            if (node1-&gt;right != NULL &amp;&amp; node2-&gt;right != NULL) {\n                que.push(node1-&gt;right);\n                que.push(node2-&gt;right);\n            }\n\n            // \u5f53t1\u7684\u5de6\u8282\u70b9 \u4e3a\u7a7a t2\u5de6\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u8d4b\u503c\u8fc7\u53bb\n            if (node1-&gt;left == NULL &amp;&amp; node2-&gt;left != NULL) {\n                node1-&gt;left = node2-&gt;left;\n            }\n            // \u5f53t1\u7684\u53f3\u8282\u70b9 \u4e3a\u7a7a t2\u53f3\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u8d4b\u503c\u8fc7\u53bb\n            if (node1-&gt;right == NULL &amp;&amp; node2-&gt;right != NULL) {\n                node1-&gt;right = node2-&gt;right;\n            }\n        }\n        return t1;\n    }\n};\n</code></pre> <p>\u4e3b\u8981\u5c31\u662f\u4e0a\u8ff0\u4e24\u79cd\u65b9\u6cd5\u5566\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_21","title":"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\nprivate:\n    vector&lt;int&gt; vec;\n    void traversal(TreeNode* root) {\n        if (root == NULL) return;\n        traversal(root-&gt;left);\n        vec.push_back(root-&gt;val); // \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u6709\u5e8f\u6570\u7ec4\n        traversal(root-&gt;right);\n    }\npublic:\n    bool isValidBST(TreeNode* root) {\n        vec.clear(); // \u4e0d\u52a0\u8fd9\u53e5\u5728leetcode\u4e0a\u4e5f\u53ef\u4ee5\u8fc7\uff0c\u4f46\u6700\u597d\u52a0\u4e0a\n        traversal(root);\n        for (int i = 1; i &lt; vec.size(); i++) {\n            // \u6ce8\u610f\u8981\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u641c\u7d22\u6811\u91cc\u4e0d\u80fd\u6709\u76f8\u540c\u5143\u7d20\n            if (vec[i] &lt;= vec[i - 1]) return false;\n        }\n        return true;\n    }\n};\n</code></pre> <p>\u9677\u9631\uff1a\u4e0d\u80fd\u5355\u7eaf\u7684\u6bd4\u8f83\u5de6\u8282\u70b9\u5c0f\u4e8e\u4e2d\u95f4\u8282\u70b9\uff0c\u53f3\u8282\u70b9\u5927\u4e8e\u4e2d\u95f4\u8282\u70b9\u5c31\u5b8c\u4e8b\u4e86\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684\u8981\u6c42\u662f\u5de6\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u5c0f\u4e8e\u6839\u7ed3\u70b9\uff0c\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u5927\u4e8e\u6839\u7ed3\u70b9\u3002</p> C++<pre><code>class Solution {\npublic:\n    long long maxVal = LONG_MIN; // \u56e0\u4e3a\u540e\u53f0\u6d4b\u8bd5\u6570\u636e\u4e2d\u6709int\u6700\u5c0f\u503c\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n\n        bool left = isValidBST(root-&gt;left);\n        // \u4e2d\u5e8f\u904d\u5386\uff0c\u9a8c\u8bc1\u904d\u5386\u7684\u5143\u7d20\u662f\u4e0d\u662f\u4ece\u5c0f\u5230\u5927\n        if (maxVal &lt; root-&gt;val) maxVal = root-&gt;val;\n        else return false;\n        bool right = isValidBST(root-&gt;right);\n\n        return left &amp;&amp; right;\n    }\n};\n</code></pre> C++<pre><code>class Solution {\npublic:\n    TreeNode* pre = NULL; // \u7528\u6765\u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n    bool isValidBST(TreeNode* root) {\n        if (root == NULL) return true;\n        bool left = isValidBST(root-&gt;left);\n\n        if (pre != NULL &amp;&amp; pre-&gt;val &gt;= root-&gt;val) return false;\n        pre = root; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n\n        bool right = isValidBST(root-&gt;right);\n        return left &amp;&amp; right;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        TreeNode* pre = NULL; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) {\n                st.push(cur);\n                cur = cur-&gt;left;                // \u5de6\n            } else {\n                cur = st.top();                 // \u4e2d\n                st.pop();\n                if (pre != NULL &amp;&amp; cur-&gt;val &lt;= pre-&gt;val)\n                return false;\n                pre = cur; //\u4fdd\u5b58\u524d\u4e00\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9\n\n                cur = cur-&gt;right;               // \u53f3\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_22","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\nprivate:\nint result = INT_MAX;\nTreeNode* pre = NULL;\nvoid traversal(TreeNode* cur) {\n    if (cur == NULL) return;\n    traversal(cur-&gt;left);   // \u5de6\n    if (pre != NULL){       // \u4e2d\n        result = min(result, cur-&gt;val - pre-&gt;val);\n    }\n    pre = cur; // \u8bb0\u5f55\u524d\u4e00\u4e2a\n    traversal(cur-&gt;right);  // \u53f3\n}\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        traversal(root);\n        return result;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        TreeNode* pre = NULL;\n        int result = INT_MAX;\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) { // \u6307\u9488\u6765\u8bbf\u95ee\u8282\u70b9\uff0c\u8bbf\u95ee\u5230\u6700\u5e95\u5c42\n                st.push(cur); // \u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u653e\u8fdb\u6808\n                cur = cur-&gt;left;                // \u5de6\n            } else {\n                cur = st.top();\n                st.pop();\n                if (pre != NULL) {              // \u4e2d\n                    result = min(result, cur-&gt;val - pre-&gt;val);\n                }\n                pre = cur;\n                cur = cur-&gt;right;               // \u53f3\n            }\n        }\n        return result;\n    }\n};\n</code></pre> <p>\u8fd9\u51e0\u4e2a\u9898\uff0c\u90fd\u662f\u9700\u8981\u6839\u636e\u641c\u7d22\u6811\u7684\u6027\u8d28\u6765\u6309\u7167\u4e2d\u5e8f\u904d\u5386\u6765\u8fdb\u884c\u5904\u7406\u7684\uff0c\u90fd\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\u4f4d\u7f6e\uff0c\u4ece\u800c\u65b9\u4fbf\u5bfb\u627e\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff0c\u9a8c\u8bc1\u7b49\u95ee\u9898\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_23","title":"\u627e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4f17\u6570","text":"<p>\u9012\u5f52\u6cd5\uff1a</p> C++<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nint count=0;\nint maxCount=0;\nTreeNode* pre=NULL;\nvector&lt;int&gt; result;\nvoid searchNode(TreeNode* cur){\n    if(cur==nullptr) return;\n    searchNode(cur-&gt;left);\n    //irror\n    if(pre==nullptr){\n        count=1;\n    }\n    else if(pre-&gt;val==cur-&gt;val){\n        count++;\n    }\n    else{\n       count=1; \n    }\n    pre=cur;\n    if(count==maxCount){\n        result.push_back(cur-&gt;val);\n    }\n    if(count&gt;maxCount){\n        maxCount=count;\n        result.clear();\n        result.push_back(cur-&gt;val);\n    }\n    searchNode(cur-&gt;right);\n    return;\n}\npublic:\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        result.clear();\n        searchNode(root);\n        return result;\n    }\n};\n</code></pre> C++<pre><code>class Solution {\nprivate:\n\nvoid searchBST(TreeNode* cur, unordered_map&lt;int, int&gt;&amp; map) { // \u524d\u5e8f\u904d\u5386\n    if (cur == NULL) return ;\n    map[cur-&gt;val]++; // \u7edf\u8ba1\u5143\u7d20\u9891\u7387\n    searchBST(cur-&gt;left, map);\n    searchBST(cur-&gt;right, map);\n    return ;\n}\nbool static cmp (const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b) {\n    return a.second &gt; b.second;\n}\npublic:\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        unordered_map&lt;int, int&gt; map; // key:\u5143\u7d20\uff0cvalue:\u51fa\u73b0\u9891\u7387\n        vector&lt;int&gt; result;\n        if (root == NULL) return result;\n        searchBST(root, map);\n        vector&lt;pair&lt;int, int&gt;&gt; vec(map.begin(), map.end());\n        sort(vec.begin(), vec.end(), cmp); // \u7ed9\u9891\u7387\u6392\u4e2a\u5e8f\n        result.push_back(vec[0].first);\n        for (int i = 1; i &lt; vec.size(); i++) {\n            // \u53d6\u6700\u9ad8\u7684\u653e\u5230result\u6570\u7ec4\u4e2d\n            if (vec[i].second == vec[0].second) result.push_back(vec[i].first);\n            else break;\n        }\n        return result;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findMode(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur=root;\n        TreeNode* pre=NULL;\n       int maxCount = 0; // \u6700\u5927\u9891\u7387\n        int count = 0; // \u7edf\u8ba1\u9891\u7387\n        vector&lt;int&gt; result;\n        while(!st.empty()||cur!=nullptr){\n            if(cur!=nullptr){\n                st.push(cur);\n                cur=cur-&gt;left;\n            }\n            else{\n                cur=st.top();\n                st.pop();\n                if (pre == NULL) { // \u7b2c\u4e00\u4e2a\u8282\u70b9\n                    count = 1;\n                } else if (pre-&gt;val == cur-&gt;val) { // \u4e0e\u524d\u4e00\u4e2a\u8282\u70b9\u6570\u503c\u76f8\u540c\n                    count++;\n                } else { // \u4e0e\u524d\u4e00\u4e2a\u8282\u70b9\u6570\u503c\u4e0d\u540c\n                    count = 1;\n                }\n                if (count == maxCount) { // \u5982\u679c\u548c\u6700\u5927\u503c\u76f8\u540c\uff0c\u653e\u8fdbresult\u4e2d\n                    result.push_back(cur-&gt;val);\n                }\n\n                if (count &gt; maxCount) { // \u5982\u679c\u8ba1\u6570\u5927\u4e8e\u6700\u5927\u503c\u9891\u7387\n                    maxCount = count;   // \u66f4\u65b0\u6700\u5927\u9891\u7387\n                    result.clear();     // \u5f88\u5173\u952e\u7684\u4e00\u6b65\uff0c\u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7aresult\uff0c\u4e4b\u524dresult\u91cc\u7684\u5143\u7d20\u90fd\u5931\u6548\u4e86\n                    result.push_back(cur-&gt;val);\n                }\n                pre=cur;\n                cur=cur-&gt;right;\n            }\n\n\n        } \n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_24","title":"\u627e\u4e8c\u53c9\u6811\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u9012\u5f52\uff1a\u7528\u5230\u56de\u6eaf\u601d\u60f3</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root==p||root==q||root==NULL) return root;\n        TreeNode* left=lowestCommonAncestor(root-&gt;left,p,q);\n        TreeNode* right=lowestCommonAncestor(root-&gt;right,p,q);\n        if(left!=NULL&amp;&amp;right!=NULL) return root;\n        if(left!=NULL&amp;&amp;right==NULL) return left;\n        else if(left==NULL&amp;&amp;right!=NULL) return right;\n        else return NULL;\n\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_25","title":"\u627e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\nprivate:\n    TreeNode* traversal(TreeNode* cur, TreeNode* p, TreeNode* q) {\n        if (cur == NULL) return cur;\n                                                        // \u4e2d\n        if (cur-&gt;val &gt; p-&gt;val &amp;&amp; cur-&gt;val &gt; q-&gt;val) {   // \u5de6\n            TreeNode* left = traversal(cur-&gt;left, p, q);\n            if (left != NULL) {\n                return left;\n            }\n        }\n\n        if (cur-&gt;val &lt; p-&gt;val &amp;&amp; cur-&gt;val &lt; q-&gt;val) {   // \u53f3\n            TreeNode* right = traversal(cur-&gt;right, p, q);\n            if (right != NULL) {\n                return right;\n            }\n        }\n        return cur;\n    }\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        return traversal(root, p, q);\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_26","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == NULL) {\n            TreeNode* node = new TreeNode(val);\n            return node;\n        }\n        if (root-&gt;val &gt; val) root-&gt;left = insertIntoBST(root-&gt;left, val);\n        if (root-&gt;val &lt; val) root-&gt;right = insertIntoBST(root-&gt;right, val);\n        return root;\n    }\n};\n</code></pre> C++<pre><code>class Solution {\nprivate:\n    TreeNode* parent;\n    void traversal(TreeNode* cur, int val) {\n        if (cur == NULL) {\n            TreeNode* node = new TreeNode(val);\n            if (val &gt; parent-&gt;val) parent-&gt;right = node;\n            else parent-&gt;left = node;\n            return;\n        }\n        parent = cur;\n        if (cur-&gt;val &gt; val) traversal(cur-&gt;left, val);\n        if (cur-&gt;val &lt; val) traversal(cur-&gt;right, val);\n        return;\n    }\n\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        parent = new TreeNode(0);\n        if (root == NULL) {\n            root = new TreeNode(val);\n        }\n        traversal(root, val);\n        return root;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == NULL) {\n            TreeNode* node = new TreeNode(val);\n            return node;\n        }\n        TreeNode* cur = root;\n        TreeNode* parent = root; // \u8fd9\u4e2a\u5f88\u91cd\u8981\uff0c\u9700\u8981\u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u65e0\u6cd5\u8d4b\u503c\u65b0\u8282\u70b9\n        while (cur != NULL) {\n            parent = cur;\n            if (cur-&gt;val &gt; val) cur = cur-&gt;left;\n            else cur = cur-&gt;right;\n        }\n        TreeNode* node = new TreeNode(val);\n        if (val &lt; parent-&gt;val) parent-&gt;left = node;// \u6b64\u65f6\u662f\u7528parent\u8282\u70b9\u7684\u8fdb\u884c\u8d4b\u503c\n        else parent-&gt;right = node;\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_27","title":"\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if(root==nullptr) return NULL;\n        if(root-&gt;val==key){\n            //1\n            if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr){\n                delete root;\n                return nullptr;\n            }\n            if(root-&gt;left==nullptr&amp;&amp;root-&gt;right){\n                auto ret=root-&gt;right;\n                delete root;\n                return ret;\n            }\n            if(root-&gt;left&amp;&amp;root-&gt;right==nullptr){\n                auto ret1=root-&gt;left;\n                delete root;\n                return ret1;\n            }\n            TreeNode* cur=root-&gt;right;\n            while(cur-&gt;left){\n                cur=cur-&gt;left;\n            }\n            cur-&gt;left=root-&gt;left;\n            auto ret2=root-&gt;right;\n            delete root;\n            return ret2;\n        }\n        if(root-&gt;val&gt;key) root-&gt;left=deleteNode(root-&gt;left,key);\n        if(root-&gt;val&lt;key) root-&gt;right=deleteNode(root-&gt;right,key);\n        return root;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\u6cd5\uff1a</p> C++<pre><code>class Solution {\n    TreeNode* delOneNode(TreeNode*cur){\n        if(cur==nullptr) return nullptr;\n        if(cur-&gt;right==nullptr) return cur-&gt;left;\n        TreeNode* curr = cur-&gt;right;\n        while (curr-&gt;left) {\n            curr = curr-&gt;left;\n        }\n        curr-&gt;left = cur-&gt;left;\n        return cur-&gt;right;\n    }\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        TreeNode* cur=root;\n        TreeNode*pre=nullptr;\n        while(cur){\n            if(cur-&gt;val==key) break;\n            pre=cur;\n            if(cur-&gt;val&gt;key) cur=cur-&gt;left;\n            else cur=cur-&gt;right;\n        }\n        if(pre==nullptr){\n            return delOneNode(cur);\n        }\n        if (pre-&gt;left &amp;&amp; pre-&gt;left-&gt;val == key) {\n            pre-&gt;left = delOneNode(cur);\n        }\n        if (pre-&gt;right &amp;&amp; pre-&gt;right-&gt;val == key) {\n            pre-&gt;right = delOneNode(cur);\n        }\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_28","title":"\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u8fed\u4ee3\uff1a</p> C++<pre><code>TreeNode* trimBST(TreeNode* root, int L, int R) {\n        if (!root) return nullptr;\n\n        // \u5904\u7406\u5934\u7ed3\u70b9\uff0c\u8ba9root\u79fb\u52a8\u5230[L, R] \u8303\u56f4\u5185\uff0c\u6ce8\u610f\u662f\u5de6\u95ed\u53f3\u95ed\n        while (root != nullptr &amp;&amp; (root-&gt;val &lt; L || root-&gt;val &gt; R)) {\n            if (root-&gt;val &lt; L) root = root-&gt;right; // \u5c0f\u4e8eL\u5f80\u53f3\u8d70\n            else root = root-&gt;left; // \u5927\u4e8eR\u5f80\u5de6\u8d70\n        }\n        TreeNode *cur = root;\n        // \u6b64\u65f6root\u5df2\u7ecf\u5728[L, R] \u8303\u56f4\u5185\uff0c\u5904\u7406\u5de6\u5b69\u5b50\u5143\u7d20\u5c0f\u4e8eL\u7684\u60c5\u51b5\n        while (cur != nullptr) {\n            while (cur-&gt;left &amp;&amp; cur-&gt;left-&gt;val &lt; L) {\n                cur-&gt;left = cur-&gt;left-&gt;right;\n            }\n            cur = cur-&gt;left;\n        }\n        cur = root;\n\n        // \u6b64\u65f6root\u5df2\u7ecf\u5728[L, R] \u8303\u56f4\u5185\uff0c\u5904\u7406\u53f3\u5b69\u5b50\u5927\u4e8eR\u7684\u60c5\u51b5\n        while (cur != nullptr) {\n            while (cur-&gt;right &amp;&amp; cur-&gt;right-&gt;val &gt; R) {\n                cur-&gt;right = cur-&gt;right-&gt;left;\n            }\n            cur = cur-&gt;right;\n        }\n        return root;\n    }\n};\n</code></pre> <p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        if (root == nullptr ) return nullptr;\n        if (root-&gt;val &lt; low) {\n            TreeNode* right = trimBST(root-&gt;right, low, high); // \u5bfb\u627e\u7b26\u5408\u533a\u95f4[low, high]\u7684\u8282\u70b9\n            return right;\n        }\n        if (root-&gt;val &gt; high) {\n            TreeNode* left = trimBST(root-&gt;left, low, high); // \u5bfb\u627e\u7b26\u5408\u533a\u95f4[low, high]\u7684\u8282\u70b9\n            return left;\n        }\n        root-&gt;left = trimBST(root-&gt;left, low, high); // root-&gt;left\u63a5\u5165\u7b26\u5408\u6761\u4ef6\u7684\u5de6\u5b69\u5b50\n        root-&gt;right = trimBST(root-&gt;right, low, high); // root-&gt;right\u63a5\u5165\u7b26\u5408\u6761\u4ef6\u7684\u53f3\u5b69\u5b50\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_29","title":"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\nprivate:\n    TreeNode* traversal(vector&lt;int&gt;&amp; nums, int left, int right) {\n        if (left &gt; right) return nullptr;\n        int mid = left + ((right - left) / 2);\n        TreeNode* root = new TreeNode(nums[mid]);\n        root-&gt;left = traversal(nums, left, mid - 1);\n        root-&gt;right = traversal(nums, mid + 1, right);\n        return root;\n    }\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        TreeNode* root = traversal(nums, 0, nums.size() - 1);\n        return root;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 0) return nullptr;\n\n        TreeNode* root = new TreeNode(0);   // \u521d\u59cb\u6839\u8282\u70b9\n        queue&lt;TreeNode*&gt; nodeQue;           // \u653e\u904d\u5386\u7684\u8282\u70b9\n        queue&lt;int&gt; leftQue;                 // \u4fdd\u5b58\u5de6\u533a\u95f4\u4e0b\u6807\n        queue&lt;int&gt; rightQue;                // \u4fdd\u5b58\u53f3\u533a\u95f4\u4e0b\u6807\n        nodeQue.push(root);                 // \u6839\u8282\u70b9\u5165\u961f\u5217\n        leftQue.push(0);                    // 0\u4e3a\u5de6\u533a\u95f4\u4e0b\u6807\u521d\u59cb\u4f4d\u7f6e\n        rightQue.push(nums.size() - 1);     // nums.size() - 1\u4e3a\u53f3\u533a\u95f4\u4e0b\u6807\u521d\u59cb\u4f4d\u7f6e\n\n        while (!nodeQue.empty()) {\n            TreeNode* curNode = nodeQue.front();\n            nodeQue.pop();\n            int left = leftQue.front(); leftQue.pop();\n            int right = rightQue.front(); rightQue.pop();\n            int mid = left + ((right - left) / 2);\n\n            curNode-&gt;val = nums[mid];       // \u5c06mid\u5bf9\u5e94\u7684\u5143\u7d20\u7ed9\u4e2d\u95f4\u8282\u70b9\n\n            if (left &lt;= mid - 1) {          // \u5904\u7406\u5de6\u533a\u95f4\n                curNode-&gt;left = new TreeNode(0);\n                nodeQue.push(curNode-&gt;left);\n                leftQue.push(left);\n                rightQue.push(mid - 1);\n            }\n\n            if (right &gt;= mid + 1) {         // \u5904\u7406\u53f3\u533a\u95f4\n                curNode-&gt;right = new TreeNode(0);\n                nodeQue.push(curNode-&gt;right);\n                leftQue.push(mid + 1);\n                rightQue.push(right);\n            }\n        }\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_30","title":"\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811","text":"<p>\u9012\u5f52\uff1a</p> C++<pre><code>class Solution {\n    int pre=0;\n    void addTree(TreeNode* cur){\n        if(cur==nullptr) return;\n        addTree(cur-&gt;right);\n        cur-&gt;val+=pre;\n        pre=cur-&gt;val;\n        addTree(cur-&gt;left);\n        return;\n    }\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        addTree(root);\n        return root;\n    }\n};\n</code></pre> <p>\u8fed\u4ee3\uff1a</p> C++<pre><code>class Solution {\nprivate:\n    int pre; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6570\u503c\n    void traversal(TreeNode* root) {\n        stack&lt;TreeNode*&gt; st;\n        TreeNode* cur = root;\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) {\n                st.push(cur);\n                cur = cur-&gt;right;   // \u53f3\n            } else {\n                cur = st.top();     // \u4e2d\n                st.pop();\n                cur-&gt;val += pre;\n                pre = cur-&gt;val;\n                cur = cur-&gt;left;    // \u5de6\n            }\n        }\n    }\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        pre = 0;\n        traversal(root);\n        return root;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_31","title":"\u56de\u6eaf\u6cd5\u2014\u2014\u65b0\u7ae0\u8282\uff01\uff01","text":"<p>\u56de\u6eaf\u6cd5\u7684\u7406\u8bba\uff1a</p> <p>\u5176\u5b9e\u56de\u6eaf\u6cd5\u5c31\u662f\u9012\u5f52\u52a0\u6811\uff0cN\u53c9\u6811\uff0c\u4e3b\u8981\u628a\u9700\u8981\u6c42\u89e3\u7684\u95ee\u9898\u96c6\u5408\u770b\u505a\u4e00\u4e2a\u6811\uff0c\u6bcf\u4e00\u6b21\u5728\u9012\u5f52\u4e2d\uff0cfor\u5faa\u73af\u5904\u7406\u7684\u662f\u6a2a\u5411\u904d\u5386\uff0c\u9012\u5f52\u8fdb\u884c\u7684\u662f\u7eb5\u5411\u904d\u5386\uff0c\u5f53\u628a\u6240\u6709\u95ee\u9898\u96c6\u5408\u90fd\u904d\u5386\u5b8c\uff0c\u8fd9\u4e2a\u65f6\u5019\u9012\u5f52\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u7ed3\u679c\u5c31\u662f\u7b54\u6848\u54af\u3002</p> <p>\u9012\u5f52\u4e09\u90e8\u66f2\uff1a\u9012\u5f52\u51fd\u6570\u8fd4\u56de\u503c\u548c\u53c2\u6570\uff0c\u7ec8\u6b62\u6761\u4ef6\uff0c\u9012\u5f52\u5faa\u73af\u4f53\u3002</p> <p>\u4e0a\u9762\u5c31\u662f\u6211\u5927\u81f4\u7406\u89e3\u7684\u56de\u6eaf\u6cd5\u6838\u5fc3\u7406\u8bba\u54af\u3002</p> <p>\u4e0b\u9762\u5c31\u8fdb\u5165\u5230\u56de\u6eaf\u6cd5\u7b97\u6cd5\u7684\u5b66\u4e60\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u3002</p> <p>\u7ec4\u5408\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2ak,n\uff0c\u6709n\u4e2a\u6570\u5b57\uff0c\u53d6\u5176\u4e2dk\u4e2a\u6570\u5b57\uff0c\u6765\u8fdb\u884c\u7ec4\u5408\u3002</p> <p>\u56de\u6eaf\u5c31\u662f\u9012\u5f52\u7684\u6539\u7f16\uff0c\u4e3b\u8981\u662f\u89e3\u51b3\u4e00\u4e9b\u53ea\u80fd\u66b4\u529b\u89e3\u6cd5\u7684\u95ee\u9898\u3002</p> <p>\u7ec4\u5408\uff0c\u7ec4\u5408\u603b\u548c\uff0c\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408\u3002</p> <p>\u6838\u5fc3\u662f\uff1a\u628a\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u62bd\u8c61\u4e3a\u4e00\u4e2an\u53c9\u6811\uff0cfor\u5faa\u73af\u6a2a\u5411\u904d\u5386\uff0c\u9012\u5f52\u7eb5\u5411\u904d\u5386\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#39202464","title":"\u7ec4\u5408\u95ee\u9898\u2014\u2014\u7ec4\u5408\u603b\u548c\uff0c39\u2014\u20142024.6.4","text":"C++<pre><code>class Solution {\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; result;\n    vector&lt;int&gt; path;\n    void backtracking(vector&lt;int&gt;&amp; candidates, int target, int sum, int startIndex) {\n        if (sum &gt; target) {\n            return;\n        }\n        if (sum == target) {\n            result.push_back(path);\n            return;\n        }\n\n        for (int i = startIndex; i &lt; candidates.size(); i++) {\n            sum += candidates[i];\n            path.push_back(candidates[i]);\n            backtracking(candidates, target, sum, i); // \u4e0d\u7528i+1\u4e86\uff0c\u8868\u793a\u53ef\u4ee5\u91cd\u590d\u8bfb\u53d6\u5f53\u524d\u7684\u6570\n            sum -= candidates[i];\n            path.pop_back();\n        }\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        result.clear();\n        path.clear();\n        backtracking(candidates, target, 0, 0);\n        return result;\n    }\n};\n</code></pre> <p>\u526a\u679d\u4f18\u5316</p> C++<pre><code>class Solution {\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; result;\n    vector&lt;int&gt; path;\n    void backtracking(vector&lt;int&gt;&amp; candidates, int target, int sum, int startIndex) {\n        if (sum &gt; target) {\n            return;\n        }\n\n\n        for (int i = startIndex; i &lt; candidates.size()&amp;&amp;sum+candidates[i]&lt;=target; i++) {\n            sum += candidates[i];\n            path.push_back(candidates[i]);\n            backtracking(candidates, target, sum, i); // \u4e0d\u7528i+1\u4e86\uff0c\u8868\u793a\u53ef\u4ee5\u91cd\u590d\u8bfb\u53d6\u5f53\u524d\u7684\u6570\n            sum -= candidates[i];\n            path.pop_back();\n        }\n    }\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\n        result.clear();\n        path.clear();\n        sort(candidates.begin(),candidates.end());\n        backtracking(candidates, target, 0, 0);\n        return result;\n    }\n};\n</code></pre> <p>\u5728\u6c42\u548c\u95ee\u9898\u4e2d\uff0c\u6392\u5e8f\u4e4b\u540e\u52a0\u526a\u679d\u662f\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u64cd\u4f5c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_32","title":"\u5b50\u96c6\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#ip","title":"\u590d\u539fIP\u5730\u5740","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_33","title":"\u56de\u6587\u4e32","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#2_1","title":"\u5b50\u96c62","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_34","title":"\u9012\u589e\u5b50\u5e8f\u5217","text":""},{"location":"%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E3%80%90%E6%89%93%E5%9F%BA%E7%A1%80%E3%80%91/#_35","title":"\u5168\u6392\u5217","text":"<p>\u76f4\u63a5\u7528\u56de\u6eaf\u5373\u53ef\uff0c\u8981\u6ce8\u610f\u5224\u65ad\u54ea\u4e9b\u5143\u7d20\u5df2\u7ecf\u4f7f\u7528\u8fc7\uff0c\u6240\u4ee5\u9700\u8981used\u6570\u7ec4\u6765\u8f85\u52a9\u3002</p> C++<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; result;\n    vector&lt;int&gt; path;\n    void backtracking (vector&lt;int&gt;&amp; nums, vector&lt;bool&gt;&amp; used) {\n        // \u6b64\u65f6\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u7ec4\n        if (path.size() == nums.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (used[i] == true) continue; // path\u91cc\u5df2\u7ecf\u6536\u5f55\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u8df3\u8fc7\n            used[i] = true;\n            path.push_back(nums[i]);\n            backtracking(nums, used);\n            path.pop_back();\n            used[i] = false;\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        result.clear();\n        path.clear();\n        vector&lt;bool&gt; used(nums.size(), false);\n        backtracking(nums, used);\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E5%91%A8%E6%80%BB%E7%BB%93/","title":"\u52a8\u6001\u5468\u603b\u7ed3","text":"<p>\u52a8\u6001\u89c4\u5212\u4e94\u90e8\u66f2\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u4ee5\u53ca\u4e0b\u6807\u7684\u542b\u4e49\u3002</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f</p> <p>3\u3001dp\u6570\u7ec4\u5982\u4f55\u521d\u59cb\u5316</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f</p> <p>5\u3001\u4e3e\u4f8b\u8fdb\u884c\u63a8\u5bfcdp\u6570\u7ec4</p> <p>\u6211\u4eec\u8981\u6ce8\u610f\u5728\u5b66\u4e60\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u6ce8\u91cd\u9012\u63a8\u516c\u5f0f\u7684\u63a8\u5bfc\u548cdp\u6570\u7ec4\u521d\u59cb\u5316\u95ee\u9898\u3002</p> <p>\u5982\u679c\u4ee3\u7801\u5199\u51fa\u6765\u4e86\uff0c\u4e00\u76f4ac\u4e0d\u4e86\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u6ce8\u610f\uff1a</p> <p>1\u3001\u72b6\u6001\u8f6c\u79fb\u516c\u5f0f\u5bf9\u4e86\u4e0d\uff1f</p> <p>2\u3001dp\u6570\u7ec4\u89c4\u5212\u7684\u5185\u5bb9\u662f\u6b63\u786e\u7684\u5417\uff1f</p> <p>\u672c\u5468\u4e3b\u8981\u505a\u4e86\uff1a\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u722c\u697c\u68af\uff0c\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af\u3002</p> <p>\u8fd9\u4e09\u4e2a\u7b97\u6cd5\u7684\u9012\u63a8\u516c\u5f0f\uff0c\u90fd\u662f\u7c7b\u4f3c\u4e8edp[i]=dp[i-1]+dp[i-2]\u7b49\u7b49\u3002</p> <p>\u800c\u4e14\u8fd9\u4e09\u4e2a\u9898\u76ee\u7684\u9012\u63a8\u987a\u5e8f\u90fd\u662f\u4ece\u524d\u5f80\u540e\u3002</p> <p>\u6211\u4eec\u8981\u6ce8\u610f\u8fd9\u4e09\u4e2a\u7b97\u6cd5\u7684\u521d\u59cb\u5316\u6570\u7ec4\uff01</p> <p>\u7279\u522b\u662f\u697c\u68af\u7684\u7b2c\u4e00\u7ea7\u82b1\u8d39\uff0c\u8981\u989d\u5916\u6ce8\u610f\u9898\u76ee\u8981\u6c42\u3002</p> <p>\u603b\u4f53\u4e0a\u8fd9\u4e09\u4e2a\u7b97\u6cd5\u7684\u96be\u5ea6\u4e0d\u5927\u3002</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92--%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/","title":"\u52a8\u6001\u89c4\u5212--\u6253\u5bb6\u52ab\u820d\u7cfb\u5217","text":"<p>\u672c\u6587\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u603b\u7ed3\uff0c\u4ec5\u7528\u4e8e\u4e2a\u4eba\u5b66\u4e60\u603b\u7ed3\u590d\u4e60\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92--%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/#1","title":"\u6253\u5bb6\u52ab\u820d1","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/house-robber/</p> <p>\u601d\u8def\uff1a</p> <p>\u5176\u5b9e\u8fd9\u7c7b\u9898\u76ee\u7684\u5173\u952e\u90fd\u662f\u67d0\u4e2a\u5c4b\u5b50\u5077\u4e0e\u4e0d\u5077\u7684\u533a\u522b\uff0c\u5e76\u4e14\u5728\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u5bfb\u627e\u6700\u5927\u91d1\u989d\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u4e94\u90e8\u66f2\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u5b9a\u4e49\uff0cdp[i]\u8868\u793a\u8003\u8651\u623f\u5c4b\u5e8f\u53f7\u5c0f\u4e8ei\u7684\u623f\u5c4b\uff0c\u6700\u5927\u53ef\u4ee5\u5077\u7684\u91d1\u989d\u3002</p> <p>2\u3001dp\u6570\u7ec4\u7684\u9012\u63a8\u516c\u5f0f\uff1adp\u6570\u7ec4\u53ea\u6709\u5077\u4e0d\u5077\u7684\u9009\u62e9\uff0c\u56e0\u6b64\uff0cdp[i]=max(dp[i-2]+nums[i],dp[i-1]);</p> <p>3\u3001dp\u6570\u7ec4\u521d\u59cb\u5316\uff1adp\u7684\u63a8\u5bfc\u516c\u5f0f\u662f\u53d6\u51b3\u4e8ei-1\uff0ci-2\uff0c\u56e0\u6b64\u521d\u59cb\u5316dp[0]=0,dp[1]=nums[0];</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff1adp[i]\u7684\u53d6\u503c\u53d6\u51b3\u4e8e\u524d\u4e24\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u904d\u5386\u987a\u5e8f\u662f\u4ece\u524d\u5411\u540e\u3002</p> <p>5\u3001\u4e3e\u4f8b\u9a8c\u8bc1\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int rob(vector&lt;int&gt;&amp; nums) {\n         if (nums.size() == 0) return 0;\n        if (nums.size() == 1) return nums[0];\n        vector&lt;int&gt; dp(nums.size(),0);\n        dp[0]=nums[0];\n        dp[1]=max(nums[1],nums[0]);\n        //\u904d\u5386dp\u6570\u7ec4\n        for(int i=2;i&lt;dp.size();i++){\n            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);\n        }\n        return dp[nums.size()-1];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92--%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/#2","title":"\u6253\u5bb6\u52ab\u820d2","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/house-robber-ii/</p> <p>\u601d\u8def\uff1a\u8be5\u9898\u548c\u524d\u9762\u90a3\u4e2a\u9898\u7684\u533a\u522b\u662f\u9996\u5c3e\u76f8\u8fde\uff0c\u56e0\u6b64\u8be5\u9898\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\u3002</p> <ul> <li>\u53ea\u53d6\u9664\u4e86\u9996\u5c3e\u4e24\u4e2a\u5143\u7d20\u7684\u4e2d\u95f4\u7684\u5c4b\u5b50\u7684\u94b1</li> <li>\u53ea\u53d6\u9996\u7aef\u5230nums.size()-2\u4e2d\u95f4\u7684\u4f4d\u7f6e\u7684\u5c4b\u5b50\u7684\u94b1</li> <li>\u53d6\u9664\u4e86\u9996\u7aef\u4e4b\u5916\u7684\u6240\u6709\u623f\u5c4b\u7684\u6700\u9ad8\u91d1\u989d\u3002</li> </ul> <p>\u5176\u5b9e\u540e\u4e24\u79cd\u60c5\u51b5\u90fd\u5305\u542b\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u8003\u8651\u540e\u4e24\u79cd\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u5269\u4f59\u601d\u8def\u548c\u524d\u9762\u9898\u76ee\u7684\u601d\u8def\u7c7b\u4f3c\uff0c\u4e3b\u8981\u533a\u522b\u662f\u6211\u4eec\u9700\u8981\u5c06\u4e24\u79cd\u60c5\u51b5\u90fd\u8fdb\u884c\u8ba1\u7b97\u5e76\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5728\u8ba1\u7b97\u5176\u4e2d\u4e00\u79cd\u60c5\u51b5\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8ba1\u7b97\u548c\u524d\u9762\u4e00\u9898\u4e00\u6837\u7684\u90e8\u5206\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int rob(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 0) return 0;\n        if (nums.size() == 1) return nums[0];\n        int result1 = robRange(nums, 0, nums.size() - 2); // \u60c5\u51b5\u4e8c\n        int result2 = robRange(nums, 1, nums.size() - 1); // \u60c5\u51b5\u4e09\n        return max(result1, result2);\n    }\n    // 198.\u6253\u5bb6\u52ab\u820d\u7684\u903b\u8f91\n    int robRange(vector&lt;int&gt;&amp; nums, int start, int end) {\n        if (end == start) return nums[start];\n        vector&lt;int&gt; dp(nums.size());\n        dp[start] = nums[start];\n        dp[start + 1] = max(nums[start], nums[start + 1]);\n        for (int i = start + 2; i &lt;= end; i++) {\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);\n        }\n        return dp[end];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92--%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/#3","title":"\u6253\u5bb6\u52ab\u820d3","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/house-robber-iii/</p> <p>\u8be5\u9898\u7684\u601d\u8def\u662f\uff1a</p> <p>1\u3001\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u6811\u5f62\u52a8\u6001\u89c4\u5212\u3002</p> <p>2\u3001\u4e3b\u8981\u8003\u8651\u7684\u662f\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u5077\uff0c\u5982\u679c\u9009\u62e9\u5f53\u524d\u8282\u70b9\uff0c\u5219\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u5c31\u65e0\u6cd5\u9009\u62e9\u3002\u5982\u679c\u4e0d\u9009\u62e9\u5f53\u524d\u8282\u70b9\uff0c\u5219\u5de6\u53f3\u8282\u70b9\u90fd\u53ef\u4ee5\u9009\u62e9\u3002\u6700\u540e\u5bf9\u6bd4\u627e\u5230\u6700\u5927\u91d1\u989d\uff0c\u5176\u4ed6\u5730\u65b9\u548c\u524d\u9762\u7c7b\u4f3c\u3002</p> <p>3\u3001\u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u3002</p> <p>4\u3001\u786e\u5b9a\u7ec8\u6b62\u6761\u4ef6</p> <p>5\u3001\u9012\u5f52\u4f53\uff0c\u904d\u5386\u987a\u5e8f</p> <p>6\u3001\u786e\u5b9a\u5355\u5c42\u9012\u5f52\u7684\u903b\u8f91</p> <p>7\u3001\u6ce8\u610f\u904d\u5386\u987a\u5e8f\uff0c\u8be5\u9898\u7684\u904d\u5386\u987a\u5e8f\u9009\u62e9\u540e\u5e8f\u904d\u5386\uff0c\u5373\u5de6\u53f3\u6839\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int rob(TreeNode* root) {\n        vector&lt;int&gt; result = robTree(root);\n        return max(result[0], result[1]);\n    }\n    // \u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4\uff0c0\uff1a\u4e0d\u5077\uff0c1\uff1a\u5077\n    vector&lt;int&gt; robTree(TreeNode* cur) {\n        if (cur == NULL) return vector&lt;int&gt;{0, 0};\n        vector&lt;int&gt; left = robTree(cur-&gt;left);\n        vector&lt;int&gt; right = robTree(cur-&gt;right);\n        // \u5077cur\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u5077\u5de6\u53f3\u8282\u70b9\u3002\n        int val1 = cur-&gt;val + left[0] + right[0];\n        // \u4e0d\u5077cur\uff0c\u90a3\u4e48\u53ef\u4ee5\u5077\u4e5f\u53ef\u4ee5\u4e0d\u5077\u5de6\u53f3\u8282\u70b9\uff0c\u5219\u53d6\u8f83\u5927\u7684\u60c5\u51b5\n        int val2 = max(left[0], left[1]) + max(right[0], right[1]);\n        return {val2, val1};\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92--%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%E7%B3%BB%E5%88%97/#_1","title":"\u603b\u7ed3","text":"<p>\u4e0a\u8ff0\u4e09\u4e2a\u9898\u76ee\u4e3b\u8981\u662f\u5229\u7528\u52a8\u6001\u89c4\u5212\uff0c\u5176\u4e2d\u8fd8\u6709\u8003\u8651\u5230\u6811\u5f62\u9012\u5f52\uff0c\u9996\u5c3e\u76f8\u8fde\u9012\u5f52\u548c\u666e\u901a\u9012\u5f52\uff0c\u6574\u4f53\u4e0a\u5c31\u662f\u8fd9\u4e09\u79cd\u7c7b\u578b\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/","title":"\u52a8\u6001\u89c4\u5212-\u4e0d\u540c\u8def\u5f84","text":"<p>\u529b\u6263\u5bf9\u5e94\u9898\u76ee\u7684\u94fe\u63a5\uff1a</p> <p>https://leetcode.cn/problems/unique-paths/description/</p> <p>\u89e3\u7684\u4ee3\u7801\uff1a</p> Text Only<pre><code>int uniquePaths(int m, int n) {\n        vector&lt;vector&lt;int&gt;&gt; dp(m,vector&lt;int&gt;(n,0));\n        for(int i=0;i&lt;m;i++){\n            dp[i][0]=1;\n        }\n        for(int j=0;j&lt;n;j++){\n            dp[0][j]=1;\n        }\n        for(int i=1;i&lt;m;i++){\n            for(int j=1;j&lt;n;j++){\n                dp[i][j]=dp[i][j-1]+dp[i-1][j];\n            }\n        }\n        return dp[m-1][n-1];\n    }\n</code></pre> <p>\u9898\u76ee\u793a\u4f8b\uff1a</p> <p></p> <p>\u8fd9\u9053\u9898\u76ee\u8981\u6c42\u6c42\u89e3\u673a\u5668\u4eba\u4ece\u5de6\u4e0a\u89d2\u5230\u8fbe\u53f3\u4e0b\u89d2\u4e94\u89d2\u661f\u4f4d\u7f6e\u7684\u6240\u6709\u8d70\u7684\u8def\u5f84\u603b\u6570\u3002</p> <p>\u9047\u5230\u8fd9\u79cd\u5728\u7f51\u683c\u4e2d\u79fb\u52a8\u6c42\u89e3\u603b\u6570\u7684\u95ee\u9898\uff0c\u4e00\u822c\u6709\u6df1\u5ea6\u641c\u7d22\uff0c\u52a8\u6001\u89c4\u5212\uff0c\u6570\u8bba\u8fd9\u51e0\u79cd\u65b9\u6cd5\u3002</p> <p>\u5728\u8fd9\u91cc\u6211\u7740\u91cd\u590d\u76d8\u6211\u4e2a\u4eba\u505a\u8fd9\u4e2a\u9898\u7684\u52a8\u6001\u89c4\u5212\u601d\u8def\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_1","title":"\u601d\u8def","text":"<p>\u9996\u5148\uff0c\u673a\u5668\u4eba\u5f00\u59cb\u80fd\u9009\u62e9\u7684\u662f\u4ece\u53f3\u6216\u8005\u4ece\u4e0b\u8d70\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0c\u8981\u80fd\u591f\u770b\u51fa\u6765\u673a\u5668\u4eba\u5728\u7b2c\u4e00\u884c\uff0c\u548c\u7b2c\u4e00\u5217\u8d70\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u7684\u8def\u5f84\u65b9\u6cd5\u90fd\u53ea\u4f9d\u8d56\u4e8e\u5de6\u8fb9\u7684\u8def\uff0c\u6216\u8005\u4e0a\u9762\u7684\u8def\uff0c\u90fd\u53ea\u4f9d\u8d56\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u800c\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5219\u9700\u8981\u4f9d\u8d56\u683c\u5b50\u5de6\u8fb9\u548c\u4e0a\u8fb9\u7684\u8def\u5f84\u603b\u548c\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u8fd9\u4e2a\u9898\u7684\u60c5\u51b5\u9700\u8981\u8003\u8651\u4e09\u79cd\u3002</p> <p>1\u3001\u7b2c\u4e00\u884c\uff0c\u673a\u5668\u4eba\u4e00\u76f4\u5411\u53f3\u8d70\uff0c\u7b2c\u4e00\u884c\u6bcf\u4e2a\u5143\u7d20\u7684\u8def\u5f84\u6570\u90fd\u4e3a1.</p> <p>2\u3001\u7b2c\u4e00\u5217\uff0c\u673a\u5668\u4eba\u4e00\u76f4\u5411\u4e0b\u8d70\uff0c\u7b2c\u4e00\u5217\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u8def\u5f84\u6570\u90fd\u4e3a1.</p> <p>3\u3001\u5176\u4f59\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u683c\u5b50\u7684dp[i][j]=dp[i-1][j]+dp[i][j-1];</p> <p>\u8fd9\u4e2a\u5730\u65b9\u7684dp\u6570\u7ec4\u8868\u793a\u7f51\u683c\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u8def\u5f84\u603b\u548c\uff0cdp[i][j]\u8868\u793a\u673a\u5668\u4eba\u5230\u8fbei,j\u5750\u6807\u53ef\u4ee5\u9009\u62e9\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u6570\u603b\u548c\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff0c\u5e76\u5c06\u524d\u4e24\u79cd\u60c5\u51b5\u8fdb\u884c\u5355\u72ec\u7684for\u5faa\u73af\u5c31\u53ef\u4ee5\u5b9e\u73b0\u521d\u59cb\u5316\u3002</p> <p>\u5176\u4f59\u4f4d\u7f6e\u8fdb\u884c\u4e24\u5c42for\u5faa\u73af\uff0c\u5d4c\u5957\u8fd0\u884c\u5373\u53ef\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#ending","title":"ending\uff01\uff01","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#-2","title":"\u52a8\u6001\u89c4\u5212-\u4e0d\u540c\u8def\u5f842","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/unique-paths-ii/</p> <p>\u9898\u76ee\u7b54\u6848\u4ee3\u7801\uff1a</p> C++<pre><code>int uniquePathsWithObstacles(vector&lt;vector&lt;int&gt;&gt;&amp; obstacleGrid) {\n        int m=obstacleGrid.size();\n        int n=obstacleGrid[0].size();\n        if (obstacleGrid[m-1][n-1] == 1 || obstacleGrid[0][0] == 1) //\u5982\u679c\u5728\u8d77\u70b9\u6216\u7ec8\u70b9\u51fa\u73b0\u4e86\u969c\u788d\uff0c\u76f4\u63a5\u8fd4\u56de0\n            return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(m,vector&lt;int&gt;(n,0));\n\n        for(int i=0;i&lt;m&amp;&amp;obstacleGrid[i][0]==0;i++) dp[i][0]=1;\n        for(int j=0;j&lt;n&amp;&amp;obstacleGrid[0][j]==0;j++) dp[0][j]=1;\n        for(int i=1;i&lt;m;i++){\n            for(int j=1;j&lt;n;j++){\n                if (obstacleGrid[i][j] == 1) continue;\n                    dp[i][j]=dp[i-1][j]+dp[i][j-1];\n\n            }\n        }\n        return dp[m-1][n-1];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_2","title":"\u9898\u76ee\u63cf\u8ff0\uff1a","text":"<p>\u8be5\u9898\u76ee\u4e0e\u524d\u9762\u4e00\u4e2a\u9898\u76ee\u7684\u533a\u522b\u5728\u4e8e\uff0c\u8be5\u9898\u7684\u7f51\u683c\u8def\u5f84\u4e0a\u51fa\u73b0\u4e86\u969c\u788d\u7269\u3002</p> <p>\u56e0\u6b64\u9700\u8981\u5bf9\u969c\u788d\u7269\u8fdb\u884c\u7279\u6b8a\u5904\u7406\u3002</p> <p>\u5728\u969c\u788d\u7269\u7684\u4f4d\u7f6e\u7684dp\u6570\u7ec4\u7684\u503c\u80af\u5b9a\u4e3a0\uff0c\u56e0\u4e3a\u969c\u788d\u7269\u4f1a\u5f71\u54cd\u5b83\u65c1\u8fb9\u7684\u683c\u5b50\u7684\u8def\u5f84\u3002</p> <p>\u56e0\u6b64\u9700\u8981\u8003\u8651\u4e09\u79cd\u60c5\u51b5\uff1a</p> <p></p> <p>\u4ee5\u4e0a\u5c31\u662f\u672c\u9898\u5728\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u4e4b\u524d\u9700\u8981\u8fdb\u884c\u8003\u8651\u7684dp\u6570\u7ec4\u63a8\u5bfc\u516c\u5f0f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_3","title":"\u521d\u59cb\u5316","text":"<p>\u521d\u59cb\u5316\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u4e3a\u6240\u6709\u683c\u5b50\u4e3a0\u5373\u53ef\uff0c\u540e\u7eed\u9700\u8981\u66f4\u6539\u8fdb\u884c\u5bf9\u5e94\u66f4\u6539\u5373\u53ef\uff0c\u800c\u4e140\u53ef\u4ee5\u7701\u53bb\u4e0a\u9762\u7684\u4e00\u4e9b\u60c5\u51b5\u7684\u8d4b\u503c\u8fc7\u7a0b\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_4","title":"\u63a8\u5bfc\u987a\u5e8f","text":"<p>\u628a\u4e0a\u8ff0\u4e09\u79cd\u60c5\u51b5\u8fdb\u884c\u6a21\u62df\u5373\u53ef\u3002</p> <p>\u7b2c\u4e09\u79cd\u60c5\u51b5\u5728\u4ee3\u7801\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6574\u5408\u4e3a\u4e00\u53e5\u4ee3\u7801\uff0c\u4e0a\u8ff0\u5206\u4e3a\u4e09\u79cd\u4e3b\u8981\u662f\u65b9\u4fbf\u8bfb\u8005\u8003\u8651\u5168\u9762\u3002</p> <p><code>if (obstacleGrid[i][j] == 0) dp[i][j]=dp[i-1][j]+dp[i][j-1];</code></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_5","title":"\u540e\u7eed","text":"<p>\u540e\u7eed\u5c31\u662f\u4e00\u4e9b\u4ee3\u7801\u7684\u5b9e\u73b0\u548c\u76f8\u5173\u5faa\u73af\u5373\u53ef\u3002</p> <p>\u8282\u7701\u5185\u5b58\u7a7a\u95f4\u7684\u4ee3\u7801\u5c55\u793a\uff0c\u4e3b\u8981\u662f\u53d6\u81ea\u4ee3\u7801\u968f\u60f3\u5f55\u7684carl\u8001\u5e08\u7684\u4ee3\u7801\uff0c\u6709\u9700\u8981\u53ef\u4ee5\u81ea\u884c\u524d\u5f80\u67e5\u770b\u3002</p> <p>\u4e0d\u540c\u8def\u5f842</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/#_6","title":"\u603b\u7ed3","text":"<p>\u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u6ce8\u610f\u7ec6\u8282\u548c\u521d\u59cb\u5316\u90e8\u5206\uff0c\u4ee5\u53ca\u5728\u9047\u5230\u969c\u788d\u7269\u4e4b\u540e\uff0c\u9700\u8981\u8fdb\u884c\u4ec0\u4e48\u5904\u7406\u7b49\u8fd9\u4e9b\u65b9\u9762\uff0c\u8981\u8003\u8651\u5168\u9762\u3002</p> <p>ending!!!</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","title":"\u52a8\u6001\u89c4\u5212\u20140-1\u80cc\u5305\u95ee\u9898","text":"<p>\u5b66\u4e60\u4ee3\u7801\u968f\u60f3\u5f55\u76f8\u5173\u52a8\u6001\u89c4\u5212\u7684\u603b\u7ed3</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_1","title":"\u7528\u4e00\u7ef4\u52a8\u6001\u6570\u7ec4","text":"C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main(){\n    int M,N;\n    //N\u662f\u80cc\u5305\u5bb9\u91cf\n    cin&gt;&gt;M&gt;&gt;N;\n    //\u521d\u59cb\u5316cost,weight\n    vector&lt;int&gt; cost(M);\n    vector&lt;int&gt; values(N);\n    for(int i=0;i&lt;M;i++){\n        cin&gt;&gt;cost[i];\n    }\n    for(int i=0;i&lt;M;i++){\n        cin&gt;&gt;values[i];\n    }\n    //\u904d\u5386dp\u6570\u7ec4\uff0c\u5e76\u8fdb\u884c\u76f8\u5173\u7684\u521d\u59cb\u5316\u548c\u63a8\u5bfc\n    vector&lt;int&gt; dp(N+1,0);\n    for(int i=0;i&lt;M;i++){\n        for(int j=N;N&gt;=cost[i];N--){\n            dp[j]=max(dp[j],dp[j-cost[i]]+value[i]);\n        }\n    }\n    cout&lt;&lt;dp[N]&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u8be5\u65b9\u6cd5\u662f\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u6765\u8fdb\u884c\u76f8\u5173\u7684dp\u6570\u7ec4\u904d\u5386\uff0c\u5b9e\u73b00-1\u80cc\u5305\u7684\u52a8\u6001\u89c4\u5212\u3002</p> <p>\u6574\u4f53\u601d\u8def\u4e3b\u8981\u70b9\u662fdp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c\u548c\u5bf9\u5e94\u6570\u7ec4\u7684\u4e0b\u6807\u548c\u5185\u5bb9\u7684\u7406\u89e3\uff0c\u4ee5\u53cadp\u6570\u7ec4\u7684\u63a8\u5bfc</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_2","title":"\u7528\u4e8c\u7ef4\u52a8\u6001\u6570\u7ec4","text":"<p>\u4ee3\u7801\uff1a</p> <p>\u5f15\u7528\u81eacarl\u7684\u4ee3\u7801\u968f\u60f3\u5f55\uff1ahttps://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html#%E6%80%9D%E8%B7%AF</p> C++<pre><code>//\u4e8c\u7ef4dp\u6570\u7ec4\u5b9e\u73b0\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, bagweight;// bagweight\u4ee3\u8868\u884c\u674e\u7bb1\u7a7a\u95f4\nvoid solve() {\n    vector&lt;int&gt; weight(n, 0); // \u5b58\u50a8\u6bcf\u4ef6\u7269\u54c1\u6240\u5360\u7a7a\u95f4\n    vector&lt;int&gt; value(n, 0);  // \u5b58\u50a8\u6bcf\u4ef6\u7269\u54c1\u4ef7\u503c\n    for(int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; weight[i];\n    }\n    for(int j = 0; j &lt; n; ++j) {\n        cin &gt;&gt; value[j];\n    }\n    // dp\u6570\u7ec4, dp[i][j]\u4ee3\u8868\u884c\u674e\u7bb1\u7a7a\u95f4\u4e3aj\u7684\u60c5\u51b5\u4e0b,\u4ece\u4e0b\u6807\u4e3a[0, i]\u7684\u7269\u54c1\u91cc\u9762\u4efb\u610f\u53d6,\u80fd\u8fbe\u5230\u7684\u6700\u5927\u4ef7\u503c\n    vector&lt;vector&lt;int&gt;&gt; dp(weight.size(), vector&lt;int&gt;(bagweight + 1, 0));\n\n    // \u521d\u59cb\u5316, \u56e0\u4e3a\u9700\u8981\u7528\u5230dp[i - 1]\u7684\u503c\n    // j &lt; weight[0]\u5df2\u5728\u4e0a\u65b9\u88ab\u521d\u59cb\u5316\u4e3a0\n    // j &gt;= weight[0]\u7684\u503c\u5c31\u521d\u59cb\u5316\u4e3avalue[0]\n    for (int j = weight[0]; j &lt;= bagweight; j++) {\n        dp[0][j] = value[0];\n    }\n\n    for(int i = 1; i &lt; weight.size(); i++) { // \u904d\u5386\u79d1\u7814\u7269\u54c1\n        for(int j = 0; j &lt;= bagweight; j++) { // \u904d\u5386\u884c\u674e\u7bb1\u5bb9\u91cf\n            // \u5982\u679c\u88c5\u4e0d\u4e0b\u8fd9\u4e2a\u7269\u54c1,\u90a3\u4e48\u5c31\u7ee7\u627fdp[i - 1][j]\u7684\u503c\n            if (j &lt; weight[i]) dp[i][j] = dp[i - 1][j];\n            // \u5982\u679c\u80fd\u88c5\u4e0b,\u5c31\u5c06\u503c\u66f4\u65b0\u4e3a \u4e0d\u88c5\u8fd9\u4e2a\u7269\u54c1\u7684\u6700\u5927\u503c \u548c \u88c5\u8fd9\u4e2a\u7269\u54c1\u7684\u6700\u5927\u503c \u4e2d\u7684 \u6700\u5927\u503c\n            // \u88c5\u8fd9\u4e2a\u7269\u54c1\u7684\u6700\u5927\u503c\u7531\u5bb9\u91cf\u4e3aj - weight[i]\u7684\u5305\u4efb\u610f\u653e\u5165\u5e8f\u53f7\u4e3a[0, i - 1]\u7684\u6700\u5927\u503c + \u8be5\u7269\u54c1\u7684\u4ef7\u503c\u6784\u6210\n            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n        }\n    }\n    cout &lt;&lt; dp[weight.size() - 1][bagweight] &lt;&lt; endl;\n}\n\nint main() {\n    while(cin &gt;&gt; n &gt;&gt; bagweight) {\n        solve();\n    }\n    return 0;\n}\n</code></pre> <p>\u6574\u4f53\u601d\u8def\u90fd\u662f\u8981\u6ce8\u610fdp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c\u542b\u4e49\uff0c\u9012\u63a8\u516c\u5f0f\u548c\u9012\u63a8\u987a\u5e8f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_3","title":"\u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/partition-equal-subset-sum/description/</p> <p>\u601d\u8def\uff1a</p> <p>\u5c06\u672c\u9898\u7406\u89e3\u62100-1\u80cc\u5305\u95ee\u9898\uff0c\u5e76\u5c06\u76f8\u5173\u5185\u5bb9\u8fdb\u884c\u8f6c\u6362\uff0c\u5957\u7528\u52300-1\u80cc\u5305\u95ee\u9898\u4e0a\u7684\u89e3\u51b3\u65b9\u6cd5\u4e0a\u6765\u3002</p> <p>\u5176\u5b9e\u5c31\u662f\u627e\u5230\u96c6\u5408\u91cc\u9762\u51fa\u73b0\u603b\u548c/2\u7684\u5b50\u96c6\u603b\u548c\uff0c\u53ea\u8981\u627e\u5230\u4e86\uff0c\u5c31\u8bf4\u660e\u80fd\u591f\u5206\u6210\u76f8\u540c\u7684\u5b50\u96c6\uff0c\u53cd\u4e4b\u5219\u4e0d\u80fd\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#0-1_1","title":"0-1\u80cc\u5305\u95ee\u9898\u7684\u6a21\u677f","text":"<ol> <li>\u786e\u5b9adp\u6570\u7ec4\u542b\u4e49\uff0cdp[i]\u8868\u793a\u80cc\u5305\u6700\u5927\u5bb9\u91cf\u4e3ai\uff0c\u4e14dp[i]\u4ee3\u8868\u5f53\u524d\u5bb9\u91cf\u7684\u80cc\u5305\u7684\u7269\u54c1\u7684\u4ef7\u503c</li> <li>\u786e\u5b9adp\u9012\u63a8\u516c\u5f0f\uff1adp[i]=max(dp[i],dp[i-weight[j]]+values[j])</li> <li>\u521d\u59cb\u5316\uff0c\u4e00\u822c\u90fd\u6784\u5efa\u4e00\u4e2a\u6700\u5927\u5bb9\u91cf\u7684\u6570\u91cf\u7684dp\u6570\u7ec4\u7684size\uff0c\u521d\u59cb\u5316\u4e3a0</li> <li>\u9012\u63a8\u987a\u5e8f\uff0c\u4e8c\u7ef4\uff1a\u5916\u5c42\u80cc\u5305\u5bb9\u91cf\uff0c\u5185\u5c42\u904d\u5386\u7269\u54c1</li> <li>\u4e3e\u4f8b\u63a8\u5bfc\uff1a\u81ea\u884c\u63a8\u5bfc\u3002</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_4","title":"\u5957\u7528\u6a21\u677f","text":"<p>\u672c\u9898\u5f88\u660e\u663e\u9700\u8981\u627e\u5230\u662f\u5426\u5728target\u4e3asum/2\u7684\u65f6\u5019\u88c5\u6ee1\u3002</p> <ol> <li>dp\u6570\u7ec4\uff0c\u5b9a\u4e49\u4e3a\u4e00\u7ef4\u6570\u7ec4\uff0cdp[i]\u8868\u793a\uff0c\u5f53\u524d\u80cc\u5305\u80fd\u586b\u8fdb\u53bb\u6700\u5927\u603b\u548c\u4e3ai\u7684\u6570\u5b57\u96c6\u5408\u7684\u548c\uff0ci\u8868\u793a\u5f53\u524d\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u7684\u6570\u5b57\u548c</li> <li>dp\u9012\u63a8\u516c\u5f0f\uff1adp[i]=max(dp[i],dp[i-cost[j]]+weight[j])\uff0c\u8be5\u9898\u4e2d\uff0c\u6bcf\u4e2a\u6570\u5b57\u7684\u5bb9\u91cf\u548c\u5bf9\u5e94\u7684\u4ef7\u503c\u90fd\u76f8\u540c\uff0c\u5373cost[i]=weight[i]\uff0c\u800c\u5f53\u524d\u6bcf\u4e00\u6b65\u90fd\u5b58\u5728\u53d6\u4e0d\u53d6\u5f53\u524d\u7684\u6570\u5b57\uff0c\u9009\u62e9\u4e0d\u53d6\u5c31\u662f\u539f\u6765\u7684\u503c\uff0c\u9009\u62e9\u53d6\u5219\u662f\u5f53\u524d\u524d\u9762\u7684\u6570\u7ec4dp\u51cf\u53bb\u8981\u53d6\u7684\u5143\u7d20\u7684\u6700\u5927\u548c\u518d\u52a0\u4e0a\u5f53\u524d\u53d6\u7684\u5143\u7d20\u7684\u5927\u5c0f</li> <li>\u521d\u59cb\u5316\uff1acost\uff0cweight\uff0c\u76f4\u63a5\u521d\u59cb\u5316\u4e3a\u9898\u76ee\u9ed8\u8ba4\u7684\u51fd\u6570\u7684\u5143\u7d20\u5927\u5c0f,dp\u6570\u7ec4\u521d\u59cb\u5316\u4e3a0\u5373\u53ef\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a\u6240\u6709\u6570\u7ec4\u5927\u5c0f\u603b\u548c+1\u5373\u53ef</li> <li>\u904d\u5386\u987a\u5e8f\uff1a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6240\u4ee5\u5148\u904d\u5386\u7269\u54c1\uff0c\u518d\u904d\u5386\u80cc\u5305</li> <li>\u81ea\u884c\u4e3e\u4f8b\u63a8\u5bfc</li> </ol> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>bool canPartition(vector&lt;int&gt;&amp; nums) {\n        int sum=0;\n        for(int i=0;i&lt;nums.size();i++){\n            sum+=nums[i];\n        }\n        vector&lt;int&gt; dp(10001,0);\n        if(sum%2==1) return false;\n        int target_1=sum/2;\n        //0-1\u80cc\u5305\u5faa\u73af\u5373\u53ef\n        for(int i=0;i&lt;nums.size();i++){\n            for(int target=target_1;target&gt;=nums[i];target--){\n                dp[target]=max(dp[target],dp[target-nums[i]]+nums[i]);\n            }\n        }\n        //\u5982\u679c\u5b58\u5728dp[target_1]==target_1\uff0c\u5219\u8fd4\u56detrue\n        if(target_1==dp[target_1]) return true;\n        return false;\n\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#ii","title":"\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf\u2161","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/last-stone-weight-ii/</p> <p>\u601d\u8def\uff1a\u6b64\u9898\u548c\u4e0a\u9762\u9898\u7684\u601d\u8def\u76f8\u540c\uff0c\u90fd\u662f\u5957\u75280-1\u80cc\u5305\u7406\u8bba\u8fdb\u884c\u63a8\u5bfc\u5373\u53ef\u3002</p> <p>0-1\u6a21\u677f\uff1a\u89c1\u4e0a\u4e00\u9898</p> <p>\u5957\u7528\u6a21\u677f\uff1a\u4e0e\u4e0a\u4e00\u9898\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8981\u6ce8\u610fdp\u6570\u7ec4\u7684\u542b\u4e49\uff0cdp[i]\u8868\u793a\u5bb9\u91cf\u4e3ai\u7684\u80cc\u5305\uff0c\u6700\u591a\u80fd\u591f\u80cc\u7684\u91cd\u91cf\u4e3adp[i]\u8868\u793a\u3002</p> <p>\u201c\u6700\u591a\u53ef\u4ee5\u88c5\u7684\u4ef7\u503c\u4e3a dp[j]\u201d == \u201c\u6700\u591a\u53ef\u4ee5\u80cc\u7684\u91cd\u91cf\u4e3adp[j]\u201d\u3002</p> <p>\u5176\u4ed6\u90e8\u5206\u90fd\u76f8\u4f3c\u3002</p> <p>\u5176\u5b9e\u6c42\u89e3\u6700\u540e\u5269\u4f59\u77f3\u5934\u5927\u5c0f\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u77f3\u5934\u8fdb\u884c\u603b\u91cd\u91cf\u9664\u4ee5\u4e8c\u8fdb\u884c\u5bf9\u79f0\u78b0\u649e\u6d88\u9664\uff0c\u6700\u540e\u5269\u4f59\u7684\u77f3\u5934\u5927\u5c0f\u91cd\u91cf\uff0c\u5373</p> <p>sum-dp[target]   -   dp[target]. target=sum/2.target\u662f\u5411\u4e0b\u53d6\u6574\uff0c dp[target]&lt;sum/2\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int lastStoneWeightII(vector&lt;int&gt;&amp; stones) {\n        vector&lt;int&gt; dp(15001,0);\n        int sum=0;\n        for(int i=0;i&lt;stones.size();i++) sum+=stones[i];\n        int target=sum/2;\n        //\u904d\u5386\u77f3\u5934\n        for(int i=0;i&lt;stones.size();i++){\n            //\u904d\u5386\u88c5\u77f3\u5934\u7684\u80cc\u5305\n            for(int j=target;j&gt;=stones[i];j--){\n                dp[j]=max(dp[j],dp[j-stones[i]]+stones[i]);\n            }\n        }\n        //\u8fd4\u56de\u7ed3\u679c\n        return (sum-dp[target])-dp[target];\n    }\n</code></pre> <p>\u4e0a\u8ff0\u90e8\u5206\u5373\u53ef\u5f97\u5f53\u524d\u77f3\u5934\u6d88\u9664\u4e4b\u540e\u7684\u5f97\u5230\u7684\u77f3\u5934\u5927\u5c0f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#tips","title":"tips,\u5c0f\u79d1\u666e","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E2%80%940-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#ending","title":"ending!!!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/","title":"\u52a8\u6001\u89c4\u5212\u5408\u96c6","text":"<p>\u672c\u5408\u96c6\u6240\u6709\u9898\u76ee\u5747\u6765\u81ealeetcode\uff0c\u76f8\u5173\u89e3\u6cd5\u662f\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55carl\u8001\u5e08\u601d\u8def\u7684\u4e2a\u4eba\u603b\u7ed3\u548c\u63d0\u70bc\uff0c\u4ec5\u7528\u4e8e\u5b66\u4e60\u9014\u5f84\u3002</p> <p>\u9012\u5f52\u4e94\u516c\u5f0f\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u542b\u4e49\u53ca\u5176\u4e0b\u6807\u542b\u4e49</p> <p>2\u3001\u786e\u5b9adp\u6570\u7ec4\u9012\u63a8\u516c\u5f0f</p> <p>2\u3001\u521d\u59cb\u5316dp\u6570\u7ec4</p> <p>3\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f</p> <p>4\u3001\u4e3e\u4f8b\u8fdb\u884c\u63a8\u5bfcdp\u6570\u7ec4</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_2","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217","text":"<p>\u9898\u76ee\u8981\u6c42\u5f88\u7b80\u5355\uff0c\u65e0\u9700\u591a\u8a00\u3002</p> <p>1\u3001dp\u6570\u7ec4\u8868\u793a\u5bf9\u5e94\u5143\u7d20\u5927\u5c0f</p> <p>2\u3001\u9012\u63a8\u516c\u5f0f:dp[i]=dp[i-1]+dp[i-2];</p> <p>3\u3001\u521d\u59cb\u5316dp\u6570\u7ec4\uff1adp[0]=0,dp[1]=1;</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff1a\u5f88\u660e\u663e\u662f\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u904d\u5386\uff0c\u4ece0,1-\u300b2\uff0c3.\u3002\u3002</p> <p>5\u3001\u76f4\u63a5\u8fdb\u884c\u904d\u5386\u63a8\u5bfc\u5457</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int fib(int n){\n    if(n&lt;=1) return n;\n    int dp[2];\n    dp[0]=0;\n    dp[1]=1;\n    for(int i=2;i&lt;=n;i++){\n        int sum=dp[0]+dp[1];\n        dp[0]=dp[1];\n        dp[1]=sum;\n}\n    return dp[1];\n\n}\n</code></pre> <p>ending!!!!!!!!!!!!</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_3","title":"\u722c\u697c\u68af","text":"<p>\u601d\u8def\uff1a</p> <p>\u722c\u697c\u68af\u95ee\u9898\uff0c\u5176\u5b9e\u5c31\u662f\u521d\u59cbdp\u6570\u7ec4\uff0c\u7136\u540edp\u6570\u7ec4\u7684\u9012\u63a8\u516c\u5f0f\u5982\u4e0b\uff1a</p> <p>dp[i]=dp[i-1]+dp[i-2];</p> <p>\u9012\u63a8\u987a\u5e8f\uff1a\u5f88\u660e\u663e\u4ece\u524d\u5f80\u540e\u3002</p> <p>\u7136\u540e\u5c31\u662ffor\u5faa\u73af\u8fdb\u884c\u9012\u63a8\u904d\u5386\u54af\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int climbStairs(int n) {\n        if(n&lt;=1) return n;\n        int dp[3];\n        dp[1]=1;\n        dp[2]=2;\n        for(int i=3;i&lt;=n;i++){\n            int sum=dp[1]+dp[2];\n            dp[1]=dp[2];\n            dp[2]=sum;\n        }\n        return dp[2];\n    }\n</code></pre> <p>\u603b\u7ed3\uff1a</p> <p>\u4ee5\u4e0a\u5c31\u662f\u76f8\u5173\u722c\u697c\u68af\u95ee\u9898\u7684\u89e3\u6cd5\uff0c\u5176\u5b9e\u8fd9\u4e2a\u65b9\u6cd5\u601d\u8def\u4e5f\u53ef\u4ee5\u5e94\u7528\u5230\uff0c\u722c\u4e00\u5c42\u697c\u4e00\u6b21\u4e00\u6b65\uff0c\uff0c\u4e00\u6b21\u4e24\u6b65\uff0c\u4e00\u6b21\u4e09\u6b65\uff0c\u4e00\u76f4\u5f80\u4e0b\u4e3e\u4e2a\u4f8b\u5b50\u3002\u8fd9\u79cd\u4e5f\u90fd\u80fd\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002</p> C++<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        vector&lt;int&gt; dp(n + 1, 0);\n        dp[0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) { // \u628am\u6362\u62102\uff0c\u5c31\u53ef\u4ee5AC\u722c\u697c\u68af\u8fd9\u9053\u9898\n                if (i - j &gt;= 0) dp[i] += dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_4","title":"\u722c\u697c\u68af\u7684\u6700\u5c0f\u82b1\u8d39","text":"<p>\u601d\u8def\uff1a\u5176\u5b9e\u4e3b\u8981\u5c31\u662f\u5bf9\u4e8e\u52a8\u5f52\u6570\u7ec4\u7684\u5b9a\u4e49\u548c\u76f8\u5173\u9012\u63a8\u516c\u5f0f\u7684\u7814\u7a76\uff0c\u4ee5\u53ca\u5173\u952e\u7684\u722c\u697c\u68af\u65f6\u7684\u7b2c\u4e00\u3001\u4e8c\u6b65\u7684\u82b1\u8d39\u76f8\u5173\u7684\u95ee\u9898\u3002</p> <p>\u8fd9\u91cc\uff1adp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);</p> <p>\u540c\u65f6\uff0c\u5728\u9898\u76ee\u8981\u6c42\u4e2d\uff0c\u6240\u5199\u7684\u521d\u59cb\u5728\u7b2c0\u5c42\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u82b1\u8d39\uff0c\u6216\u8005\u76f4\u63a5\u4ece\u7b2c\u4e00\u697c\u5f00\u59cb\u4e5f\u884c\uff0c\u6240\u4ee5\u8fd9\u4e24\u5c42\u697c\u90fd\u4e0d\u82b1\u8d39\uff0c\u540c\u65f6\uff0c\u7531\u8fd9\u4e24\u5c42\u697c\u53ef\u4ee5\u63a8\u5bfc\u51fa\u540e\u7eed\u6240\u6709\u697c\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u540c\u65f6\uff0c\u9012\u63a8\u987a\u5e8f\uff0c\u5f88\u660e\u663e\u662f\u4ece\u524d\u5f80\u540e\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u76f4\u63a5for\u5faa\u73af\u5373\u53ef\uff0c\u4f46\u662f\u5728\u9047\u5230\u6bd4\u5982\u80cc\u5305\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8003\u8651\uff0c\u56e0\u4e3a\u80cc\u5305\u95ee\u9898\u9700\u8981\u4e24\u4e2afor\u5faa\u73af\uff0c\u56e0\u6b64\u5728\u8003\u8651\u5faa\u73af\u7684\u65f6\u5019\u8981\u91cd\u70b9\u5173\u6ce8for\u5faa\u73af\u7684\u904d\u5386\u987a\u5e8f\u3002\u4f46\u662f\u5728\u672c\u9898\u4e2d\u65e0\u9700\u8fc7\u591a\u5173\u6ce8\u8be5\u95ee\u9898\u3002</p> <p>\u4ee3\u7801\u5c55\u793a\uff1a</p> C++<pre><code>int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        //if(cost.size()&lt;=1) return cost[0];\n        int dp0=0;\n        int dp1=0;\n        for(int i=2;i&lt;=cost.size();i++){\n            int sum=min(dp0+cost[i-2],dp1+cost[i-1]);\n            dp0=dp1;\n            dp1=sum;\n        }\n        return dp1;\n    }\n};\n</code></pre> <p>\u603b\u7ed3\uff0c\u603b\u4f53\u4e0a\u8be5\u95ee\u9898\u662f\u5bf9\u524d\u9762\u722c\u697c\u68af\u95ee\u9898\u7684\u4e00\u4e2a\u5ef6\u7eed\u548c\u53d8\u5f62\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u8003\u8651\u6bcf\u5c42\u697c\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u56e0\u6b64\u9700\u8981\u7528\u5230min\u51fd\u6570\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u76f8\u5173\u6761\u4ef6\uff0c\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_5","title":"\u6574\u6570\u62c6\u5206","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>\u672c\u9898\u5176\u5b9e\u662f\u5bfb\u6c42\u4e00\u4e2a\u6574\u6570\u7684\u6700\u4f73\u62c6\u5206\u7ec4\u5408\uff0c\u6765\u8fbe\u5230\u62c6\u5206\u540e\u7684\u4e58\u79ef\u4e4b\u548c\u6700\u5927\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_6","title":"\u52a8\u6001\u89c4\u5212\u6b65\u9aa4","text":"<p>\u8be5\u6b65\u9aa4\u4e3b\u8981\u662f\u5b66\u4e60\u81eacarl\u7684\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u52a8\u6001\u89c4\u5212\u89e3\u9898\u601d\u8def\uff0c\u76f8\u5173\u5185\u5bb9\u53ef\u4ee5\u81ea\u884c\u524d\u5f80\uff1ahttps://programmercarl.com/0343.%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86.html#%E6%80%9D%E8%B7%AF \u672c\u4eba\u53ea\u662f\u51fa\u4e8e\u5b66\u4e60\u76ee\u7684\uff0c\u8fdb\u884c\u4e2a\u4eba\u603b\u7ed3\u800c\u5df2\u3002</p> <p>1\u3001\u5206\u6790\u627e\u51fa\u9002\u5f53\u7684dp\u6570\u7ec4\u548c\u76f8\u5173\u5b9a\u4e49</p> <p>\u5728\u8be5\u9898\u4e2d\uff0cdp\u7684\u5b9a\u4e49\u5f88\u660e\u663e\u662f\uff0c\u4e0b\u6807\u4ee3\u8868\u67d0\u4e2a\u6570\uff0cdp[i]\u4ee3\u8868\u67d0\u4e2a\u6570\u7684\u62c6\u5206\u540e\u7684\u6700\u5927\u5b50\u6570\u7684\u4e58\u79ef\u3002</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f</p> <p>\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2ddp\u6570\u7ec4\u7684\u63a8\u5bfc\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u6570\u7684dp\u5143\u7d20\u3002</p> <p>\u56e0\u6b64\uff1a</p> <p>dp[i]=max(dp[i],max(dp[i-j]*j,(i-j)*j))</p> <p>\u53d6\u6700\u5927\u503c\u662f\u56e0\u4e3a\uff0c\u518d\u5faa\u73af\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u8981\u627e\u6700\u5927\u503c\uff0c\u800c\u4e14\u6bcf\u4e00\u6b65\u4e4b\u540e\u5f53\u524ddp[i]\u7684\u503c\u90fd\u53ef\u80fd\u4f1a\u53d8\uff0c\u56e0\u6b64\u9012\u63a8\u516c\u5f0f\u6709dp[i],\u5176\u6b21\uff0c\u6211\u4eec\u8fdb\u884c\u4ece1-i\u7684\u5faa\u73af\u62c6\u5206\u904d\u5386\uff0c\u6240\u4ee5\uff0c\u8981\u4e0d\u65ad\u627e\u6700\u5927\u503c\uff0c\u6bcf\u4e00\u4e2aj\u90fd\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff1a</p> <p>\u5373\uff0c\u4e00\u79cd\u662f\u5f53\u524dj\u548ci-j\u4e24\u4e2a\u6570\u76f8\u4e58\u503c\u6700\u5927\uff0c\u4e00\u79cd\u662f\u5f53\u524dj\u548ci-j\u7684\u6700\u5927\u62c6\u5206\u7684\u4e58\u79ef\u548c\u76f8\u4e58\u5f97\u5230\u65b0\u7684\u4e58\u79ef\u548c\u3002</p> <p>\u56e0\u6b64\u4e0a\u8ff0\u7684\u9012\u63a8\u516c\u5f0f\u5c31\u5982\u4e0a\u8868\u793a\u3002</p> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316</p> <p>\u5728\u9898\u76ee\u4e2d\uff0c</p> <p>dp[0]=0,dp[1]=0\uff0c\u8fd9\u662f\u5f88\u660e\u663e\u7684\uff0c\u56e0\u6b64\u5728\u521d\u59cb\u5316\u5168\u4e3a0\u7684\u65f6\u5019\uff0c\u90fd\u65e0\u9700\u7ba1\u7406\u3002</p> <p>\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6709\u610f\u4e49\u7684\u8ba1\u7b97\uff0c\u56e0\u6b64\u53ea\u6709\u4ecedp[2]=1\u5f00\u59cb\u7684\u5f80\u540e\u8ba1\u7b97\uff0c\u624d\u4f1a\u6709\u610f\u4e49\u4e14\u7ed3\u679c\u6b63\u786e\uff0c\u903b\u8f91\u80fd\u591f\u901a\u987a\u3002</p> <p>\u521d\u59cb\u5316\uff1adp[2]=1</p> <p>4\u3001\u904d\u5386\u987a\u5e8f</p> <p>\u5f88\u660e\u663e\uff0cdp\u6570\u7ec4\u7684\u904d\u5386\u987a\u5e8f\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u524d\u9762\u62c6\u5206\u7684\u6570\u7684\u4e58\u79ef\u548c\uff0c\u4e14\u4e0e\u4ed6\u4eec\u76f8\u540c\uff0c</p> <p>\u56e0\u6b64\u4ece\u524d\u5f80\u540e\u8fdb\u884c\u4e24\u5c42for\u5faa\u73af\u5373\u53ef\u3002</p> <p>5\u3001\u4e3e\u4f8b\u8fdb\u884c\u63a8\u5bfc</p> <p>\u8fd9\u4e00\u6b65\u5c31\u53ef\u4ee5\u76f4\u63a5\u7f16\u5199\u4ee3\u7801\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u6d4b\u8bd5\u4e86\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_7","title":"\u9898\u76ee\u4ee3\u7801","text":"C++<pre><code>int integerBreak(int n) {\n        vector&lt;int&gt; dp(n+1,0);\n        dp[2]=1;\n        for(int i=3;i&lt;=n;i++){\n            for(int j=1;j&lt;=i/2;j++){\n                //\u627e\u6700\u5927\u7684\u4e58\u79ef\n                dp[i]=max(dp[i],max((i-j)*j,dp[i-j]*j));\n            }\n        }\n        return dp[n];\n    }\n</code></pre> <p>\u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u4ee3\u7801\u5b9e\u73b0\u7684\u4e2d\u95f4\u903b\u8f91\u9700\u8981\u8003\u8651\u6e05\u695a\uff0c\u4e0d\u8981\u6f0f\u9879\u4e86\u3002</p> <p>\u603b\u7ed3\uff1a</p> <p>\u5728\u7b2c\u4e8c\u5c42\u5faa\u73af\u7684\u8fc7\u7a0b\u4e2d\u3002</p> <p>\u6211\u4eec\u53ea\u904d\u5386\u5230i/2\u5c31\u505c\u4e86\uff0c\u4e3b\u8981\u662f\u62c6\u5206\u4e00\u4e2a\u6570n \u4f7f\u4e4b\u4e58\u79ef\u6700\u5927\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u62c6\u5206\u6210m\u4e2a\u8fd1\u4f3c\u76f8\u540c\u7684\u5b50\u6570\u76f8\u4e58\u624d\u662f\u6700\u5927\u7684\u3002\u53ea\u4e0d\u8fc7\u6211\u4eec\u4e0d\u77e5\u9053m\u7a76\u7adf\u662f\u591a\u5c11\u800c\u5df2\uff0c\u4f46\u53ef\u4ee5\u660e\u786e\u7684\u662fm\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e2\uff0c\u65e2\u7136m\u5927\u4e8e\u7b49\u4e8e2\uff0c\u4e5f\u5c31\u662f \u6700\u5dee\u4e5f\u5e94\u8be5\u662f\u62c6\u6210\u4e24\u4e2a\u76f8\u540c\u7684 \u53ef\u80fd\u662f\u6700\u5927\u503c\u3002---carl</p> <p>\u6240\u4ee5\u53ea\u9700\u8981\u904d\u5386\u5230\u7b2ci/2\u5373\u53ef\u3002</p> <p>\u6574\u4f53\u4e0a\u8fd8\u9700\u8981\u6ce8\u610fdp\u6570\u7ec4\u7684\u521d\u59cb\u5316\u90e8\u5206\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u60f3\u597d\u4ece\u54ea\u5f00\u59cb\u521d\u59cb\u5316\uff0c\u8fd8\u8981\u770b\u6e05\u695adp[i]\u6240\u4ee3\u8868\u7684\u542b\u4e49\u548c\u4e0b\u6807\u7684\u610f\u4e49\u3002</p> <p>ending!</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_8","title":"\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/unique-binary-search-trees/description/</p> <p>\u8be5\u9898\u6765\u81ea\u529b\u6263\u7684\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u9898\u76ee\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_9","title":"\u601d\u8def\uff1a","text":"<p>1\u3001\u4e3b\u8981\u662f\u627e\u5230dp\u6570\u7ec4\u7684\u63a8\u5bfc\u516c\u5f0f\uff0c\u6211\u4eec\u662f\u80fd\u591f\u4ece3\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u627e\u5230\u76f8\u5173\u516c\u5f0f\u63a8\u5bfc\u7684\u3002</p> <p>dp[i]:\u4ee3\u8868\u6709i\u4e2a\u8282\u70b9\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2a\u6570dp[i]\uff0c\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>dp[3]=dp[0]*dp[2]+dp[1]*dp[1]+dp[2]*dp[0];</p> <p>2\u3001\u6240\u4ee5\u9012\u63a8\u516c\u5f0f\u4e3adp[i]+=dp[j-1]*dp[i-j];</p> <p>j-1 \u4e3aj\u4e3a\u5934\u7ed3\u70b9\u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf\uff0ci-j \u4e3a\u4ee5j\u4e3a\u5934\u7ed3\u70b9\u53f3\u5b50\u6811\u8282\u70b9\u6570\u91cf\u3002</p> <p>3\u3001\u521d\u59cb\u5316\uff1a</p> <p>\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u9700\u8981\u521d\u59cb\u5316dp[0]\u5c31\u53ef\u4ee5\u4e86\uff0c\u540e\u7eed\u7684\u63a8\u5bfc\u90fd\u662f\u57fa\u4e8edp[0]\u7684\u3002</p> <p>dp[0]=1\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u63a8\u5bfc\u521d\u59cb\u5316\u6709\u610f\u4e49\uff0c\u4e14\u7b26\u5408\u903b\u8f91\uff0c\u7a7a\u8282\u70b9\u4e5f\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4e5f\u662f\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>4\u3001\u904d\u5386\u987a\u5e8f\uff0c\u4ece\u524d\u5f80\u540e\uff0c\u4ece\u5c0f\u5230\u5927\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u9a8c\u8bc1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%90%88%E9%9B%86/#_10","title":"\u4ee3\u7801","text":"C++<pre><code>int numTrees(int n) {\n        vector&lt;int&gt; dp(n+1,0);\n        dp[0]=1;\n        //\u5faa\u73af\u904d\u5386dp\n        for(int i=1;i&lt;=n;i++){\n            for(int j=1;j&lt;=i;j++){\n                dp[i]+=dp[j-1]*dp[i-j];\n            }\n        }\n        return dp[n];\n    }\n</code></pre> <p>ending!!</p> <p>\ud83c\udf54\ud83c\udf73</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/","title":"\u52a8\u6001\u89c4\u5212\u7b2c\u56db\u5468","text":"<p>\u5b66\u4e60\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u7b14\u8bb0\u603b\u7ed3\u548c\u601d\u8def\u590d\u4e60</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_2","title":"\u76ee\u6807\u548c","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/target-sum/</p> <p>\u5206\u6790\uff1a</p> <p>\u672c\u9898\u53ef\u4ee5\u91c7\u7528\u56de\u6eaf\u6cd5\u548c\u52a8\u6001\u89c4\u5212\u6cd5\u5747\u53ef\u89e3\u51b3\uff0c\u4f46\u662f\u5728\u529b\u6263\u4e2d\u3002\u56de\u6eaf\u6cd5\u4f1a\u8d85\u65f6\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u672c\u9898\u662f\u5bfb\u627e\u4e00\u4e2a+\uff0c-\u53f7\u7684\u6392\u5e03\u65b9\u5f0f\uff0c\u4f7f\u5f97\u603b\u548c\u4e3atarget\uff0c\u5e76\u6c42\u89e3\u6240\u6709\u53ef\u4ee5\u5f97\u5230target\u7684\u6392\u5217\u65b9\u5f0f\u3002</p> <p>\u5176\u5b9e\u6c42\u89e3\u76ee\u6807\u548c\uff0c\u5176\u5b9e\u5c31\u662f\u770b\u6b63\u6570\u7684\u548c+\u8d1f\u6570\u7684\u548c\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u627e\u5230\u524d\u7f00\u4e3a\u6b63\u7684\u6570\u5b57\u7ec4\u5408\u548c\u524d\u7f00\u4e3a\u8d1f\u7684\u6570\u5b57\u7ec4\u5408\u5373\u53ef\u3002</p> <p>\u7c7b\u4f3c\u4e8e\uff1a\u6b63\u6570\u7684\u548c\u4e3az,\u9700\u8981\u524d\u7f00\u4e3a\u8d1f\u53f7\u7684\u6570\u7684\u548c\u4e3af\uff0c\u5728\u8ba1\u7b97\u7684\u65f6\u5019\u53ea\u9700\u8981\u5728f\u524d\u9762\u52a0\u8d1f\u53f7\u5373\u53ef\u3002</p> <p>z-f=target;</p> <p>\u4f46\u662fz+f=sum;</p> <p>\u6240\u4ee5\uff0cf=sum-z;</p> <p>z-sum+z=target;</p> <p>z=(sum+target)/2;</p> <p>\u56e0\u6b64\u53ea\u9700\u8981\u627e\u5230\u548c\u4e3a(sum+target)/2\u7684\u90a3\u4e9b\u6570\u5c31\u80fd\u591f\u6ee1\u8db3target\u7684\u8981\u6c42\u4e86\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4,dp[i]\u8868\u793a\u6700\u591a\u548c\u4e3ai\u7684\u6570\u5b57\u7684\u6700\u591a\u7ec4\u5408\u65b9\u6cd5</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f\uff1adp[j]=dp[j]+dp[j-nums[i]];</p> <p>3\u3001\u521d\u59cb\u5316\uff0c\u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u521d\u59cbdp\u6570\u7ec4\u5927\u5c0f\u4e3a(sum+target)/2+1\uff0c\u521d\u59cb\u4e3a0\uff0c\u4f46\u662fdp[0]=1\uff0c\u56e0\u4e3adp[0]\u8868\u793a\u548c0\u7684\u7ec4\u5408\u65b9\u5f0f\uff0c\u4e00\u822c\u8ba4\u4e3a\u8be5\u7ec4\u5408\u65b9\u5f0f\u53ea\u6709\u4e00\u79cd\u3002\u800c\u4e14\u6839\u636e\u9012\u63a8\u987a\u5e8f\uff0c\u4ece\u524d\u5f80\u540e\u63a8\u5bfc\u7684\uff0c\u6240\u4ee5\u5982\u679c\u521d\u59cb\u4e3a0\uff0c\u540e\u7eed\u6ca1\u610f\u4e49\u3002</p> <p>4\u3001\u9012\u63a8\u65b9\u5f0f\uff1a\u5f88\u660e\u663e\uff0c\u6b64\u9898\u662f\u4e00\u4e2a\u53d8\u5f62\u76840-1\u80cc\u5305\u95ee\u9898\uff0c\u53ea\u4e0d\u8fc7\u6539\u6210\u5bf9\u6bcf\u4e2a\u7269\u54c1\u8fdb\u884c\u9009\u62e90 or 1\uff0c\u5373\u6bcf\u4e2a\u7269\u54c1\u53ea\u7528\u4e00\u6b21\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u4e3e\u4f8b\u63a8\u5bfc\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) {\n        int sum=0;\n        //\u6c42\u6570\u7ec4\u603b\u548c\n        for(int i=0;i&lt;nums.size();i++){\n            sum+=nums[i];\n        }\n        //\u5176\u5b9e\u5c31\u662f\u6c42\u89e3\u603b+\u548c\u4e3a(target+sum)/2\n        if(abs(target)&gt;sum) return 0;\n        if((target+sum)%2==1) return 0;\n        int bagSize = (target + sum) / 2;\n        vector&lt;int&gt; dp(bagSize+1,0);\n        dp[0]=1;\n        for(int i=0;i&lt;nums.size();i++){\n            for(int j=bagSize;j&gt;=nums[i];j--){\n                dp[j]+=dp[j-nums[i]];\n            }\n        }\n        return dp[bagSize];\n    }\n</code></pre> <p>carl\u54e5\u7684\u56de\u6eaf\u6cd5\u89e3\u6cd5\u4ee3\u7801\u5c55\u793a\uff0c\u76f8\u5173\u601d\u8def\u53ef\u4ee5\u53bb\u4ee3\u7801\u968f\u60f3\u5f55\u89c2\u770b\u54e6\u3002</p> C++<pre><code>class Solution {\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; result;\n    vector&lt;int&gt; path;\n    void backtracking(vector&lt;int&gt;&amp; candidates, int target, int sum, int startIndex) {\n        if (sum == target) {\n            result.push_back(path);\n        }\n        // \u5982\u679c sum + candidates[i] &gt; target \u5c31\u7ec8\u6b62\u904d\u5386\n        for (int i = startIndex; i &lt; candidates.size() &amp;&amp; sum + candidates[i] &lt;= target; i++) {\n            sum += candidates[i];\n            path.push_back(candidates[i]);\n            backtracking(candidates, target, sum, i + 1);\n            sum -= candidates[i];\n            path.pop_back();\n\n        }\n    }\npublic:\n    int findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) {\n        int sum = 0;\n        for (int i = 0; i &lt; nums.size(); i++) sum += nums[i];\n        if (S &gt; sum) return 0; // \u6b64\u65f6\u6ca1\u6709\u65b9\u6848\n        if ((S + sum) % 2) return 0; // \u6b64\u65f6\u6ca1\u6709\u65b9\u6848\uff0c\u4e24\u4e2aint\u76f8\u52a0\u7684\u65f6\u5019\u8981\u683c\u5916\u5c0f\u5fc3\u6570\u503c\u6ea2\u51fa\u7684\u95ee\u9898\n        int bagSize = (S + sum) / 2; // \u8f6c\u53d8\u4e3a\u7ec4\u5408\u603b\u548c\u95ee\u9898\uff0cbagsize\u5c31\u662f\u8981\u6c42\u7684\u548c\n\n        // \u4ee5\u4e0b\u4e3a\u56de\u6eaf\u6cd5\u4ee3\u7801\n        result.clear();\n        path.clear();\n        sort(nums.begin(), nums.end()); // \u9700\u8981\u6392\u5e8f\n        backtracking(nums, bagSize, 0, 0);\n        return result.size();\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#tips","title":"tips","text":"<p>MkDocs \u662f\u4e00\u4e2a\u7528\u4e8e\u521b\u5efa\u9879\u76ee\u6587\u6863\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5668\u3002\u6587\u6863\u6e90\u7801\u4f7f\u7528 Markdown \u6765\u64b0\u5199\uff0c\u7ecf\u914d\u7f6e\u540e\uff0c\u53ef\u81ea\u52a8\u751f\u6210\u5177\u6709\u76ee\u5f55\u7ed3\u6784\u7684\u7ad9\u70b9\uff0c\u5e38\u7528\u6765\u64b0\u5199\u6280\u672f\u6587\u6863\u3001\u4e2a\u4eba\u535a\u5ba2\u3002</p> <p>\u6587\u6863\u5f00\u53d1\u6559\u7a0b</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_3","title":"\u4e00\u548c\u96f6","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/ones-and-zeroes/description/</p> <p>\u5206\u6790\uff1a</p> <p>\u672c\u8d28\u5176\u5b9e\u8fd8\u662f\u4e00\u4e2a0-1\u80cc\u5305\u95ee\u9898\uff0c\u53ea\u4e0d\u8fc7\u5728\u8fd9\u91cc\u6bcf\u4e2a\u80cc\u5305\u90fd\u7528\u4e24\u4e2a\u5750\u6807\u6765\u8868\u793a\uff0c\u5c31\u662f0\u7684\u4e2a\u6570\u548c1\u7684\u4e2a\u6570\u3002</p> <p>\u9996\u5148\uff0c\u786e\u5b9adp\u6570\u7ec4,dp[i][j]\u8868\u793a\u6700\u591a\u80fd\u5bb9\u4e0bi\u4e2a0\uff0cj\u4e2a1\uff0c\u540c\u65f6\u6570\u7ec4\u7684\u5143\u7d20\u8868\u793a\u5f53\u524d\u5bb9\u91cf\u4e0b\u7684\u7b26\u5408\u6761\u4ef6\u7684\u6700\u591a\u6709\u51e0\u4e2a\u5b50\u96c6\u3002</p> <p>\u5176\u5b9e\uff0c\u9012\u63a8\u987a\u5e8f\uff0c\u548c0-1\u80cc\u5305\u4e00\u6837\uff0cdp[i][j]\u9700\u8981\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u80cc\u5305\u7684\u5185\u5bb9\uff0cdp[i][j]=max(dp[i][j],dp[i-znum][j-onum]+1);</p> <p>\u63a5\u7740\uff0c\u521d\u59cb\u5316\uff0c\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u521d\u59cb\u4e3a0\u5373\u53ef\u3002\u5728(0,0)\u4f4d\u7f6e\u7684\u5143\u7d20\u8868\u793a\uff0c\u521a\u5f00\u59cb\u80fd\u5bb9\u7eb30\u4e2a0\u548c0\u4e2a1\u7684\u65f6\u5019\u7684\u5b50\u96c6\u4e2a\u6570\uff0c\u5f88\u660e\u663e\u662f0.</p> <p>\u5176\u6b21\uff0c\u904d\u5386\u987a\u5e8f\uff0c\u867d\u7136\u8868\u9762\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd8\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u5916\u5c42for\u904d\u5386\u6bcf\u4e2astr\uff0c\u5185\u5c42\u904d\u5386\u6bcf\u4e2a\u4e0d\u540c\u5bb9\u91cf\u5927\u5c0f\u7684\u80cc\u5305\u5373\u53ef\u3002</p> <p>\u603b\u4e4b\uff0c\u8fdb\u884c\u81ea\u884c\u4e3e\u4f8b\u63a8\u5bfc\u9a8c\u8bc1\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) {\n        //\u521d\u59cb\u5316dp\u6570\u7ec4\n        vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));\n        //\u904d\u5386strs\n        for(string str:strs){\n            int znum=0,onum=0;\n            for(char c:str){\n                if(c=='0') znum++;\n                else onum++;\n            }\n            for(int i=m;i&gt;=znum;i--){\n                for(int j=n;j&gt;=onum;j--){\n                    dp[i][j]=max(dp[i][j],dp[i-znum][j-onum]+1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_4","title":"\u603b\u7ed3\uff1a","text":"<p>0-1\u80cc\u5305\u7684\u591a\u79cd\u5e94\u7528\uff1a</p> <ul> <li>\u7eaf 0 - 1 \u80cc\u5305 (opens new window)\u662f\u6c42 \u7ed9\u5b9a\u80cc\u5305\u5bb9\u91cf \u88c5\u6ee1\u80cc\u5305 \u7684\u6700\u5927\u4ef7\u503c\u662f\u591a\u5c11\u3002</li> <li>416. \u5206\u5272\u7b49\u548c\u5b50\u96c6 (opens new window)\u662f\u6c42 \u7ed9\u5b9a\u80cc\u5305\u5bb9\u91cf\uff0c\u80fd\u4e0d\u80fd\u88c5\u6ee1\u8fd9\u4e2a\u80cc\u5305\u3002</li> <li>1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II (opens new window)\u662f\u6c42 \u7ed9\u5b9a\u80cc\u5305\u5bb9\u91cf\uff0c\u5c3d\u53ef\u80fd\u88c5\uff0c\u6700\u591a\u80fd\u88c5\u591a\u5c11</li> <li>494. \u76ee\u6807\u548c (opens new window)\u662f\u6c42 \u7ed9\u5b9a\u80cc\u5305\u5bb9\u91cf\uff0c\u88c5\u6ee1\u80cc\u5305\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u3002</li> <li>\u672c\u9898\u662f\u6c42 \u7ed9\u5b9a\u80cc\u5305\u5bb9\u91cf\uff0c\u88c5\u6ee1\u80cc\u5305\u6700\u591a\u6709\u591a\u5c11\u4e2a\u7269\u54c1\u3002</li> </ul> <p>\u4e0a\u8ff0\u603b\u7ed3\u90e8\u5206\u5f15\u7528\u81ea\u4ee3\u7801\u968f\u60f3\u5f55\uff0c\u4ec5\u7528\u4e8e\u4e2a\u4eba\u5b66\u4e60\u603b\u7ed3\u3002</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#2","title":"\u96f6\u94b1\u5151\u63622","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a</p> <p>https://leetcode.cn/problems/coin-change-ii/</p> <p>\u601d\u8def\uff1a</p> <p>\u8be5\u9898\u662f\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u6bcf\u4e2a\u7269\u54c1\u7684\u4e2a\u6570\u90fd\u662f\u65e0\u9650\u4e2a\u3002</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\uff0cdp[i]\u8868\u793a\u7ec4\u6210i\u7684\u94b1\u5e01\u7684\u6700\u591a\u7ec4\u5408\u65b9\u5f0f</p> <p>2\u3001\u9012\u63a8\u516c\u5f0f\uff1adp[j]=dp[j]+dp[j-coins[i]];</p> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0cdp[0]=1\uff0c\u5176\u4ed6\u521d\u59cb\u5316\u4e3a0.</p> <p>4\u3001\u904d\u5386\u987a\u5e8f\uff1a\u5148\u904d\u5386\u6bcf\u4e2a\u91d1\u989d\u7684\u7269\u54c1\uff0c\u518d\u904d\u5386\u6bcf\u4e2a\u5bb9\u91cf\u7684\u80cc\u5305</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int change(int amount, vector&lt;int&gt;&amp; coins) {\n        vector&lt;int&gt; dp(amount+1,0);\n        dp[0]=1;\n        for(int i=0;i&lt;coins.size();i++){\n            for(int j=coins[i];j&lt;=amount;j++){\n                dp[j]+=dp[j-coins[i]];\n            }\n        }\n        return dp[amount];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_5","title":"\u96f6\u94b1\u5151\u6362","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/coin-change/</p> <p>\u601d\u8def\uff1a\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u9898\u5f88\u5bb9\u6613\u8054\u60f3\u5230\u524d\u9762\u505a\u8fc7\u7684\u4e00\u4e2a\u76f8\u4f3c\u7684\u96f6\u94b1\u5151\u6362\u7684\u95ee\u9898\uff0c\u4f46\u662f\u8be5\u9898\u4e2d\u7684\u4e0d\u540c\u96f6\u94b1\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u5e76\u4e14\u8be5\u9898\u76ee\u7684\u8981\u6c42\u662f\u627e\u51fa\u8fbe\u5230\u8981\u6c42\u91d1\u989d\u7684\u6700\u5c11\u7ec4\u5408\u6570\u91cf\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u8be5\u9898\u662f\u4e00\u4e2a\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u3002</p> <p>\u8fc7\u7a0b\uff1a</p> <p>1\u3001\u5b9a\u4e49dp\u6570\u7ec4\uff0cdp[i]\u8868\u793a\u91d1\u989d\u4e3ai\u7684\u6700\u5c11\u7ec4\u5408\u79cd\u7c7b</p> <p>2\u3001dp[i]=min(dp[i-coins[j]],dp[i]);</p> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u6240\u6709\u6570\u7ec4\u5143\u7d20\u90fd\u521d\u59cb\u5316\u4e3aint\u6700\u5927\u503c\uff1aINT_MAX\uff0c\u4f46\u662fdp[0]=0\uff0c\u56e0\u4e3a\u91d1\u989d\u4e3a0\u7684\u79cd\u7c7b\u53ea\u67090.</p> <p>4\u3001dp\u6570\u7ec4\u7684\u904d\u5386\u987a\u5e8f\uff0c\u5728\u8be5\u9898\u4e2d\uff0c\u904d\u5386\u987a\u5e8f\u662f\u65e0\u6240\u8c13\u7684\uff0c\u65e2\u53ef\u4ee5\u5148\u904d\u5386\u80cc\u5305\u518d\u904d\u5386\u7269\u54c1\uff0c\u4e5f\u53ef\u4ee5\u5148\u904d\u5386\u7269\u54c1\u518d\u904d\u5386\u80cc\u5305\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\u6570\u7ec4\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int coinChange(vector&lt;int&gt;&amp; coins, int amount) {\n        vector&lt;int&gt; dp(amount+1,INT_MAX);\n        dp[0]=0;\n        //\u5faa\u73af\u904d\u5386\n        for(int i=0;i&lt;coins.size();i++){\n            for(int j=coins[i];j&lt;dp.size();j++){\n                if (dp[j - coins[i]] != INT_MAX) { // \u5982\u679cdp[j - coins[i]]\u662f\u521d\u59cb\u503c\u5219\u8df3\u8fc7\n                    dp[j] = min(dp[j - coins[i]] + 1, dp[j]);\n                }\n            }\n        }\n        if(dp[amount]==INT_MAX) return -1;\n        return dp[amount];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_6","title":"\u7ec4\u5408\u7efc\u5408\uff08\u56db\uff09","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/combination-sum-iv/</p> <p>\u601d\u8def\uff1a\u8be5\u9898\u662f\u4e00\u4e2a\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u540c\u65f6\u8fd8\u8981\u8003\u8651\u987a\u5e8f\u95ee\u9898\u3002</p> <p>\u76f4\u63a5\u6309\u7167\u52a8\u6001\u89c4\u5212\u7684\u6b65\u9aa4\u8fdb\u884c\u8be6\u89e3\u5373\u53ef\u3002</p> C++<pre><code>int combinationSum4(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; dp(target + 1, 0);\n        dp[0] = 1;\n        for (int i = 0; i &lt;= target; i++) { // \u904d\u5386\u80cc\u5305\n            for (int j = 0; j &lt; nums.size(); j++) { // \u904d\u5386\u7269\u54c1\n                if (i - nums[j] &gt;= 0 &amp;&amp; dp[i] &lt; INT_MAX - dp[i - nums[j]]) {\n                    dp[i] += dp[i - nums[j]];\n                }\n            }\n        }\n        return dp[target];\n    }\n</code></pre> <p>\u8fd9\u91cc\u5148\u904d\u5386\u80cc\u5305\u518d\u904d\u5386\u7269\u54c1\u7684\u539f\u56e0\u662f\uff0c\u5148\u904d\u5386\u80cc\u5305\u7684\u8bdd\uff0c\u5728\u6bcf\u4e2a\u5bb9\u91cf\u7684\u80cc\u5305\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u7ecf\u8fc7dp[i]\uff0cdp[i-nums[j]]\u8fd9\u4e9b\u4e1c\u897f\uff0c\u5148dp[i]\uff0c\u548c\u540edp[i]\u90fd\u4f1a\u8fdb\u884c\u904d\u5386\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd9\u6837\u5c31\u80fd\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c\u5373\u8ba1\u7b97\u6392\u5217\u7684\u6570\u91cf\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#_7","title":"\u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/perfect-squares/submissions/555684185/</p> <p>\u601d\u8def\uff1a\u8be5\u9898\u5f88\u660e\u663e\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u53ea\u4e0d\u8fc7\u7269\u54c1\u662f\u65e0\u9650\u6570\u91cf\u7684\u5b8c\u5168\u80cc\u5305\u6570\uff0c\u800c\u80cc\u5305\u5f0f\u548c\u4e3a\u76ee\u6807\u6570\u7684\u5bb9\u91cf\u548c\u3002</p> <p>\u56e0\u6b64\u76f8\u5173\u601d\u8def\u89e3\u6cd5\u5b8c\u5168\u53ef\u4ee5\u53c2\u7167\u524d\u9762\u51e0\u4e2a\u9898\u76ee\u7684\u89e3\u6cd5\uff0c\u6ce8\u610fdp[0]=0\uff0c\u56e0\u4e3a\u9898\u76ee\u662f\u4ece1\u5f00\u59cb\u8ba1\u7b97\u5b8c\u5168\u5e73\u65b9\u6570\u7684\uff0c\u56e0\u6b64\u57280\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e3a0,\u3002</p> <p>\u5728\u904d\u5386\u987a\u5e8f\u65b9\u9762\uff0c\u5148\u904d\u5386\u80cc\u5305\u548c\u5148\u904d\u5386\u7269\u54c1\u8fd9\u4e24\u8005\u7684\u987a\u5e8f\u4e4b\u95f4\u662f\u6ca1\u6709\u5173\u7cfb\u7684\uff0c\u56e0\u6b64\u4e8c\u8005\u7686\u53ef\uff0c\u81ea\u884c\u9009\u62e9\u3002</p> <p>\u9012\u63a8\u516c\u5f0f\u65b9\u9762\uff0c\u6c42\u5f97\u662f\u6700\u5c0f\u7684\u6570\u91cf\uff0c\u56e0\u6b64dp[i]=min(dp[i-j*j]+1,dp[i]);</p> <p>\u4ee3\u7801\uff1a</p> <p>1\u3001\u5148\u80cc\u5305\u540e\u7269\u54c1</p> C++<pre><code>int numSquares(int n) {\n        vector&lt;int&gt; dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i &lt;= n; i++) { // \u904d\u5386\u80cc\u5305\n            for (int j = 1; j * j &lt;= i; j++) { // \u904d\u5386\u7269\u54c1\n                dp[i] = min(dp[i - j * j] + 1, dp[i]);\n            }\n        }\n        return dp[n];\n    }\n</code></pre> <p>2\u3001\u5148\u7269\u54c1\u540e\u80cc\u5305</p> C++<pre><code>int numSquares(int n) {\n        vector&lt;int&gt; dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i * i &lt;= n; i++) { // \u904d\u5386\u7269\u54c1\n            for (int j = i * i; j &lt;= n; j++) { // \u904d\u5386\u80cc\u5305\n                dp[j] = min(dp[j - i * i] + 1, dp[j]);\n            }\n        }\n        return dp[n];\n    }\n</code></pre> <p>\u6700\u8fd1\u51c6\u5907\u5f00\u59cb\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b66\u4e60\u5566\uff01\u6492\u82b1\uff01\uff01\u8fd9\u5468\u5230\u6b64\u4e3a\u6b62\u54af\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AC%AC%E5%9B%9B%E5%91%A8/#ending","title":"ending!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/","title":"\u5355\u8c03\u6808\uff08\u90e8\u5206\uff09","text":"<p>\u540e\u7eed\u8fd8\u9700\u8981\u8fdb\u884c\u76f8\u5173\u5355\u8c03\u6808\u7684\u8865\u5145\u3002</p> <p>\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u8865\u5145\u548c\u4e2a\u4eba\u601d\u8def\u611f\u609f</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_2","title":"\u6bcf\u65e5\u6e29\u5ea6","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/daily-temperatures/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002</p> <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f [1, 1, 4, 2, 1, 1, 0, 0]\u3002</p> <p>\u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f [1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728 [30, 100] \u8303\u56f4\u5185\u7684\u6574\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_3","title":"\u6700\u5f00\u59cb\uff0c\u6211\u4e00\u770b\u5230\u5355\u8c03\u6808\uff0c\u6ca1\u6709\u7406\u89e3\u4ec0\u4e48\u53eb\u505a\u5355\u8c03\u6808\u3002","text":"<p>\u7b2c\u4e00\u5370\u8c61\u770b\u5230\u5355\u8c03\u548c\u6808\u4e24\u4e2a\u8bcd\u653e\u5230\u4e00\u8d77\uff0c\u5c31\u60f3\u5230\u80af\u5b9a\u662f\u5229\u7528\u6808\u7684\u5148\u8fdb\u540e\u51fa\u7684\u7279\u6027\u6765\u8425\u9020\u5355\u8c03\u7684\u7279\u6027\u3002</p> <p>\u540e\u7eed\u505a\u4e86\u4e00\u4e9b\u76f8\u5173\u9898\u76ee\u4e4b\u540e\uff0c\u624d\u7406\u89e3\u5230\u5355\u8c03\u6808\u7684\u610f\u601d\u662f\u6808\u4e2d\u7684\u5143\u7d20\u8981\u5355\u8c03\u9012\u589e\u6216\u8005\u5355\u8c03\u9012\u51cf\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_4","title":"\u601d\u8def","text":"<p>\u5355\u8c03\u6808\u7684\u672c\u8d28\u5c31\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u56e0\u4e3a\u5728\u904d\u5386\u7684\u65f6\u5019\uff0c\u7528\u4e00\u4e2a\u6808\u6765\u8bb0\u5f55\u53f3\u8fb9\u6bd4\u81ea\u5df1\u5927\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u6bd4\u81ea\u5df1\u5c0f\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u9996\u5148\uff0c\u6808\u91cc\u9762\u8981\u5b58\u653e\u7684\u662f\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6bd4\u8f83\u5f53\u524d\u5143\u7d20\u548c\u6808\u9876\u5143\u7d20\u7684\u5927\u5c0f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u6808\u9876\u5143\u7d20\uff0c\u5219\u8868\u793a\u6211\u4eec\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6808\u9876\u5143\u7d20\u7684\u5143\u7d20\uff0c\u5e76\u8fdb\u884c\u5bf9\u5e94\u7684\u5904\u7406\uff0c\u6309\u7167\u9898\u76ee\u6765\u8bf4\u7684\u8bdd\uff0c\u8fd9\u91cc\u9700\u8981\u505a\u51cf\u6cd5\uff0c\u7b97\u51fa\u6700\u5c11\u8981\u9694\u51e0\u5929\u3002</p> <p>\u5176\u6b21\uff0c\u6211\u4eec\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u603b\u5171\u6709\u4e09\u79cd\u60c5\u51b5\u9700\u8981\u8fdb\u884c\u76f8\u5173\u7684\u5904\u7406\u3002</p> <p>1\u3001T[i]&gt;st[st.top()]\uff0c\u76f4\u63a5\u51fa\u6808\u5e76\u5c06result[st.top()]=i-st.top();</p> <p>2\u3001T[i]=st[st.top()]\uff0c\u5219\u5c06i\u8fdb\u6808</p> <p>3\u3001T[i]&lt;st[st.top()]\uff0c\u4e5f\u5c06i\u8fdb\u6808</p> <p>\u4e0a\u9762\u76842,3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u8fdb\u6808\uff1f</p> <p>\u9996\u5148\u8981\u660e\u786e\u6808\u91cc\u9762\u5b58\u653e\u7684\u90fd\u662f\u4ec0\u4e48\u6837\u7684\u5143\u7d20\u4e0b\u6807\u3002\u5728\u5355\u8c03\u6808\u4e2d\u6211\u4eec\u5b58\u653e\u7684\u662f\u76ee\u524d\u904d\u5386\u7684\u5143\u7d20\u5c1a\u672a\u627e\u5230\u6bd4\u6808\u4e2d\u6240\u6709\u5143\u7d20\u5927\u7684\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5927\u7684\u5143\u7d20\uff0c\u6bd5\u7adf\u6211\u4eec\u7684\u6808\u662f\u5355\u8c03\u6808\uff0c\u4ece\u6808\u9876\u5230\u6808\u5e95\u662f\u9012\u589e\u7684\u3002</p> <p>\u540c\u65f6\uff0c\u6211\u4eec\u8fd9\u6837\u5904\u7406\u8fd8\u80fd\u4fdd\u8bc1\u627e\u5230\u7684\u4e00\u5b9a\u662f\u6bcf\u4e2a\u5143\u7d20\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5927\u7684\u5143\u7d20\u3002</p> <p>\u5bf9\u4e8eresult\u6570\u7ec4\u7684\u521d\u59cb\u5316\u95ee\u9898\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u9ed8\u8ba4\u6bcf\u4e2a\u5143\u7d20\u8fd8\u672a\u627e\u5230\u5bf9\u5e94\u7684\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u5927\u7684\u5143\u7d20\u3002</p> <p>\u4ee3\u7801\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u8f7b\u6613\u5f97\u5230\uff0c\u6ce8\u610f\u5bf9\u6808\u7684\u8fd0\u7528</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_5","title":"\u4ee3\u7801\uff1a","text":"C++<pre><code>vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; T) {\n        // \u9012\u589e\u6808\n        stack&lt;int&gt; st;\n        vector&lt;int&gt; result(T.size(), 0);\n        st.push(0);\n        for (int i = 1; i &lt; T.size(); i++) {\n            if (T[i] &lt; T[st.top()]) {                       // \u60c5\u51b5\u4e00\n                st.push(i);\n            } else if (T[i] == T[st.top()]) {               // \u60c5\u51b5\u4e8c\n                st.push(i);\n            } else {\n                while (!st.empty() &amp;&amp; T[i] &gt; T[st.top()]) { // \u60c5\u51b5\u4e09\n                    result[st.top()] = i - st.top();\n                    st.pop();\n                }\n                st.push(i);\n            }\n        }\n        return result;\n    }\n</code></pre> <p>\u7b80\u5316\u7248\u672c\uff1a</p> <p>\u5bf9\u4e8e\u8fd9\u4e2a\u7248\u672c\uff0c\u6211\u4eec\u4e3b\u8981\u662f\u5bf9\u4e09\u79cd\u60c5\u51b5\u8fdb\u884c\u4e86\u5408\u5e76\uff0c\u6bcf\u6b21\u5faa\u73af\u6211\u4eec\u90fd\u5165\u6808\uff0c\u4f46\u662f\u5728\u5165\u6808\u524d\u8981\u628a\u6240\u6709\u80fd\u591f\u627e\u5230\u5927\u4e8e\u6808\u9876\u7684\u5143\u7d20\u90fd\u5904\u7406\u5b8c\u6bd5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7cbe\u7b80\u7248\u672c\u3002</p> C++<pre><code>vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; T) {\n        stack&lt;int&gt; st; // \u9012\u589e\u6808\n        vector&lt;int&gt; result(T.size(), 0);\n        for (int i = 0; i &lt; T.size(); i++) {\n            while (!st.empty() &amp;&amp; T[i] &gt; T[st.top()]) { // \u6ce8\u610f\u6808\u4e0d\u80fd\u4e3a\u7a7a\n                result[st.top()] = i - st.top();\n                st.pop();\n            }\n            st.push(i);\n\n        }\n        return result;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#1","title":"\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d201","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/next-greater-element-i/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u4f60\u4e24\u4e2a \u6ca1\u6709\u91cd\u590d\u5143\u7d20 \u7684\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u5176\u4e2dnums1 \u662f nums2 \u7684\u5b50\u96c6\u3002</p> <p>\u8bf7\u4f60\u627e\u51fa nums1 \u4e2d\u6bcf\u4e2a\u5143\u7d20\u5728 nums2 \u4e2d\u7684\u4e0b\u4e00\u4e2a\u6bd4\u5176\u5927\u7684\u503c\u3002</p> <p>nums1 \u4e2d\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u662f\u6307 x \u5728 nums2 \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u6bd4 x \u5927\u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u8f93\u51fa -1 \u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_6","title":"\u601d\u8def\uff1a","text":"<p>\u548c\u4e0a\u4e00\u9898\u76ee\u7684\u533a\u522b\u5728\u4e8e\uff1a\u8fd9\u6b21\u662f\u6211\u4eec\u5bf9nums2\u6c42\u89e3\u76f8\u5173\u7684\u6bcf\u4e2a\u5143\u7d20\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6700\u5927\u5143\u7d20\uff0c\u6bcf\u5f53\u627e\u5230\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u8981\u5224\u65ad\u5f53\u524d\u6808\u9876\u5143\u7d20\u662f\u5426\u5728nums1\u4e2d\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\uff0c\u5f53nums2\u904d\u5386\u5b8c\u7684\u65f6\u5019\uff0cnums1\u4e2d\u672a\u5904\u7406\u7684\u5c31\u662f\u627e\u4e0d\u5230\u7684\uff0c\u76f4\u63a5\u8d4b\u4e88\u521d\u59cb\u503c\u4e3a-1\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\u548c\u4e0a\u4e00\u9898\u7684\u7b80\u5355\u533a\u522b\u5728\u4e8e\u5bf9\u4e8enums1\u7684map\u7684\u5904\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_7","title":"\u4ee3\u7801\uff1a","text":"C++<pre><code>vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        stack&lt;int&gt; st;\n        vector&lt;int&gt; result(nums1.size(), -1);\n        if (nums1.size() == 0) return result;\n\n        unordered_map&lt;int, int&gt; umap; // key:\u4e0b\u6807\u5143\u7d20\uff0cvalue\uff1a\u4e0b\u6807\n        for (int i = 0; i &lt; nums1.size(); i++) {\n            umap[nums1[i]] = i;\n        }\n        st.push(0);\n        for (int i = 1; i &lt; nums2.size(); i++) {\n            if (nums2[i] &lt; nums2[st.top()]) {           // \u60c5\u51b5\u4e00\n                st.push(i);\n            } else if (nums2[i] == nums2[st.top()]) {   // \u60c5\u51b5\u4e8c\n                st.push(i);\n            } else {                                    // \u60c5\u51b5\u4e09\n                while (!st.empty() &amp;&amp; nums2[i] &gt; nums2[st.top()]) {\n                    if (umap.count(nums2[st.top()]) &gt; 0) { // \u770bmap\u91cc\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u5143\u7d20\n                        int index = umap[nums2[st.top()]]; // \u6839\u636emap\u627e\u5230nums2[st.top()] \u5728 nums1\u4e2d\u7684\u4e0b\u6807\n                        result[index] = nums2[i];\n                    }\n                    st.pop();\n                }\n                st.push(i);\n            }\n        }\n        return result;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#_8","title":"\u8fd9\u4e00\u90e8\u5206\uff0c\u6682\u65f6\u5c31\u89e3\u6790\u5230\u8fd9\u4e2a\u9898\u76ee\u4e86\u3002","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8D%95%E8%B0%83%E6%A0%88%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89/#ending","title":"ending\uff01\uff01\uff01","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/","title":"\u56fe\u8bba\u7b97\u6cd5\u5c0f\u7ed3","text":"<p>\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u548c\u603b\u7ed3</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#bellman_ford","title":"Bellman_ford\u7b97\u6cd5","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1152</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u67d0\u56fd\u4e3a\u4fc3\u8fdb\u57ce\u5e02\u95f4\u7ecf\u6d4e\u4ea4\u6d41\uff0c\u51b3\u5b9a\u5bf9\u8d27\u7269\u8fd0\u8f93\u63d0\u4f9b\u8865\u8d34\u3002\u5171\u6709 n \u4e2a\u7f16\u53f7\u4e3a 1 \u5230 n \u7684\u57ce\u5e02\uff0c\u901a\u8fc7\u9053\u8def\u7f51\u7edc\u8fde\u63a5\uff0c\u7f51\u7edc\u4e2d\u7684\u9053\u8def\u4ec5\u5141\u8bb8\u4ece\u67d0\u4e2a\u57ce\u5e02\u5355\u5411\u901a\u884c\u5230\u53e6\u4e00\u4e2a\u57ce\u5e02\uff0c\u4e0d\u80fd\u53cd\u5411\u901a\u884c\u3002</p> <p>\u7f51\u7edc\u4e2d\u7684\u9053\u8def\u90fd\u6709\u5404\u81ea\u7684\u8fd0\u8f93\u6210\u672c\u548c\u653f\u5e9c\u8865\u8d34\uff0c\u9053\u8def\u7684\u6743\u503c\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1a\u8fd0\u8f93\u6210\u672c - \u653f\u5e9c\u8865\u8d34\u3002</p> <p>\u6743\u503c\u4e3a\u6b63\u8868\u793a\u6263\u9664\u4e86\u653f\u5e9c\u8865\u8d34\u540e\u8fd0\u8f93\u8d27\u7269\u4ecd\u9700\u652f\u4ed8\u7684\u8d39\u7528\uff1b\u6743\u503c\u4e3a\u8d1f\u5219\u8868\u793a\u653f\u5e9c\u7684\u8865\u8d34\u8d85\u8fc7\u4e86\u652f\u51fa\u7684\u8fd0\u8f93\u6210\u672c\uff0c\u5b9e\u9645\u8868\u73b0\u4e3a\u8fd0\u8f93\u8fc7\u7a0b\u4e2d\u8fd8\u80fd\u8d5a\u53d6\u4e00\u5b9a\u7684\u6536\u76ca\u3002</p> <p>\u8bf7\u627e\u51fa\u4ece\u57ce\u5e02 1 \u5230\u57ce\u5e02 n \u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u4e2d\uff0c\u7efc\u5408\u653f\u5e9c\u8865\u8d34\u540e\u7684\u6700\u4f4e\u8fd0\u8f93\u6210\u672c\u3002</p> <p>\u5982\u679c\u6700\u4f4e\u8fd0\u8f93\u6210\u672c\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u5b83\u8868\u793a\u5728\u9075\u5faa\u6700\u4f18\u8def\u5f84\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u8f93\u8fc7\u7a0b\u4e2d\u53cd\u800c\u80fd\u591f\u5b9e\u73b0\u76c8\u5229\u3002</p> <p>\u57ce\u5e02 1 \u5230\u57ce\u5e02 n \u4e4b\u95f4\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ca1\u6709\u8def\u5f84\u7684\u60c5\u51b5\uff0c\u540c\u65f6\u4fdd\u8bc1\u9053\u8def\u7f51\u7edc\u4e2d\u4e0d\u5b58\u5728\u4efb\u4f55\u8d1f\u6743\u56de\u8def\u3002</p> <p>\u8d1f\u6743\u56de\u8def\u662f\u6307\u4e00\u7cfb\u5217\u9053\u8def\u7684\u603b\u6743\u503c\u4e3a\u8d1f\uff0c\u8fd9\u6837\u7684\u56de\u8def\u4f7f\u5f97\u901a\u8fc7\u53cd\u590d\u7ecf\u8fc7\u56de\u8def\u4e2d\u7684\u9053\u8def\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u5730\u51cf\u5c11\u603b\u6210\u672c\u6216\u65e0\u9650\u5730\u589e\u52a0\u603b\u6536\u76ca\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570 n \u8868\u793a\u8be5\u56fd\u4e00\u5171\u6709 n \u4e2a\u57ce\u5e02\uff0c\u7b2c\u4e8c\u4e2a\u6574\u6570 m \u8868\u793a\u8fd9\u4e9b\u57ce\u5e02\u4e2d\u5171\u6709 m \u6761\u9053\u8def\u3002</p> <p>\u63a5\u4e0b\u6765\u4e3a m \u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e09\u4e2a\u6574\u6570\uff0cs\u3001t \u548c v\uff0c\u8868\u793a s \u53f7\u57ce\u5e02\u8fd0\u8f93\u8d27\u7269\u5230\u8fbe t \u53f7\u57ce\u5e02\uff0c\u9053\u8def\u6743\u503c\u4e3a v\uff08\u5355\u5411\u56fe\uff09\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u5982\u679c\u80fd\u591f\u4ece\u57ce\u5e02 1 \u5230\u8fde\u901a\u5230\u57ce\u5e02 n\uff0c \u8bf7\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd0\u8f93\u6210\u672c\u3002\u5982\u679c\u8be5\u6574\u6570\u662f\u8d1f\u6570\uff0c\u5219\u8868\u793a\u5b9e\u73b0\u4e86\u76c8\u5229\u3002\u5982\u679c\u4ece\u57ce\u5e02 1 \u6ca1\u6709\u8def\u5f84\u53ef\u8fbe\u57ce\u5e02 n\uff0c\u8bf7\u8f93\u51fa \"unconnected\"\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#_2","title":"\u601d\u8def","text":"<p>\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u76ee\u4e3b\u8981\u662f\u6c42\u89e3\u4e00\u4e2a\u8d77\u70b9\u5230\u67d0\u4e2a\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002</p> <p>1\u3001\u5728\u672c\u9898\u4e2d\uff0c\u6c42\u89e3\u7684\u662f\u4ece1-&gt;n\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6ce8\u610f\u5728\u8fd9\u4e9b\u9898\u76ee\u4e2d\u6709\u4e9b\u8fb9\u662f\u8d1f\u6743\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528dijkstra\u7b97\u6cd5\u3002</p> <p>\u56e0\u4e3adijkstra\u7b97\u6cd5\uff0c\u4ed6\u4e3b\u8981\u662f\u6bcf\u6b21\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u4f46\u662f\u5982\u679c\u8def\u5f84\u8fc7\u7a0b\u4e2d\u5b58\u5728\u4e00\u4e2a\u8d1f\u6743\u503c\u7684\u8fb9\uff0c\u90a3\u4e48\u5728\u6c42\u89e3\u6700\u77ed\u8def\u5f84\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u51fa\u73b0\u8d1f\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u9009\u62e9\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u9519\u8fc7\u51fa\u73b0\u8d1f\u6570\u7684\u8fb9\uff0c\u6700\u540e\u5bfc\u81f4\u8ba1\u7b97\u7684\u6700\u77ed\u8def\u5f84\u51fa\u73b0\u9519\u8bef\u3002</p> <p>2\u3001bellman_ford\u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u8def\u5176\u5b9e\u662f\u5229\u7528\u4e86\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u4f7f\u7528minDist[B] = min(minDist[A] + value, minDist[B])</p> <p>\u901a\u8fc7\u5c06\u6574\u4f53\u95ee\u9898\u5206\u89e3\u4e3a\u591a\u6b65\u5b50\u5e8f\u5217\u8fdb\u884c\u6c42\u89e3\uff0c\u4ece\u800c\u5f97\u5230\u7b54\u6848\u3002</p> <p>\u4e0a\u9762\u7684\u90a3\u4e2a\u516c\u5f0f\u5728\u7b97\u6cd5\u4e2d\u88ab\u5b9a\u4e49\u4e3a\u677e\u5f1b\u3002</p> <p>\u6bcf\u4e00\u6b21\u677e\u5f1b\u90fd\u76f8\u5f53\u4e8e\u6c42\u89e3\u4e86\u4e00\u6b21\u4ece1\u5230\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\uff0c\u7b2c\u4e8c\u6b21\u677e\u5f1b\uff0c\u5c31\u4f1a\u5f97\u5230\u957f\u5ea6\u4e3a2\u7684\u6700\u77ed\u8def\u5f84\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u89e31-n\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u9700\u8981n-1\u6b21\u677e\u5f1b\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;climits&gt;\nusing namespace std;\n\nint main() {\n    int n, m, p1, p2, val;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;vector&lt;int&gt;&gt; grid;\n\n    // \u5c06\u6240\u6709\u8fb9\u4fdd\u5b58\u8d77\u6765\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val;\n        // p1 \u6307\u5411 p2\uff0c\u6743\u503c\u4e3a val\n        grid.push_back({p1, p2, val});\n\n    }\n    int start = 1;  // \u8d77\u70b9\n    int end = n;    // \u7ec8\u70b9\n\n    vector&lt;int&gt; minDist(n + 1 , INT_MAX);\n    minDist[start] = 0;\n    for (int i = 1; i &lt; n; i++) { // \u5bf9\u6240\u6709\u8fb9 \u677e\u5f1b n-1 \u6b21\n        for (vector&lt;int&gt; &amp;side : grid) { // \u6bcf\u4e00\u6b21\u677e\u5f1b\uff0c\u90fd\u662f\u5bf9\u6240\u6709\u8fb9\u8fdb\u884c\u677e\u5f1b\n            int from = side[0]; // \u8fb9\u7684\u51fa\u53d1\u70b9\n            int to = side[1]; // \u8fb9\u7684\u5230\u8fbe\u70b9\n            int price = side[2]; // \u8fb9\u7684\u6743\u503c\n            // \u677e\u5f1b\u64cd\u4f5c \n            // minDist[from] != INT_MAX \u9632\u6b62\u4ece\u672a\u8ba1\u7b97\u8fc7\u7684\u8282\u70b9\u51fa\u53d1\n            if (minDist[from] != INT_MAX &amp;&amp; minDist[to] &gt; minDist[from] + price) { \n                minDist[to] = minDist[from] + price;  \n            }\n        }\n    }\n    if (minDist[end] == INT_MAX) cout &lt;&lt; \"unconnected\" &lt;&lt; endl; // \u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\n    else cout &lt;&lt; minDist[end] &lt;&lt; endl; // \u5230\u8fbe\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#spfa","title":"SPFA\u7b97\u6cd5","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1152</p> <p>\u9898\u76ee\u63cf\u8ff0\u548c\u4e0a\u4e00\u4e2a\u9898\u76ee\u4e00\u6837\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#_3","title":"\u601d\u8def","text":"<p>\u8be5\u7b97\u6cd5\u4e3b\u8981\u662f\u4e3a\u4e86\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u6211\u4eec\u53ea\u6709\u5728\u66f4\u65b0\u8fc7\u7684\u6570\u7ec4\u5143\u7d20\uff0c\u4e0b\u4e00\u6b21\u6211\u4eec\u624d\u4f1a\u8fdb\u884c\u677e\u5f1b\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\u6765\u5b58\u50a8\u66f4\u65b0\u8fc7\u7684\u7ed3\u70b9\u3002</p> <p>\u6bcf\u4e00\u6b21\u5982\u679c\u6211\u4eec\u66f4\u65b0\u4e86mindist[x]\u90a3\u4e48\u6211\u4eec\u66f4\u65b0\u5143\u7d20\u7684\u540c\u65f6\uff0c\u5c06\u8be5\u5143\u7d20\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u53ea\u8981\u961f\u5217\u4e2d\u8fd8\u6709\u5143\u7d20\u6211\u4eec\u5c31\u4e00\u76f4\u5faa\u73af\u5904\u7406\u3002</p> <p>\u6211\u4eec\u5982\u4f55\u5b58\u653e\u5f00\u59cb\u65f6\u8f93\u5165\u7684\u8fb9\u5462\uff1f</p> <p>\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u6570\u7ec4\u6765\u5b58\u653e\u5143\u7d20\uff0c\u7136\u540e\u6784\u9020\u4e00\u4e2a\u90bb\u63a5\u8868\uff0c</p> Text Only<pre><code> struct Edge { //\u90bb\u63a5\u8868\n    int to;  // \u94fe\u63a5\u7684\u8282\u70b9\n    int val; // \u8fb9\u7684\u6743\u91cd\n\n    Edge(int t, int w): to(t), val(w) {}  // \u6784\u9020\u51fd\u6570\n};\n vector&lt;list&lt;Edge&gt;&gt; grid(n + 1);\n</code></pre> <p>\u4e0a\u8ff0\u7684\u90e8\u5206\u5b9a\u4e49\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6839\u636e\u601d\u8def\u6765\u7f16\u5199\u4ee3\u7801</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;list&gt;\n#include &lt;climits&gt;\nusing namespace std;\n\nstruct Edge { //\u90bb\u63a5\u8868\n    int to;  // \u94fe\u63a5\u7684\u8282\u70b9\n    int val; // \u8fb9\u7684\u6743\u91cd\n\n    Edge(int t, int w): to(t), val(w) {}  // \u6784\u9020\u51fd\u6570\n};\n\n\nint main() {\n    int n, m, p1, p2, val;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;list&lt;Edge&gt;&gt; grid(n + 1); \n\n    vector&lt;bool&gt; isInQueue(n + 1); // \u52a0\u5165\u4f18\u5316\uff0c\u5df2\u7ecf\u5728\u961f\u91cc\u91cc\u7684\u5143\u7d20\u4e0d\u7528\u91cd\u590d\u6dfb\u52a0\n\n    // \u5c06\u6240\u6709\u8fb9\u4fdd\u5b58\u8d77\u6765\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val;\n        // p1 \u6307\u5411 p2\uff0c\u6743\u503c\u4e3a val\n        grid[p1].push_back(Edge(p2, val));\n    }\n    int start = 1;  // \u8d77\u70b9\n    int end = n;    // \u7ec8\u70b9\n\n    vector&lt;int&gt; minDist(n + 1 , INT_MAX);\n    minDist[start] = 0;\n\n    queue&lt;int&gt; que;\n    que.push(start); \n\n    while (!que.empty()) {\n\n        int node = que.front(); que.pop();\n        isInQueue[node] = false; // \u4ece\u961f\u5217\u91cc\u53d6\u51fa\u7684\u65f6\u5019\uff0c\u8981\u53d6\u6d88\u6807\u8bb0\uff0c\u6211\u4eec\u53ea\u4fdd\u8bc1\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u7684\u5143\u7d20\u4e0d\u7528\u91cd\u590d\u52a0\u5165\n        for (Edge edge : grid[node]) {\n            int from = node;\n            int to = edge.to;\n            int value = edge.val;\n            if (minDist[to] &gt; minDist[from] + value) { // \u5f00\u59cb\u677e\u5f1b\n                minDist[to] = minDist[from] + value; \n                if (isInQueue[to] == false) { // \u5df2\u7ecf\u5728\u961f\u5217\u91cc\u7684\u5143\u7d20\u4e0d\u7528\u91cd\u590d\u6dfb\u52a0\n                    que.push(to);\n                    isInQueue[to] = true;\n                }\n            }\n        }\n\n    }\n    if (minDist[end] == INT_MAX) cout &lt;&lt; \"unconnected\" &lt;&lt; endl; // \u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\n    else cout &lt;&lt; minDist[end] &lt;&lt; endl; // \u5230\u8fbe\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#bellman_ford_1","title":"Bellman_ford\u4e4b\u5224\u65ad\u8d1f\u6743\u56de\u8def","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1153</p> <p>\u9898\u76ee\u63cf\u8ff0\u548c\u4e0a\u9762\u7684\u9898\u76ee\u4e00\u6837\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#_4","title":"\u601d\u8def","text":"<p>\u8fd9\u4e2a\u961f\u5217\u4f18\u5316\u7b97\u6cd5\u4e3b\u8981\u662f\u89e3\u51b3\u6574\u4e2a\u56fe\u4e2d\u5b58\u5728\u4e00\u6761\u8d1f\u6743\u56de\u8def\u7684\u60c5\u51b5\uff0c\u5728\u4e0a\u9762\u7684\u521d\u59cb\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u4e00\u4e2a\u8d1f\u6743\u56de\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6bcf\u6b21\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u7684\u65f6\u5019\u90fd\u4f1a\u7ed9mindist\u53e0\u52a0\u8d1f\u503c\uff0c\u6700\u540e\u7406\u8bba\u4e0a\u80fd\u591f\u53e0\u52a0\u5230\u8d1f\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u5728\u672c\u9898\u4e2d\u6211\u4eec\u5982\u679c\u627e\u5230\u4e00\u4e2a\u8d1f\u6743\u56de\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8f93\u51facircle\uff0c\u5982\u679c\u6ca1\u6709\u8def\u5f84\u5c31\u8f93\u51faunconnected\uff0c\u5269\u4e0b\u7684\u60c5\u51b5\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u5bf9\u5e94\u7684\u8d1f\u6743\u56de\u8def\u4e86\u3002</p> <p>\u5982\u4f55\u5224\u65ad\u8d1f\u6743\u56de\u8def\uff1f</p> <p>\u56e0\u4e3a\u51fa\u73b0\u8d1f\u6743\u56de\u8def\u7684\u65f6\u5019\uff0c\u6bcf\u591a\u4e00\u6b21\u5faa\u73af\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u90a3\u4e2a\u8d1f\u6743\u56de\u8def\u7684mindist\u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u66f4\u65b0\u3002</p> <p>\u4f46\u662f\u5982\u679c\u6ca1\u6709\u8d1f\u6743\u56de\u8def\u5219\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u53d8\u5316\u3002</p> <p>\u56e0\u4e3a\u6211\u4eec\u6b63\u5e38\u662f\u4f7f\u7528n-1\u677e\u5f1b\u6765\u64cd\u4f5c\u76f8\u5173\u7684\u5faa\u73af\u5373\u53ef\uff0c\u6240\u4ee5\u6211\u4eec\u5728n-1\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u6b21\u5faa\u73af\u5373\u53ef\uff0c\u901a\u8fc7\u8fd9\u6b21\u5faa\u73af\uff0c\u5982\u679c\u9700\u8981\u66f4\u65b0\uff0c\u90a3\u4e48\u8868\u793a\u6709\u8d1f\u6743\u56de\u8def\u3002\u4f46\u662f\u6211\u4eec\u5224\u65ad\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u771f\u7684\u5bf9\u5176\u8fdb\u884c\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u5728\u5faa\u73af\u8fc7\u7a0b\u4e2d\u5355\u72ec\u5904\u7406\u7b2cn\u6b21\u677e\u5f1b\u3002</p> <p>\u5177\u4f53\u5b9e\u73b0\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;climits&gt;\nusing namespace std;\n\nint main() {\n    int n, m, p1, p2, val;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;vector&lt;int&gt;&gt; grid;\n\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val;\n        // p1 \u6307\u5411 p2\uff0c\u6743\u503c\u4e3a val\n        grid.push_back({p1, p2, val});\n\n    }\n    int start = 1;  // \u8d77\u70b9\n    int end = n;    // \u7ec8\u70b9\n\n    vector&lt;int&gt; minDist(n + 1 , INT_MAX);\n    minDist[start] = 0;\n    bool flag = false;\n    for (int i = 1; i &lt;= n; i++) { // \u8fd9\u91cc\u6211\u4eec\u677e\u5f1bn\u6b21\uff0c\u6700\u540e\u4e00\u6b21\u5224\u65ad\u8d1f\u6743\u56de\u8def\n        for (vector&lt;int&gt; &amp;side : grid) {\n            int from = side[0];\n            int to = side[1];\n            int price = side[2];\n            if (i &lt; n) {\n                if (minDist[from] != INT_MAX &amp;&amp; minDist[to] &gt; minDist[from] + price) minDist[to] = minDist[from] + price;\n            } else { // \u591a\u52a0\u4e00\u6b21\u677e\u5f1b\u5224\u65ad\u8d1f\u6743\u56de\u8def\n                if (minDist[from] != INT_MAX &amp;&amp; minDist[to] &gt; minDist[from] + price) flag = true;\n\n            }\n        }\n\n    }\n\n    if (flag) cout &lt;&lt; \"circle\" &lt;&lt; endl;\n    else if (minDist[end] == INT_MAX) {\n        cout &lt;&lt; \"unconnected\" &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; minDist[end] &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#bellman_ford_2","title":"bellman_ford\u4e4b\u5355\u6e90\u6709\u9650\u6700\u77ed\u8def","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1154</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u548c\u4e0a\u9762\u51e0\u4e2a\u9898\u7684\u601d\u8def\u5927\u5dee\u4e0d\u5dee\uff0c\u4e3b\u8981\u7684\u533a\u522b\u662f\u5728\u6700\u591a\u7ecf\u8fc7 k \u4e2a\u57ce\u5e02\u7684\u6761\u4ef6\u4e0b\uff0c\u8ba1\u7b97\u4ece\u57ce\u5e02 src \u5230\u57ce\u5e02 dst \u7684\u6700\u4f4e\u8fd0\u8f93\u6210\u672c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#_5","title":"\u601d\u8def","text":"<p>\u8fd9\u4e2a\u9898\u76ee\u7684\u9650\u5236\u5f88\u7b80\u5355\uff0c\u5728\u524d\u9762\u7684\u9898\u76ee\u4e2d\u6211\u4eec\u7684\u677e\u5f1b\u6b21\u6570\u4f9d\u8d56\u4e8e\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u5373n-1\u6b21\uff0c\u4f46\u662f\u5728\u8be5\u9898\u76ee\u4e2d\u6211\u4eec\u9650\u5236\u4e86\u8ddd\u79bb\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4e4b\u524d\u7684\u677e\u5f1bn-1\u6b21\u4fee\u6539\u4e3ak-1\u6b21\u5373\u53ef\u3002</p> <p>\u8981\u6ce8\u610f\u8ba1\u7b97minDist\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u57fa\u4e8e\u4e86\u672c\u6b21\u677e\u5f1b\u7684 minDist\u6570\u503c\uff0c\u800c\u4e0d\u662f\u4e0a\u4e00\u6b21 \u677e\u5f1b\u65f6\u5019minDist\u7684\u6570\u503c\u3002 \u6240\u4ee5\u5728\u6bcf\u6b21\u8ba1\u7b97 minDist \u65f6\u5019\uff0c\u8981\u57fa\u4e8e \u5bf9\u6240\u6709\u8fb9\u4e0a\u4e00\u6b21\u677e\u5f1b\u7684 minDist \u6570\u503c\u624d\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8bb0\u5f55\u4e0a\u4e00\u6b21\u677e\u5f1b\u7684minDist\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\n#include &lt;climits&gt;\nusing namespace std;\n\nint main() {\n    int src, dst,k ,p1, p2, val ,m , n;\n\n    cin &gt;&gt; n &gt;&gt; m;\n\n    vector&lt;vector&lt;int&gt;&gt; grid;\n\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; p1 &gt;&gt; p2 &gt;&gt; val;\n        grid.push_back({p1, p2, val});\n    }\n\n    cin &gt;&gt; src &gt;&gt; dst &gt;&gt; k;\n\n    vector&lt;int&gt; minDist(n + 1 , INT_MAX);\n    minDist[src] = 0;\n    vector&lt;int&gt; minDist_copy(n + 1); // \u7528\u6765\u8bb0\u5f55\u4e0a\u4e00\u6b21\u904d\u5386\u7684\u7ed3\u679c\n    for (int i = 1; i &lt;= k + 1; i++) {\n        minDist_copy = minDist; // \u83b7\u53d6\u4e0a\u4e00\u6b21\u8ba1\u7b97\u7684\u7ed3\u679c\n        for (vector&lt;int&gt; &amp;side : grid) {\n            int from = side[0];\n            int to = side[1];\n            int price = side[2];\n            // \u6ce8\u610f\u4f7f\u7528 minDist_copy \u6765\u8ba1\u7b97 minDist \n            if (minDist_copy[from] != INT_MAX &amp;&amp; minDist[to] &gt; minDist_copy[from] + price) {  \n                minDist[to] = minDist_copy[from] + price;\n            }\n        }\n    }\n    if (minDist[dst] == INT_MAX) cout &lt;&lt; \"unreachable\" &lt;&lt; endl; // \u4e0d\u80fd\u5230\u8fbe\u7ec8\u70b9\n    else cout &lt;&lt; minDist[dst] &lt;&lt; endl; // \u5230\u8fbe\u7ec8\u70b9\u6700\u77ed\u8def\u5f84\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/#ending","title":"ending@!!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/","title":"\u56fe\u8bba\uff084\uff09","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#_1","title":"\u5bfb\u627e\u5b58\u5728\u7684\u8def\u5f84","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1179</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5230 n \uff08\u542b 1 \u548c n \uff09\u3002</p> <p>\u4f60\u7684\u4efb\u52a1\u662f\u5224\u65ad\u662f\u5426\u6709\u4e00\u6761\u4ece\u8282\u70b9 source \u51fa\u53d1\u5230\u8282\u70b9 destination \u7684\u8def\u5f84\u5b58\u5728\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570 N \u548c M\uff0cN \u4ee3\u8868\u8282\u70b9\u7684\u4e2a\u6570\uff0cM \u4ee3\u8868\u8fb9\u7684\u4e2a\u6570\u3002</p> <p>\u540e\u7eed M \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 s \u548c t\uff0c\u4ee3\u8868\u4ece\u8282\u70b9 s \u4e0e\u8282\u70b9 t \u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u3002</p> <p>\u6700\u540e\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u8d77\u59cb\u8282\u70b9 source \u548c\u76ee\u6807\u8282\u70b9 destination\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u662f\u5426\u5b58\u5728\u4ece\u8282\u70b9 source \u5230\u8282\u70b9 destination \u7684\u8def\u5f84\u3002\u5982\u679c\u5b58\u5728\uff0c\u8f93\u51fa 1\uff1b\u5426\u5219\uff0c\u8f93\u51fa 0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#_2","title":"\u601d\u8def","text":"<p>\u57fa\u7840\u601d\u8def\uff1a\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u8981\u5224\u65ad\u662f\u5426\u6709\u4e00\u6761\u4ecesourec\u5230destination\u7684\u8def\u5f84\u5b58\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e76\u67e5\u96c6\u7406\u8bba\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u4e3b\u8981\u89e3\u51b3\u5224\u65ad\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4ee5\u53ca\u5c06\u4e24\u4e2a\u5143\u7d20\u6dfb\u52a0\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5bfb\u627e\u6839\u7ed3\u70b9\u3002</p> <p>\u5e76\u67e5\u96c6\u6a21\u677f\uff1a</p> C++<pre><code>int n = 1005; // n\u6839\u636e\u9898\u76ee\u4e2d\u8282\u70b9\u6570\u91cf\u800c\u5b9a\uff0c\u4e00\u822c\u6bd4\u8282\u70b9\u6570\u91cf\u5927\u4e00\u70b9\u5c31\u597d\nvector&lt;int&gt; father = vector&lt;int&gt; (n, 0); // C++\u91cc\u7684\u4e00\u79cd\u6570\u7ec4\u7ed3\u6784\n\n// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nvoid init() {\n    for (int i = 0; i &lt; n; ++i) {\n        father[i] = i;\n    }\n}\n// \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\nint find(int u) {\n    return u == father[u] ? u : father[u] = find(father[u]); // \u8def\u5f84\u538b\u7f29\n}\n\n// \u5224\u65ad u \u548c v\u662f\u5426\u627e\u5230\u540c\u4e00\u4e2a\u6839\nbool isSame(int u, int v) {\n    u = find(u);\n    v = find(v);\n    return u == v;\n}\n\n// \u5c06v-&gt;u \u8fd9\u6761\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\nvoid join(int u, int v) {\n    u = find(u); // \u5bfb\u627eu\u7684\u6839\n    v = find(v); // \u5bfb\u627ev\u7684\u6839\n    if (u == v) return ; // \u5982\u679c\u53d1\u73b0\u6839\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u7528\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde\u76f4\u63a5\u8fd4\u56de\n    father[v] = u;\n}\n</code></pre> <p>\u4e0a\u8ff0\u6a21\u677f\u7684n\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u9898\u76ee\u6765\u8ba1\u7b97\u5bf9\u5e94\u7684n\u5373\u53ef\u3002</p> <p>join\u5c06\u6bcf\u6761\u8fb9\u52a0\u5165\u96c6\u5408\uff0cissame\u5224\u65ad\u662f\u5426\u540c\u4e00\u4e2a\u6839\u3002</p> <p>\u672c\u9898\u5176\u5b9e\u5c31\u662f\u5c06\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u52a0\u5165\u96c6\u5408\uff0c\u4e00\u76f4\u904d\u5386\u8fb9\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u8fb9\u7684\u7ec8\u70b9\u5df2\u7ecf\u5728\u96c6\u5408\u4e2d\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u56fe\u5b58\u5728\u8fb9\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint n; // \u8282\u70b9\u6570\u91cf\nvector&lt;int&gt; father = vector&lt;int&gt; (101, 0); // \u6309\u7167\u8282\u70b9\u5927\u5c0f\u5b9a\u4e49\u6570\u7ec4\u5927\u5c0f\n\n// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nvoid init() {\n    for (int i = 1; i &lt;= n; i++)  father[i] = i;\n}\n// \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\nint find(int u) {\n    return u == father[u] ? u : father[u] = find(father[u]);\n}\n\n// \u5224\u65ad u \u548c v\u662f\u5426\u627e\u5230\u540c\u4e00\u4e2a\u6839\nbool isSame(int u, int v) {\n    u = find(u);\n    v = find(v);\n    return u == v;\n}\n\n// \u5c06v-&gt;u \u8fd9\u6761\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\nvoid join(int u, int v) {\n    u = find(u); // \u5bfb\u627eu\u7684\u6839\n    v = find(v); // \u5bfb\u627ev\u7684\u6839\n    if (u == v) return ; // \u5982\u679c\u53d1\u73b0\u6839\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u7528\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde\u76f4\u63a5\u8fd4\u56de\n    father[v] = u;\n}\n\nint main() {\n    int m, s, t, source, destination;\n    cin &gt;&gt; n &gt;&gt; m;\n    init();\n    while (m--) {\n        cin &gt;&gt; s &gt;&gt; t;\n        join(s, t);\n    }\n    cin &gt;&gt; source &gt;&gt; destination;\n    if (isSame(source, destination)) cout &lt;&lt; 1 &lt;&lt; endl;\n    else cout &lt;&lt; 0 &lt;&lt; endl;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#_3","title":"\u5197\u4f59\u8fde\u63a5","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1181</p> <p>\u63cf\u8ff0\uff1a</p> <p>\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u770b\u5f53\u524d\u56fe\u662f\u5426\u80fd\u53d8\u6210\u4e00\u68f5\u6811\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8f93\u51fa\u53ef\u4ee5\u5220\u9664\u7684\u8fb9\uff0c\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8bf7\u5220\u9664\u6807\u51c6\u8f93\u5165\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u90a3\u6761\u8fb9\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#_4","title":"\u601d\u8def","text":"<p>\u4ece\u524d\u5f80\u540e\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff0c\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u5c31\u52a0\u5165\u96c6\u5408\u3002\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u8bf4\u660e\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u8fde\u5728\u4e00\u8d77\u4e86\uff0c\u518d\u52a0\u5165\u5f53\u524d\u8fb9\u5c31\u4e00\u5b9a\u51fa\u73b0\u73af\u4e86\u3002</p> <p>c++\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint n; // \u8282\u70b9\u6570\u91cf\nvector&lt;int&gt; father(1001, 0); // \u6309\u7167\u8282\u70b9\u5927\u5c0f\u8303\u56f4\u5b9a\u4e49\u6570\u7ec4\n\n// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nvoid init() {\n    for (int i = 0; i &lt;= n; ++i) {\n        father[i] = i;\n    }\n}\n// \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\nint find(int u) {\n    return u == father[u] ? u : father[u] = find(father[u]);\n}\n// \u5224\u65ad u \u548c v\u662f\u5426\u627e\u5230\u540c\u4e00\u4e2a\u6839\nbool isSame(int u, int v) {\n    u = find(u);\n    v = find(v);\n    return u == v;\n}\n// \u5c06v-&gt;u \u8fd9\u6761\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\nvoid join(int u, int v) {\n    u = find(u); // \u5bfb\u627eu\u7684\u6839\n    v = find(v); // \u5bfb\u627ev\u7684\u6839\n    if (u == v) return ; // \u5982\u679c\u53d1\u73b0\u6839\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u7528\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde\u76f4\u63a5\u8fd4\u56de\n    father[v] = u;\n}\n\nint main() {\n    int s, t;\n    cin &gt;&gt; n;\n    init();\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; s &gt;&gt; t;\n        if (isSame(s, t)) {\n            cout &lt;&lt; s &lt;&lt; \" \" &lt;&lt; t &lt;&lt; endl;\n            return 0;\n        } else {\n            join(s, t);\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#2","title":"\u5197\u4f59\u8fde\u63a52","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1182</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740 n \u4e2a\u8282\u70b9(\u8282\u70b9\u7f16\u53f7 \u4ece 1 \u5230 n)\uff0cn \u6761\u8fb9\uff0c\u8bf7\u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5220\u9664\u8be5\u6761\u8fb9\u4e4b\u540e\u8be5\u6709\u5411\u56fe\u53ef\u4ee5\u88ab\u5f53\u4f5c\u4e00\u9897\u6709\u5411\u6811\u3002</p> <p>\u4e0a\u4e00\u4e2a\u9898\u662f\u65e0\u5411\u56fe\uff0c\u8fd9\u4e2a\u9898\u662f\u6709\u5411\u56fe\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%884%EF%BC%89/#_5","title":"\u601d\u8def","text":"<p>\u5728\u56fe\u4e2d\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c\u5219\u8868\u793a\u627e\u5230\u4e00\u6761\u9700\u8981\u5220\u9664\u7684\u8fb9\u4e86\u3002</p> <p>\u5728\u7f16\u5199\u4ee3\u7801\u8fc7\u7a0b\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u3002</p> <p>\u524d\u4e24\u79cd\u5165\u5ea6\u4e3a2\u7684\u60c5\u51b5\uff0c\u4e00\u5b9a\u662f\u5220\u9664\u6307\u5411\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\u7684\u4e24\u6761\u8fb9\u5176\u4e2d\u7684\u4e00\u6761\uff0c\u5982\u679c\u5220\u4e86\u4e00\u6761\uff0c\u5224\u65ad\u8fd9\u4e2a\u56fe\u662f\u4e00\u4e2a\u6811\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u662f\u7b54\u6848\u3002</p> <p>\u540c\u65f6\u6ce8\u610f\u8981\u4ece\u540e\u5411\u524d\u904d\u5386\uff0c\u56e0\u4e3a\u5982\u679c\u4e24\u6761\u8fb9\u5220\u54ea\u4e00\u6761\u90fd\u53ef\u4ee5\u6210\u4e3a\u6811\uff0c\u5c31\u5220\u6700\u540e\u90a3\u4e00\u6761\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint n;\nvector&lt;int&gt; father (1001, 0);\n// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nvoid init() {\n    for (int i = 1; i &lt;= n; ++i) {\n        father[i] = i;\n    }\n}\n// \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\nint find(int u) {\n    return u == father[u] ? u : father[u] = find(father[u]);\n}\n// \u5c06v-&gt;u \u8fd9\u6761\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\nvoid join(int u, int v) {\n    u = find(u);\n    v = find(v);\n    if (u == v) return ;\n    father[v] = u;\n}\n// \u5224\u65ad u \u548c v\u662f\u5426\u627e\u5230\u540c\u4e00\u4e2a\u6839\nbool same(int u, int v) {\n    u = find(u);\n    v = find(v);\n    return u == v;\n}\n\n// \u5728\u6709\u5411\u56fe\u91cc\u627e\u5230\u5220\u9664\u7684\u90a3\u6761\u8fb9\uff0c\u4f7f\u5176\u53d8\u6210\u6811\nvoid getRemoveEdge(const vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n    init(); // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for (int i = 0; i &lt; n; i++) { // \u904d\u5386\u6240\u6709\u7684\u8fb9\n        if (same(edges[i][0], edges[i][1])) { // \u6784\u6210\u6709\u5411\u73af\u4e86\uff0c\u5c31\u662f\u8981\u5220\u9664\u7684\u8fb9\n            cout &lt;&lt; edges[i][0] &lt;&lt; \" \" &lt;&lt; edges[i][1];\n            return;\n        } else {\n            join(edges[i][0], edges[i][1]);\n        }\n    }\n}\n\n// \u5220\u4e00\u6761\u8fb9\u4e4b\u540e\u5224\u65ad\u662f\u4e0d\u662f\u6811\nbool isTreeAfterRemoveEdge(const vector&lt;vector&lt;int&gt;&gt;&amp; edges, int deleteEdge) {\n    init(); // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for (int i = 0; i &lt; n; i++) {\n        if (i == deleteEdge) continue;\n        if (same(edges[i][0], edges[i][1])) { // \u6784\u6210\u6709\u5411\u73af\u4e86\uff0c\u4e00\u5b9a\u4e0d\u662f\u6811\n            return false;\n        }\n        join(edges[i][0], edges[i][1]);\n    }\n    return true;\n}\n\nint main() {\n    int s, t;\n    vector&lt;vector&lt;int&gt;&gt; edges;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; inDegree(n + 1, 0); // \u8bb0\u5f55\u8282\u70b9\u5165\u5ea6\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; s &gt;&gt; t;\n        inDegree[t]++;\n        edges.push_back({s, t});\n    }\n\n    vector&lt;int&gt; vec; // \u8bb0\u5f55\u5165\u5ea6\u4e3a2\u7684\u8fb9\uff08\u5982\u679c\u6709\u7684\u8bdd\u5c31\u4e24\u6761\u8fb9\uff09\n    // \u627e\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u8fb9\uff0c\u6ce8\u610f\u8981\u5012\u5e8f\uff0c\u56e0\u4e3a\u4f18\u5148\u5220\u9664\u6700\u540e\u51fa\u73b0\u7684\u4e00\u6761\u8fb9\n    for (int i = n - 1; i &gt;= 0; i--) {\n        if (inDegree[edges[i][1]] == 2) {\n            vec.push_back(i);\n        }\n    }\n    // \u60c5\u51b5\u4e00\u3001\u60c5\u51b5\u4e8c\n    if (vec.size() &gt; 0) {\n        // \u653e\u5728vec\u91cc\u7684\u8fb9\u5df2\u7ecf\u6309\u7167\u5012\u53d9\u653e\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4f18\u5148\u5220vec[0]\u8fd9\u6761\u8fb9\n        if (isTreeAfterRemoveEdge(edges, vec[0])) {\n            cout &lt;&lt; edges[vec[0]][0] &lt;&lt; \" \" &lt;&lt; edges[vec[0]][1];\n        } else {\n            cout &lt;&lt; edges[vec[1]][0] &lt;&lt; \" \" &lt;&lt; edges[vec[1]][1];\n        }\n        return 0;\n    }\n\n    // \u5904\u7406\u60c5\u51b5\u4e09\n    // \u660e\u786e\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u6709\u5411\u73af\uff0c\u627e\u5230\u6784\u6210\u73af\u7684\u8fb9\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\n    getRemoveEdge(edges);\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%B8%89%EF%BC%89/","title":"\u5c9b\u5c7f\u7684\u5468\u957f","text":"<p>\u9898\u76ee\u6765\u6e90\uff1a\u9898\u76ee\u94fe\u63a5 \u7b80\u5355\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u5c9b\u5c7f\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u901a\u8fc7\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u7684\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u5916\u5747\u88ab\u6c34\u5305\u56f4\u3002\u5728\u77e9\u9635\u4e2d\u6070\u597d\u62e5\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff0c\u5047\u8bbe\u7ec4\u6210\u5c9b\u5c7f\u7684\u9646\u5730\u8fb9\u957f\u90fd\u4e3a 1\uff0c\u8bf7\u8ba1\u7b97\u5c9b\u5c7f\u7684\u5468\u957f\u3002\u5c9b\u5c7f\u5185\u90e8\u6ca1\u6709\u6c34\u57df\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u4e4b\u540e N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u5355\u5143\u683c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u5468\u957f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%B8%89%EF%BC%89/#_2","title":"\u601d\u8def","text":"<p>\u8fd9\u4e2a\u9898\u76ee\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u9700\u8981\u5bf9\u8fb9\u754c\u7684\u8fb9\u6761\u6570\u8fdb\u884c\u7edf\u8ba1\u3002\u4e24\u4e2a\u601d\u8def\uff0c\u4e00\u79cd\u662f\u6570\u5b66\u601d\u8def\uff0c\u76f4\u63a5\u4f7f\u7528\u6570\u5b66\u516c\u5f0f\u8ba1\u7b97\uff0c\u4e00\u79cd\u662f\u904d\u5386\u6bcf\u4e00\u4e2a\u5c9b\u5c7f\uff0c\u5224\u65ad\u56db\u4e2a\u65b9\u5411\u7684\u5143\u7d20\uff0c\u5982\u679c\u662f\u6d77\u6d0b\u6216\u8005\u662f\u8fb9\u754c\uff0c\u90a3\u4e48\u6761\u6570\u5c31\u52a0\u4e00\uff0c\u5426\u5219\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002n\u4e3a\u5c9b\u5c7f\u7684\u9646\u5730\u6570\u91cf\uff0c\u76f8\u90bb\u8fb9\u6570\u4e3alin\u3002 \u6570\u5b66\u516c\u5f0f\uff1a $$ num=n4-lin2 $$ \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6709\u4e24\u79cd\u4ee3\u7801\u7f16\u5199\u9009\u62e9\uff1a 1\u3001\u5224\u65ad\u6cd5 C++<pre><code>#include &lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint dir[4][2]={-1,0,0,-1,1,0,0,1};\nint main(){\n    //read data\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n,vector&lt;int&gt;(m,0));\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            cin&gt;&gt;grid[i][j];\n        }\n    }\n    int result=0;\n    //\u8fdb\u884c\u5faa\u73af\u5224\u65ad\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            if(grid[i][j]==1){\n            for(int k=0;k&lt;4;k++){\n                //\u5224\u65ad\u56db\u4e2a\u65b9\u5411\u7684\u5143\u7d20\n                int nextx=i+dir[k][0];\n                int nexty=j+dir[k][1];\n                if(grid[nextx][nexty]==0||nextx&lt;0||nexty&lt;0||nextx&gt;n-1||nexty&gt;m-1) result++;\n            }\n\n            }\n        }\n    }\n    cout&lt;&lt;result&lt;&lt;endl;\n}\n</code></pre> 2\u3001\u6570\u5b66\u516c\u5f0f C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main(){\n    //read data\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n,vector&lt;int&gt;(m,0));\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            cin&gt;&gt;grid[i][j];\n        }\n    }\n    int gridnum=0;\n    int linnum=0;\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            if(grid[i][j]==1) {\n            gridnum++;\n            if(i-1&gt;=0&amp;&amp;grid[i-1][j]==1) linnum++;\n            if(j-1&gt;=&amp;&amp;grid[i][j-1]==1) linnum++;\n            }\n\n        }\n    }\n    cout&lt;&lt;girdnum*4-linnum*2&lt;&lt;endl;\n}\n</code></pre> \u6574\u4f53\u4e0a\u8be5\u9898\u7684\u89e3\u6cd5\u5c31\u662f\u8fd9\u6837\u5566\u3002 \u8fd9\u6b21\u4e3b\u8981\u662f\u4f7f\u7528obstdin\u8fd9\u4e2a\u8f6f\u4ef6\u8bd5\u4e00\u8bd5\u5199\u6587\u7ae0\uff0c\u719f\u6089\u719f\u6089\u624b\u611f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/","title":"\u56fe\u8bba\uff08\u4e8c\uff09","text":"<p>\u5bf9\u4e8e\u5b66\u4e60\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u603b\u7ed3\u548c\u7b80\u5355\u56de\u987e</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_2","title":"\u6c89\u9ed8\u5b64\u5c9b","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1174</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u5c9b\u5c7f\u6307\u7684\u662f\u7531\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u5355\u5143\u683c\u7ec4\u6210\u7684\u533a\u57df\uff0c\u4e14\u5b8c\u5168\u88ab\u6c34\u57df\u5355\u5143\u683c\u5305\u56f4\u3002\u5b64\u5c9b\u662f\u90a3\u4e9b\u4f4d\u4e8e\u77e9\u9635\u5185\u90e8\u3001\u6240\u6709\u5355\u5143\u683c\u90fd\u4e0d\u63a5\u89e6\u8fb9\u7f18\u7684\u5c9b\u5c7f\u3002</p> <p>\u73b0\u5728\u4f60\u9700\u8981\u5c06\u6240\u6709\u5b64\u5c9b\u201c\u6c89\u6ca1\u201d\uff0c\u5373\u5c06\u5b64\u5c9b\u4e2d\u7684\u6240\u6709\u9646\u5730\u5355\u5143\u683c\uff081\uff09\u8f6c\u53d8\u4e3a\u6c34\u57df\u5355\u5143\u683c\uff080\uff09\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u4e4b\u540e N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u5355\u5143\u683c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u5c06\u5b64\u5c9b\u201c\u6c89\u6ca1\u201d\u4e4b\u540e\u7684\u5c9b\u5c7f\u77e9\u9635\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_3","title":"\u601d\u8def","text":"<p>\u672c\u9898\u9700\u8981\u627e\u51fa\u6c89\u6ca1\u5b8c\u5b64\u5c9b\u4e4b\u540e\u7684\u5730\u56fe\u3002</p> <p>\u56e0\u4e3a\u5b64\u5c9b\u662f\u6307\u5728\u56fe\u4e2d\u95f4\u7684\u4e0d\u548c\u8fb9\u754c\u8fde\u901a\u7684\u5c9b\u5c7f\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5229\u7528dfs\u5bfb\u627e\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u8fb9\u754c\u7684\u76f8\u90bb\u5c9b\u5c7f\u5373\u53ef\u3002\u7136\u540e\u5c06\u5bf9\u5e94\u5c9b\u5c7f\u8fdb\u884c\u6807\u8bb0\u4e3a2\u4e4b\u7c7b\u7684\u5176\u4ed6\u6570\u5b57\uff0c\u7136\u540e\u91cd\u65b0\u904d\u5386\uff0c\u5bfb\u627e\u6240\u6709\u6570\u5b57\u4e3a1\u7684\u5c9b\u5c7f\uff0c\u53ea\u8981\u9047\u5230\u4e00\u5757\u9646\u5730\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u53d8\u6210\u6d77\u6d0b\u5373\u53ef\uff0c\u9047\u52302\u5c31\u5c06\u5176\u53d8\u62101\u3002</p> <p>\u4ee3\u7801\uff1a</p> <p>\u7b2c\u4e00\u90e8\u5206dfs</p> C++<pre><code>int dir[4][2] = {-1, 0, 0, -1, 1, 0, 0, 1}; // \u4fdd\u5b58\u56db\u4e2a\u65b9\u5411\nvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y) {\n    grid[x][y] = 2;\n    for (int i = 0; i &lt; 4; i++) { // \u5411\u56db\u4e2a\u65b9\u5411\u904d\u5386\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        // \u8d85\u8fc7\u8fb9\u754c\n        if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;\n        // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u4e0d\u7ee7\u7eed\u904d\u5386\n        if (grid[nextx][nexty] == 0 || grid[nextx][nexty] == 2) continue;\n        dfs (grid, nextx, nexty);\n    }\n    return;\n}\n</code></pre> <p>\u7b2c\u4e8c\u90e8\u5206\u8bfb\u53d6\u6570\u636e</p> C++<pre><code>int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n</code></pre> <p>\u7b2c\u4e09\u90e8\u5206\u5904\u7406\u8fb9\u754c\u5c9b\u5c7f</p> C++<pre><code>// \u6b65\u9aa4\u4e00\uff1a\n    // \u4ece\u5de6\u4fa7\u8fb9\uff0c\u548c\u53f3\u4fa7\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int i = 0; i &lt; n; i++) {\n        if (grid[i][0] == 1) dfs(grid, i, 0);\n        if (grid[i][m - 1] == 1) dfs(grid, i, m - 1);\n    }\n\n    // \u4ece\u4e0a\u8fb9\u548c\u4e0b\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int j = 0; j &lt; m; j++) {\n        if (grid[0][j] == 1) dfs(grid, 0, j);\n        if (grid[n - 1][j] == 1) dfs(grid, n - 1, j);\n    }\n</code></pre> <p>\u7b2c\u56db\u90e8\u5206\u5904\u7406\u5b64\u5c9b</p> C++<pre><code>// \u6b65\u9aa4\u4e8c\u3001\u6b65\u9aa4\u4e09\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (grid[i][j] == 1) grid[i][j] = 0;\n            if (grid[i][j] == 2) grid[i][j] = 1;\n        }\n    }\n</code></pre> <p>\u603b\u4ee3\u7801</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint dir[4][2] = {-1, 0, 0, -1, 1, 0, 0, 1}; // \u4fdd\u5b58\u56db\u4e2a\u65b9\u5411\nvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y) {\n    grid[x][y] = 2;\n    for (int i = 0; i &lt; 4; i++) { // \u5411\u56db\u4e2a\u65b9\u5411\u904d\u5386\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        // \u8d85\u8fc7\u8fb9\u754c\n        if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;\n        // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u4e0d\u7ee7\u7eed\u904d\u5386\n        if (grid[nextx][nexty] == 0 || grid[nextx][nexty] == 2) continue;\n        dfs (grid, nextx, nexty);\n    }\n    return;\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n\n    // \u6b65\u9aa4\u4e00\uff1a\n    // \u4ece\u5de6\u4fa7\u8fb9\uff0c\u548c\u53f3\u4fa7\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int i = 0; i &lt; n; i++) {\n        if (grid[i][0] == 1) dfs(grid, i, 0);\n        if (grid[i][m - 1] == 1) dfs(grid, i, m - 1);\n    }\n\n    // \u4ece\u4e0a\u8fb9\u548c\u4e0b\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int j = 0; j &lt; m; j++) {\n        if (grid[0][j] == 1) dfs(grid, 0, j);\n        if (grid[n - 1][j] == 1) dfs(grid, n - 1, j);\n    }\n    // \u6b65\u9aa4\u4e8c\u3001\u6b65\u9aa4\u4e09\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (grid[i][j] == 1) grid[i][j] = 0;\n            if (grid[i][j] == 2) grid[i][j] = 1;\n        }\n    }\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cout &lt;&lt; grid[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_4","title":"\u6c34\u6d41\u95ee\u9898","text":"<p>\u9898\u76ee\u63cf\u8ff0\uff1ahttps://kamacoder.com/problempage.php?pid=1175</p> <p>\u7b80\u7b54\u63cf\u8ff0\uff1a</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1a</p> <p>\u73b0\u6709\u4e00\u4e2a N \u00d7 M \u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u5305\u542b\u4e00\u4e2a\u6570\u503c\uff0c\u8fd9\u4e2a\u6570\u503c\u4ee3\u8868\u8be5\u4f4d\u7f6e\u7684\u76f8\u5bf9\u9ad8\u5ea6\u3002\u77e9\u9635\u7684\u5de6\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u88ab\u8ba4\u4e3a\u662f\u7b2c\u4e00\u7ec4\u8fb9\u754c\uff0c\u800c\u77e9\u9635\u7684\u53f3\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u88ab\u89c6\u4e3a\u7b2c\u4e8c\u7ec4\u8fb9\u754c\u3002</p> <p>\u77e9\u9635\u6a21\u62df\u4e86\u4e00\u4e2a\u5730\u5f62\uff0c\u5f53\u96e8\u6c34\u843d\u5728\u4e0a\u9762\u65f6\uff0c\u6c34\u4f1a\u6839\u636e\u5730\u5f62\u7684\u503e\u659c\u5411\u4f4e\u5904\u6d41\u52a8\uff0c\u4f46\u53ea\u80fd\u4ece\u8f83\u9ad8\u6216\u7b49\u9ad8\u7684\u5730\u70b9\u6d41\u5411\u8f83\u4f4e\u6216\u7b49\u9ad8\u5e76\u4e14\u76f8\u90bb\uff08\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\uff09\u7684\u5730\u70b9\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u786e\u5b9a\u90a3\u4e9b\u5355\u5143\u683c\uff0c\u4ece\u8fd9\u4e9b\u5355\u5143\u683c\u51fa\u53d1\u7684\u6c34\u53ef\u4ee5\u8fbe\u5230\u7b2c\u4e00\u7ec4\u8fb9\u754c\u548c\u7b2c\u4e8c\u7ec4\u8fb9\u754c\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N \u548c M\uff0c\u5206\u522b\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u540e\u7eed N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6574\u6570\uff0c\u8868\u793a\u77e9\u9635\u4e2d\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u9ad8\u5ea6\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u8f93\u51fa\u5171\u6709\u591a\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e24\u4e2a\u6574\u6570\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u53ef\u8fbe\u7b2c\u4e00\u7ec4\u8fb9\u754c\u548c\u7b2c\u4e8c\u7ec4\u8fb9\u754c\u7684\u5355\u5143\u683c\u7684\u5750\u6807\uff0c\u8f93\u51fa\u987a\u5e8f\u4efb\u610f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_5","title":"\u601d\u8def","text":"<p>\u56e0\u4e3a\u662f\u5bfb\u627e\u90a3\u4e9b\u80fd\u591f\u4ece\u9ad8\u70b9\u6d41\u5230\u4f4e\u70b9\u7684\u5c9b\u5c7f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u6765\u5bfb\u627e\uff0c\u6211\u4eec\u5148\u7b2c\u4e00\u8fb9\u754c\u4ece\u4f4e\u5230\u9ad8\u80fd\u591f\u5230\u8fbe\u7684\u70b9\uff0c\u7136\u540e\u5bfb\u627e\u4ece\u7b2c\u4e8c\u8fb9\u754c\u4ece\u4f4e\u5230\u9ad8\u80fd\u591f\u8fbe\u5230\u7684\u70b9\uff0c\u6700\u540e\u5224\u65ad\u54ea\u4e9b\u70b9\u80fd\u591f\u540c\u65f6\u5230\u8fbe\u7b2c\u4e00\u7b2c\u4e8c\u8fb9\u754c\uff0c\u53cd\u6620\u5230\u4ee3\u7801\u4e0a\u5c31\u662f\u5f53\u524dfirst\u8fb9\u754c\u6570\u7ec4\u548cSecond\u8fb9\u754c\u6570\u7ec4\u7684\u5bf9\u5e94\u70b9\u540c\u65f6\u6807\u8bb0\u8fc7\u7684\u70b9\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint n, m;\nint dir[4][2] = {-1, 0, 0, -1, 1, 0, 0, 1};\nvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n    if (visited[x][y]) return;\n\n    visited[x][y] = true;\n\n    for (int i = 0; i &lt; 4; i++) {\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        if (nextx &lt; 0 || nextx &gt;= n || nexty &lt; 0 || nexty &gt;= m) continue;\n        if (grid[x][y] &gt; grid[nextx][nexty]) continue; // \u6ce8\u610f\uff1a\u8fd9\u91cc\u662f\u4ece\u4f4e\u5411\u9ad8\u904d\u5386\n\n        dfs (grid, visited, nextx, nexty);\n    }\n    return;\n}\n\n\n\nint main() {\n\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n    // \u6807\u8bb0\u4ece\u7b2c\u4e00\u7ec4\u8fb9\u754c\u4e0a\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u53ef\u4ee5\u904d\u5386\u7684\u8282\u70b9\n    vector&lt;vector&lt;bool&gt;&gt; firstBorder(n, vector&lt;bool&gt;(m, false));\n\n    // \u6807\u8bb0\u4ece\u7b2c\u4e00\u7ec4\u8fb9\u754c\u4e0a\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u53ef\u4ee5\u904d\u5386\u7684\u8282\u70b9\n    vector&lt;vector&lt;bool&gt;&gt; secondBorder(n, vector&lt;bool&gt;(m, false));\n\n    // \u4ece\u6700\u4e0a\u548c\u6700\u4e0b\u884c\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u9ad8\u5904\u904d\u5386\n    for (int i = 0; i &lt; n; i++) {\n        dfs (grid, firstBorder, i, 0); // \u904d\u5386\u6700\u5de6\u5217\uff0c\u63a5\u89e6\u7b2c\u4e00\u7ec4\u8fb9\u754c\n        dfs (grid, secondBorder, i, m - 1); // \u904d\u5386\u6700\u53f3\u5217\uff0c\u63a5\u89e6\u7b2c\u4e8c\u7ec4\u8fb9\u754c\n    }\n\n    // \u4ece\u6700\u5de6\u548c\u6700\u53f3\u5217\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u9ad8\u5904\u904d\u5386\n    for (int j = 0; j &lt; m; j++) {\n        dfs (grid, firstBorder, 0, j); // \u904d\u5386\u6700\u4e0a\u884c\uff0c\u63a5\u89e6\u7b2c\u4e00\u7ec4\u8fb9\u754c\n        dfs (grid, secondBorder, n - 1, j); // \u904d\u5386\u6700\u4e0b\u884c\uff0c\u63a5\u89e6\u7b2c\u4e8c\u7ec4\u8fb9\u754c\n    }\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            // \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\uff0c\u4ece\u7b2c\u4e00\u7ec4\u8fb9\u754c\u548c\u7b2c\u4e8c\u7ec4\u8fb9\u754c\u51fa\u53d1\u90fd\u904d\u5386\u8fc7\uff0c\u5c31\u662f\u7ed3\u679c\n            if (firstBorder[i][j] &amp;&amp; secondBorder[i][j]) cout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; endl;;\n        }\n    }\n\n\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1ao(n*m)</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1ao(n*m)</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_6","title":"\u5efa\u9020\u6700\u5927\u4eba\u5de5\u5c9b","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1176</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u5c06\u77e9\u9635\u4e2d\u7684\u4e00\u683c\u6c34\u53d8\u4e3a\u4e00\u5757\u9646\u5730\uff0c\u5728\u6267\u884c\u4e86\u6b64\u64cd\u4f5c\u4e4b\u540e\uff0c\u77e9\u9635\u4e2d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u662f\u591a\u5c11\u3002</p> <p>\u5c9b\u5c7f\u9762\u79ef\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a\u7ec4\u6210\u5c9b\u5c7f\u7684\u9646\u5730\u7684\u603b\u6570\u3002\u5c9b\u5c7f\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u901a\u8fc7\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u5916\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u4e4b\u540e N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u5355\u5143\u683c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_7","title":"\u601d\u8def","text":"<p>\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u5c9b\u5c7f\u90fd\u8fdb\u884c\u6807\u8bb0\uff0c\u6bd4\u5982\u67095\u4e2a\u5c9b\u5c7f\uff0c\u56e0\u4e3a\u521d\u59cb\u72b6\u6001\u4e0b\u6211\u4eec\u4f1a\u6709\u6bcf\u4e2a\u5c9b\u5c7f\u90fd\u6807\u8bb0\u4e3a1\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u6700\u5f00\u59cb\u626b\u63cf\u5230\u7684\u6240\u6709\u5c9b\u5c7f\u90fd\u8fdb\u884c\u4fee\u6539\u6807\u8bb0\uff0c\u4e94\u4e2a\u5c9b\u5c7f\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u5c06\u5c9b\u5c7f\u6807\u8bb0\u4e3a2,3,4\uff0c5,6</p> <p>\u5e76\u4e14\u6807\u8bb0\u5bf9\u5e94\u7684\u9762\u79ef\uff0c\u7528map\u6765\u5b58\u50a8\u5373\u53ef\u3002\u7136\u540e\u6211\u4eec\u904d\u5386\u6240\u6709\u6d77\u6d0b\uff0c\u8ba1\u7b97\u6bcf\u4e00\u5757\u6d77\u6d0b\u76f8\u8fde\u7684\u5468\u56f4\u5c9b\u5c7f\u52a0\u4e0a\u8fd9\u4e00\u5757\u6d77\u6d0b\u4e4b\u540e\u7684\u9762\u79ef\uff0c\u6700\u540e\u6bd4\u8f83\u8fd4\u56de\u6700\u5927\u9762\u79ef\u7684\u5c9b\u5c7f\u5373\u53ef\u3002</p> <p>\u6ce8\u610f\u6211\u4eec\u4e0d\u7528\u4f7f\u7528visited\u6570\u7ec4\uff0c\u56e0\u4e3a\u6211\u4eec\u4f1a\u5c06\u9047\u5230\u7684\u5c9b\u5c7f\u6807\u8bb0\u4e3a\u5bf9\u5e94\u7684mark\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u904d\u5386\u8fc7\u5f97\u5c9b\u5c7f\u7684\u6807\u8bb0\u90fd\u4e0d\u4f1a\u7b49\u4e8e1\uff0c\u8fd9\u6837\u540e\u7eed\u6211\u4eec\u4e0d\u9700\u8981\u8fc7\u591a\u6d6a\u8d39\u7a7a\u95f4\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;unordered_map&gt;\n#include&lt;unordered_set&gt;\nusing namespace std;\nint dir[4][2]={-1,0,0,1,1,0,0,-1};\nint count;\nvoid dfs(vector&lt;vector&lt;int&gt;&gt; &amp;grid,vector&lt;vector&lt;bool&gt;&gt; &amp;visited,int x,int y,int mark){\n    if(visited[x][y]||grid[x][y]==0) return;\n    visited[x][y]=1;\n    grid[x][y] = mark; // \u7ed9\u9646\u5730\u6807\u8bb0\u65b0\u6807\u7b7e\n    count++;//\u9762\u79ef+1\n    for(int i=0;i&lt;4;i++){\n        int nextx=x+dir[i][0];\n        int nexty=y+dir[i][1];\n        //\u5224\u65ad\u8d85\u8303\u56f4\n        if(nextx&lt;0||nexty&lt;0||nextx&gt;grid.size()-1||nexty&gt;grid[0].size()-1) continue;\n        //if(visited[nextx][nexty]||grid[nextx][nexty]==0) continue;\n\n        dfs(grid,visited,nextx,nexty,mark);\n    }\n}\nint main(){\n    //read data\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n,vector&lt;int&gt;(m,0));\n    vector&lt;vector&lt;bool&gt;&gt; visited(n, vector&lt;bool&gt;(m, false)); // \u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u70b9\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            cin&gt;&gt;grid[i][j];\n        }\n    }\n    //\u7edf\u8ba1\u6bcf\u4e2a\u5c9b\u5c7f\u7684\u9762\u79ef\uff0c\u5e76\u8fdb\u884c\u5206\u7ec4\u6807\u8bb0\n    unordered_map&lt;int ,int&gt; gridNum;\n    int mark = 2; // \u8bb0\u5f55\u6bcf\u4e2a\u5c9b\u5c7f\u7684\u7f16\u53f7\n    bool isAllGrid = true; // \u6807\u8bb0\u662f\u5426\u6574\u4e2a\u5730\u56fe\u90fd\u662f\u9646\u5730\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (grid[i][j] == 0) isAllGrid = false;\n            if (!visited[i][j] &amp;&amp; grid[i][j] == 1) {\n                count = 0;\n                dfs(grid, visited, i, j, mark); // \u5c06\u4e0e\u5176\u94fe\u63a5\u7684\u9646\u5730\u90fd\u6807\u8bb0\u4e0a true\n                gridNum[mark] = count; // \u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5c9b\u5c7f\u7684\u9762\u79ef\n                mark++; // \u8bb0\u5f55\u4e0b\u4e00\u4e2a\u5c9b\u5c7f\u7f16\u53f7\n            }\n        }\n    }\n    if (isAllGrid) {\n        cout &lt;&lt; n * m &lt;&lt; endl; // \u5982\u679c\u90fd\u662f\u9646\u5730\uff0c\u8fd4\u56de\u5168\u9762\u79ef\n        return 0; // \u7ed3\u675f\u7a0b\u5e8f\n    }\n    int result = 0; // \u8bb0\u5f55\u6700\u540e\u7ed3\u679c\n    unordered_set&lt;int&gt; visitedGrid; // \u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u5c9b\u5c7f\n    //\u5c06\u6d77\u6d0b\u53d8\u9646\u5730\u5224\u65ad\u5c9b\u5c7f\u9762\u79ef\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;m;j++){\n            count = 1; // \u8bb0\u5f55\u8fde\u63a5\u4e4b\u540e\u7684\u5c9b\u5c7f\u6570\u91cf\n            visitedGrid.clear(); // \u6bcf\u6b21\u4f7f\u7528\u65f6\uff0c\u6e05\u7a7a\n            if(grid[i][j]==0){\n                for (int k = 0; k &lt; 4; k++) {\n                    int neari = i + dir[k][1]; // \u8ba1\u7b97\u76f8\u90bb\u5750\u6807\n                    int nearj = j + dir[k][0];\n                    if (neari &lt; 0 || neari &gt;= n || nearj &lt; 0 || nearj &gt;= m) continue;\n                    if (visitedGrid.count(grid[neari][nearj])) continue; // \u6dfb\u52a0\u8fc7\u7684\u5c9b\u5c7f\u4e0d\u8981\u91cd\u590d\u6dfb\u52a0\n                    // \u628a\u76f8\u90bb\u56db\u9762\u7684\u5c9b\u5c7f\u6570\u91cf\u52a0\u8d77\u6765\n                    count += gridNum[grid[neari][nearj]];\n                    visitedGrid.insert(grid[neari][nearj]); // \u6807\u8bb0\u8be5\u5c9b\u5c7f\u5df2\u7ecf\u6dfb\u52a0\u8fc7\n                }\n            }\n            result = max(result, count);\n        }\n    }\n    cout&lt;&lt;result&lt;&lt;endl;\n\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u6211\u4eec\u8981\u5224\u65ad\u662f\u5426\u6240\u6709\u65b9\u5757\u5168\u662f\u9646\u5730\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u7684\u4ee3\u7801\u903b\u8f91\u4e2d\uff0c\u5982\u679c\u6240\u6709\u90fd\u662f\u9646\u5730\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u5728\u4e00\u5f00\u59cb\u90fd\u8fdb\u884c\u5bf9\u5e94\u7684\u5c9b\u5c7f\u6807\u8bb0\uff0c\u7136\u540e\u5728\u540e\u7eed\u5bfb\u627e\u6d77\u6d0b\u8fdb\u884c\u6539\u53d8\u6210\u9646\u5730\u7684\u65f6\u5019\u4f1a\u4e00\u76f4\u627e\u4e0d\u5230\u4ece\u800c\u5bfc\u81f4\u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u662f1\uff0c\u4ece\u800c\u5bfc\u81f4\u9519\u8bef\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_8","title":"\u5b57\u7b26\u4e32\u63a5\u9f99","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1183</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u5b57\u5178 strList \u4e2d\u4ece\u5b57\u7b26\u4e32 beginStr \u548c endStr \u7684\u8f6c\u6362\u5e8f\u5217\u662f\u4e00\u4e2a\u6309\u4e0b\u8ff0\u89c4\u683c\u5f62\u6210\u7684\u5e8f\u5217\uff1a</p> <ol> <li>\u5e8f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f beginStr\u3002</li> <li>\u5e8f\u5217\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f endStr\u3002</li> <li>\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u7b26\u3002</li> <li>\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5b57\u7b26\u4e32\u5fc5\u987b\u662f\u5b57\u5178 strList \u4e2d\u7684\u5b57\u7b26\u4e32\u3002</li> </ol> <p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32 beginStr \u548c endStr \u548c\u4e00\u4e2a\u5b57\u5178 strList\uff0c\u627e\u5230\u4ece beginStr \u5230 endStr \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u76ee\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 N\uff0c\u8868\u793a\u5b57\u5178 strList \u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u3002 \u7b2c\u4e8c\u884c\u5305\u542b\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u4ee3\u8868 beginStr \u548c endStr\u3002 \u540e\u7eed N \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868 strList \u4e2d\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4ece beginStr \u8f6c\u6362\u5230 endStr \u9700\u8981\u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u5219\u8f93\u51fa 0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_9","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u56fe\uff0c\u8d77\u59cb\u70b9\u662fstartstr,\u7ec8\u70b9\u662fendstr,\u6bcf\u6b21\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5224\u65ad\u65b0\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\u5219\u8868\u793a\u53ef\u884c\uff0c\u7136\u540e\u5bf9\u65b0\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u66f4\u6539\u5b57\u6bcd\uff0c\u91cd\u65b0\u5728\u5b57\u5178\u5224\u65ad\uff0c\u5e76\u4e14\u5bf9\u4e8e\u539f\u6765\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u6807\u8bb0\uff0c\u4ee5\u9632\u65b0\u7684\u5b57\u7b26\u4e32\u53c8\u56de\u6eaf\u5bfc\u81f4\u6b7b\u9501\uff0c\u6700\u540e\u6211\u4eec\u5bfb\u627e\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u5373\u53ef\uff0c\u6240\u4ee5\u76f4\u63a5\u91c7\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u627e\u5230\u7684\u7b2c\u4e00\u4e2aendstr\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5c31\u662f\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;unordered_set&gt;\n#include &lt;unordered_map&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint main() {\n    string beginStr, endStr, str;\n    int n;\n    cin &gt;&gt; n;\n    unordered_set&lt;string&gt; strSet;\n    cin &gt;&gt; beginStr &gt;&gt; endStr;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; str;\n        strSet.insert(str);\n    }\n\n    // \u8bb0\u5f55strSet\u91cc\u7684\u5b57\u7b26\u4e32\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u540c\u65f6\u8bb0\u5f55\u8def\u5f84\u957f\u5ea6\n    unordered_map&lt;string, int&gt; visitMap; // &lt;\u8bb0\u5f55\u7684\u5b57\u7b26\u4e32\uff0c\u8def\u5f84\u957f\u5ea6&gt;\n\n    // \u521d\u59cb\u5316\u961f\u5217\n    queue&lt;string&gt; que;\n    que.push(beginStr);\n\n    // \u521d\u59cb\u5316visitMap\n    visitMap.insert(pair&lt;string, int&gt;(beginStr, 1));\n\n    while(!que.empty()) {\n        string word = que.front();\n        que.pop();\n        int path = visitMap[word]; // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u5728\u8def\u5f84\u4e2d\u7684\u957f\u5ea6\n\n        // \u5f00\u59cb\u5728\u8fd9\u4e2astr\u4e2d\uff0c\u6328\u4e2a\u5b57\u7b26\u53bb\u66ff\u6362\n        for (int i = 0; i &lt; word.size(); i++) {\n            string newWord = word; // \u7528\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\u66ff\u6362str\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8981\u7f6e\u6362\u4e00\u4e2a\u5b57\u7b26\n\n            // \u904d\u538626\u7684\u5b57\u6bcd\n            for (int j = 0 ; j &lt; 26; j++) {\n                newWord[i] = j + 'a';\n                if (newWord == endStr) { // \u53d1\u73b0\u66ff\u6362\u5b57\u6bcd\u540e\uff0c\u5b57\u7b26\u4e32\u4e0e\u7ec8\u70b9\u5b57\u7b26\u4e32\u76f8\u540c\n                    cout &lt;&lt;  path + 1 &lt;&lt; endl; // \u627e\u5230\u4e86\u8def\u5f84 \n                    return 0;\n                }\n                // \u5b57\u7b26\u4e32\u96c6\u5408\u91cc\u51fa\u73b0\u4e86newWord\uff0c\u5e76\u4e14newWord\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n                if (strSet.find(newWord) != strSet.end()\n                        &amp;&amp; visitMap.find(newWord) == visitMap.end()) {\n                    // \u6dfb\u52a0\u8bbf\u95ee\u4fe1\u606f\uff0c\u5e76\u5c06\u65b0\u5b57\u7b26\u4e32\u653e\u5230\u961f\u5217\u4e2d\n                    visitMap.insert(pair&lt;string, int&gt;(newWord, path + 1));\n                    que.push(newWord);\n                }\n            }\n        }\n    }\n\n    // \u6ca1\u627e\u5230\u8f93\u51fa0\n    cout &lt;&lt; 0 &lt;&lt; endl;\n\n}\n</code></pre> <p>\u53cc\u5411bfs\u7684\u8bdd\uff0c\u5c31\u662f\u4ece\u9996\u548c\u5c3e\u90fd\u8fdb\u884c\u540c\u65f6\u904d\u5386\uff0c\u5e76\u8fdb\u884c\u4e0d\u540c\u7684\u6807\u8bb0\uff0c\u5982\u679c\u8bbf\u95ee\u5230\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u6807\u8bb0\uff0c\u5219\u8868\u793a\u8bbf\u95ee\u5230\u4e86\uff0c\u4e24\u4fa7\u8ddd\u79bb\u76f8\u52a0\u5373\u53ef\u3002\u540c\u65f6\u904d\u5386\u611f\u89c9\u8981\u7528\u5230\u591a\u7ebf\u7a0bpthread_init\u4e4b\u7c7b\u7684\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_10","title":"\u6709\u5411\u56fe\u7684\u5b8c\u5168\u53ef\u8fbe\u6027","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1177</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u3010\u9898\u76ee\u63cf\u8ff0\u3011</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5305\u542b N \u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u7f16\u53f7\u5206\u522b\u4e3a 1\uff0c2\uff0c...\uff0cN\u3002\u73b0\u4ece 1 \u53f7\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u53ef\u4ee5\u4ece 1 \u53f7\u8282\u70b9\u7684\u8fb9\u53ef\u4ee5\u5230\u8fbe\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u8f93\u51fa 1\uff0c\u5426\u5219\u8f93\u51fa -1\u3002</p> <p>\u3010\u8f93\u5165\u63cf\u8ff0\u3011</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u8282\u70b9\u6570\u91cf N \u548c\u8fb9\u7684\u6570\u91cf K\u3002 \u540e\u7eed K \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 s \u548c t\uff0c\u8868\u793a\u4ece s \u8282\u70b9\u6709\u4e00\u6761\u8fb9\u5355\u5411\u8fde\u63a5\u5230 t \u8282\u70b9\u3002</p> <p>\u3010\u8f93\u51fa\u63cf\u8ff0\u3011</p> <p>\u5982\u679c\u53ef\u4ee5\u4ece 1 \u53f7\u8282\u70b9\u7684\u8fb9\u53ef\u4ee5\u5230\u8fbe\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u8f93\u51fa 1\uff0c\u5426\u5219\u8f93\u51fa -1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#_11","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u5c31\u662f\u4ece1\u5f00\u59cb\u904d\u5386\uff0c\u5229\u7528dfs\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u672a\u8bbf\u95ee\u8fc7\uff0c\u5e76\u4e14\u5b58\u5728\u8def\u5f84\uff0c\u5219\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8fc7\uff0c\u540c\u65f6\u4e00\u76f4\u904d\u5386\u5230\u6700\u540e\u505c\u6b62\uff0c\u6700\u7ec8\u5bf9visited\u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c\u51fa\u73b0\u4e00\u4e2a\u5143\u7d20\u4e0d\u4e3a1\uff0c\u5219\u8868\u793a\u6709\u5143\u7d20\u672a\u904d\u5386\u5230\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56de1.</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>// \u5199\u6cd5\u4e00\uff1adfs \u5904\u7406\u5f53\u524d\u8bbf\u95ee\u7684\u8282\u70b9\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\nusing namespace std;\n\nvoid dfs(const vector&lt;list&lt;int&gt;&gt;&amp; graph, int key, vector&lt;bool&gt;&amp; visited) {\n    if (visited[key]) {\n        return;\n    }\n    visited[key] = true;\n    list&lt;int&gt; keys = graph[key];\n    for (int key : keys) {\n        // \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u904d\u5386\n        dfs(graph, key, visited);\n    }\n}\n\nint main() {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    // \u8282\u70b9\u7f16\u53f7\u4ece1\u5230n\uff0c\u6240\u4ee5\u7533\u8bf7 n+1 \u8fd9\u4e48\u5927\u7684\u6570\u7ec4\n    vector&lt;list&lt;int&gt;&gt; graph(n + 1); // \u90bb\u63a5\u8868\n    while (m--) {\n        cin &gt;&gt; s &gt;&gt; t;\n        // \u4f7f\u7528\u90bb\u63a5\u8868 \uff0c\u8868\u793a s -&gt; t \u662f\u76f8\u8fde\u7684\n        graph[s].push_back(t);\n    }\n    vector&lt;bool&gt; visited(n + 1, false);\n    dfs(graph, 1, visited);\n    //\u68c0\u67e5\u662f\u5426\u90fd\u8bbf\u95ee\u5230\u4e86\n    for (int i = 1; i &lt;= n; i++) {\n        if (visited[i] == false) {\n            cout &lt;&lt; -1 &lt;&lt; endl;\n            return 0;\n        }\n    }\n    cout &lt;&lt; 1 &lt;&lt; endl;\n}\n</code></pre> <p>\u6211\u4eec\u540c\u65f6\u8981\u6ce8\u610f\u5f53\u524d\u5904\u7406\u7684\u662f\u54ea\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5982\u679c\u662f\u5f53\u524d\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5728dfs\u5185\u90e8\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\uff0c\u5904\u7406\u7684\u662f\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5728\u5faa\u73af\u904d\u5386\u5185\u90e8\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89/#ending","title":"ENDING\uff01","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/","title":"\u56fe\u8bba\uff08\u7b80\u5355\u5c0f\u7ed3\uff09","text":"<p>\u5b66\u4e60\u4ee3\u7801\u968f\u60f3\u5f55\uff0c\u5bf9\u4e8e\u5b66\u4e60\u8fc7\u7a0b\u7684\u7b80\u5355\u603b\u7ed3\uff0c\u4e2a\u4eba\u5b66\u4e60\u4f7f\u7528\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#-dfs","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386-dfs","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5176\u5b9e\u5c31\u662f\u7c7b\u4f3c\u4e8e\u56de\u6eaf\uff0c\u627e\u5230\u4e00\u6761\u8def\u5f84\u4e4b\u540e\uff0c\u6cbf\u7740\u8fd9\u6761\u8def\u8d70\u5230\u9ed1\uff0c\u5230\u5934\u4e4b\u540e\u518d\u56de\u6eaf\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#-bfs","title":"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386-bfs","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u5176\u5b9e\u5c31\u7c7b\u4f3c\u4e8e\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\u4e4b\u540e\uff0c\u6cbf\u7740\u8fd9\u4e2a\u70b9\u5468\u56f4\u6240\u6709\u53ef\u8fbe\u8def\u5f84\u8fdb\u884c\u904d\u5386\uff0c\u904d\u5386\u5b8c\u4e00\u5708\u540e\uff0c\u627e\u5230\u4e0b\u4e00\u5c42\u7684\u4e00\u4e2a\u7ed3\u70b9\u4e00\u76f4\u6309\u7167\u5468\u56f4\u4e00\u5708\u904d\u5386\u76f4\u5230\u7ed3\u675f\u3002</p> <p>\u56de\u6eaf\u6cd5\u4ee3\u7801\u6846\u67b6\uff1a</p> C++<pre><code>void huisu(\u53c2\u6570){\n    if(ending){\n        \u5b58\u653e\u7ed3\u679c;\n        return;\n    }\n    for(\u9009\u62e9\u672c\u5c42\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u904d\u5386){\n        \u5904\u7406\u8282\u70b9;\n        huisu(\u53c2\u6570);\n        \u56de\u6eaf\uff0c\u64a4\u9500\u521a\u624d\u5904\u7406\u7684\u7ed3\u679c;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_2","title":"\u56fe\u7684\u5b58\u50a8","text":"<p>\u4e00\u822c\u662f\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u90bb\u63a5\u77e9\u9635\uff0c\u4e00\u79cd\u662f\u90bb\u63a5\u8868</p> <p>\u90bb\u63a5\u77e9\u9635\uff0c\u5c31\u662fn\u4e2a\u70b9\u5219\u751f\u6210n*n\u4e2a\u5143\u7d20\u5927\u5c0f\u7684\u77e9\u9635\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u5b58\u653e\u5f53\u524di-&gt;j\u662f\u5426\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b58\u5728\u5219\u586b\u5145\u8fb9\u7684\u6743\u503c\uff0c\u5982\u679c\u662f\u65e0\u6743\u7684\uff0c\u76f4\u63a5\u586b\u51451\u5373\u53ef\uff0c\u65e0\u8fb9\u5219\u586b\u51450,\u3002</p> <p>\u7f3a\u70b9\u662f\u5bf9\u4e8e\u65e0\u5411\u56fe\u548c\u7a00\u758f\u56fe\u6765\u8bf4\uff0c\u6d6a\u8d39\u7a7a\u95f4\u548c\u5b58\u50a8\u6027\u80fd\u3002</p> <p>\u90bb\u63a5\u8868\uff0c\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3an\uff0c\u6bcf\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u662f\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u4e14\u5982\u679ci-&gt;j\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u5219\u5c06\u5bf9\u5e94\u8fb9\u7684\u7ec8\u70b9\u5143\u7d20\u4ee5\u94fe\u8868\u7684\u5f62\u5f0f\u52a0\u5165\u5230i\u7684\u94fe\u8868\u540e\u9762\uff0c\u5373\u8fdb\u884c\u94fe\u8868\u64cd\u4f5c\u3002</p> C++<pre><code>// \u8282\u70b9\u7f16\u53f7\u4ece1\u5230n\uff0c\u6240\u4ee5\u7533\u8bf7 n+1 \u8fd9\u4e48\u5927\u7684\u6570\u7ec4\nvector&lt;list&lt;int&gt;&gt; graph(n + 1); // \u90bb\u63a5\u8868\uff0clist\u4e3aC++\u91cc\u7684\u94fe\u8868\nwhile (m--) {\n    cin &gt;&gt; s &gt;&gt; t;\n    // \u4f7f\u7528\u90bb\u63a5\u8868 \uff0c\u8868\u793a s -&gt; t \u662f\u76f8\u8fde\u7684\n    graph[s].push_back(t);\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_3","title":"\u6240\u6709\u53ef\u8fbe\u8def\u5f84","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1170</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5230 n\u3002\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u627e\u51fa\u5e76\u8fd4\u56de\u6240\u6709\u4ece\u8282\u70b9 1 \u5230\u8282\u70b9 n \u7684\u8def\u5f84\u3002\u6bcf\u6761\u8def\u5f84\u5e94\u4ee5\u8282\u70b9\u7f16\u53f7\u7684\u5217\u8868\u5f62\u5f0f\u8868\u793a\u3002</p> <p>\u3010\u8f93\u5165\u63cf\u8ff0\u3011</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N\uff0cM\uff0c\u8868\u793a\u56fe\u4e2d\u62e5\u6709 N \u4e2a\u8282\u70b9\uff0cM \u6761\u8fb9</p> <p>\u540e\u7eed M \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 s \u548c t\uff0c\u8868\u793a\u56fe\u4e2d\u7684 s \u8282\u70b9\u4e0e t \u8282\u70b9\u4e2d\u6709\u4e00\u6761\u8def\u5f84</p> <p>\u3010\u8f93\u51fa\u63cf\u8ff0\u3011</p> <p>\u8f93\u51fa\u6240\u6709\u7684\u53ef\u8fbe\u8def\u5f84\uff0c\u8def\u5f84\u4e2d\u6240\u6709\u8282\u70b9\u7684\u540e\u9762\u8ddf\u4e00\u4e2a\u7a7a\u683c\uff0c\u6bcf\u6761\u8def\u5f84\u72ec\u5360\u4e00\u884c\uff0c\u5b58\u5728\u591a\u6761\u8def\u5f84\uff0c\u8def\u5f84\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u4efb\u610f\u3002</p> <p>\u5982\u679c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u6761\u8def\u5f84\uff0c\u5219\u8f93\u51fa -1\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_4","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6c42\u89e3\u6240\u6709\u8def\u5f84","text":"<p>\u6839\u636e\u4e0a\u9762\u7684\u601d\u60f3\uff0c\u4e3b\u8981\u53ef\u4ee5\u5c06\u5bf9\u5e94\u7b97\u6cd5\u5206\u4e3a\u4e09\u90e8\u5206\uff0c</p> <p>1\u3001dfs\u51fd\u6570</p> <p>2\u3001\u56fe\u7684\u6784\u5efa</p> <p>3\u3001dfs\u7684\u53cc\u5c42\u904d\u5386\uff0c\u5f00\u59cb\u8c03\u7528dfs\u8fdb\u884c\u76f8\u5173\u5904\u7406\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_5","title":"\u90bb\u63a5\u77e9\u9635\u6cd5","text":"<p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nvector&lt;vector&lt;int&gt;&gt; result; // \u6536\u96c6\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\nvector&lt;int&gt; path; // 1\u8282\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\n\nvoid dfs (const vector&lt;vector&lt;int&gt;&gt;&amp; graph, int x, int n) {\n    // \u5f53\u524d\u904d\u5386\u7684\u8282\u70b9x \u5230\u8fbe\u8282\u70b9n \n    if (x == n) { // \u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u4e00\u6761\u8def\u5f84\n        result.push_back(path);\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) { // \u904d\u5386\u8282\u70b9x\u94fe\u63a5\u7684\u6240\u6709\u8282\u70b9\n        if (graph[x][i] == 1) { // \u627e\u5230 x\u94fe\u63a5\u7684\u8282\u70b9\n            path.push_back(i); // \u904d\u5386\u5230\u7684\u8282\u70b9\u52a0\u5165\u5230\u8def\u5f84\u4e2d\u6765\n            dfs(graph, i, n); // \u8fdb\u5165\u4e0b\u4e00\u5c42\u9012\u5f52\n            path.pop_back(); // \u56de\u6eaf\uff0c\u64a4\u9500\u672c\u8282\u70b9\n        }\n    }\n}\n\nint main() {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    // \u8282\u70b9\u7f16\u53f7\u4ece1\u5230n\uff0c\u6240\u4ee5\u7533\u8bf7 n+1 \u8fd9\u4e48\u5927\u7684\u6570\u7ec4\n    vector&lt;vector&lt;int&gt;&gt; graph(n + 1, vector&lt;int&gt;(n + 1, 0));\n\n    while (m--) {\n        cin &gt;&gt; s &gt;&gt; t;\n        // \u4f7f\u7528\u90bb\u63a5\u77e9\u9635 \u8868\u793a\u65e0\u7ebf\u56fe\uff0c1 \u8868\u793a s \u4e0e t \u662f\u76f8\u8fde\u7684\n        graph[s][t] = 1;\n    }\n\n    path.push_back(1); // \u65e0\u8bba\u4ec0\u4e48\u8def\u5f84\u5df2\u7ecf\u662f\u4ece0\u8282\u70b9\u51fa\u53d1\n    dfs(graph, 1, n); // \u5f00\u59cb\u904d\u5386\n\n    // \u8f93\u51fa\u7ed3\u679c\n    if (result.size() == 0) cout &lt;&lt; -1 &lt;&lt; endl;\n    for (const vector&lt;int&gt; &amp;pa : result) {\n        for (int i = 0; i &lt; pa.size() - 1; i++) {\n            cout &lt;&lt; pa[i] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; pa[pa.size() - 1]  &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_6","title":"\u90bb\u63a5\u8868\u6cd5","text":"<p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;list&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; result; // \u6536\u96c6\u7b26\u5408\u6761\u4ef6\u7684\u8def\u5f84\nvector&lt;int&gt; path; // 1\u8282\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\n\nvoid dfs (const vector&lt;list&lt;int&gt;&gt;&amp; graph, int x, int n) {\n\n    if (x == n) { // \u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u4e00\u6761\u8def\u5f84\n        result.push_back(path);\n        return;\n    }\n    for (int i : graph[x]) { // \u627e\u5230 x\u6307\u5411\u7684\u8282\u70b9\n        path.push_back(i); // \u904d\u5386\u5230\u7684\u8282\u70b9\u52a0\u5165\u5230\u8def\u5f84\u4e2d\u6765\n        dfs(graph, i, n); // \u8fdb\u5165\u4e0b\u4e00\u5c42\u9012\u5f52\n        path.pop_back(); // \u56de\u6eaf\uff0c\u64a4\u9500\u672c\u8282\u70b9\n    }\n}\n\nint main() {\n    int n, m, s, t;\n    cin &gt;&gt; n &gt;&gt; m;\n\n    // \u8282\u70b9\u7f16\u53f7\u4ece1\u5230n\uff0c\u6240\u4ee5\u7533\u8bf7 n+1 \u8fd9\u4e48\u5927\u7684\u6570\u7ec4\n    vector&lt;list&lt;int&gt;&gt; graph(n + 1); // \u90bb\u63a5\u8868\n    while (m--) {\n        cin &gt;&gt; s &gt;&gt; t;\n        // \u4f7f\u7528\u90bb\u63a5\u8868 \uff0c\u8868\u793a s -&gt; t \u662f\u76f8\u8fde\u7684\n        graph[s].push_back(t);\n\n    }\n\n    path.push_back(1); // \u65e0\u8bba\u4ec0\u4e48\u8def\u5f84\u5df2\u7ecf\u662f\u4ece0\u8282\u70b9\u51fa\u53d1\n    dfs(graph, 1, n); // \u5f00\u59cb\u904d\u5386\n\n    // \u8f93\u51fa\u7ed3\u679c\n    if (result.size() == 0) cout &lt;&lt; -1 &lt;&lt; endl;\n    for (const vector&lt;int&gt; &amp;pa : result) {\n        for (int i = 0; i &lt; pa.size() - 1; i++) {\n            cout &lt;&lt; pa[i] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; pa[pa.size() - 1]  &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_7","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4f7f\u7528\u573a\u666f","text":"<p>\u5e7f\u641c\u9002\u5408\u4e8e\u89e3\u51b3\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u5e7f\u641c\u4ece\u8d77\u59cb\u70b9\u8fdb\u884c\u641c\u7d22\u7684\uff0c\u4e00\u5708\u4e00\u5708\u641c\u7d22\u7684\uff0c\u53ea\u8981\u627e\u5230\u7ec8\u70b9\u90a3\u4ed6\u5c31\u662f\u6700\u77ed\u8def\u5f84\uff0c\u4e4b\u524d\u8bb0\u5f55\u7684\u8282\u70b9\u5c31\u662f\u8def\u5f84\u3002</p> <p>\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u95ee\u9898\u662f\u5e7f\u641c \u548c \u6df1\u641c\u90fd\u53ef\u4ee5\u89e3\u51b3\u7684\uff0c\u4f8b\u5982\u5c9b\u5c7f\u95ee\u9898\uff0c\u8fd9\u7c7b\u95ee\u9898\u7684\u7279\u5f81\u5c31\u662f\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u904d\u5386\u65b9\u5f0f\uff0c\u53ea\u8981\u80fd\u628a\u76f8\u90bb\u4e14\u76f8\u540c\u5c5e\u6027\u7684\u8282\u70b9\u6807\u8bb0\u4e0a\u5c31\u884c\u3002--\u4ee3\u7801\u968f\u60f3\u5f55</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_8","title":"\u5c9b\u5c7f\u6570\u91cf","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1171</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5c9b\u5c7f\u7684\u6570\u91cf\u3002\u5c9b\u5c7f\u7531\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\uff0c\u5e76\u4e14\u56db\u5468\u90fd\u662f\u6c34\u57df\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u5916\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u540e\u7eed N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u6570\u91cf\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5c9b\u5c7f\uff0c\u5219\u8f93\u51fa 0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_9","title":"\u4e00\u3001\u6df1\u5ea6\u641c\u7d22","text":"C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1}; // \u56db\u4e2a\u65b9\u5411\nvoid dfs(const vector&lt;vector&lt;int&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n    for (int i = 0; i &lt; 4; i++) {\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;  // \u8d8a\u754c\u4e86\uff0c\u76f4\u63a5\u8df3\u8fc7\n        if (!visited[nextx][nexty] &amp;&amp; grid[nextx][nexty] == 1) { // \u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684 \u540c\u65f6 \u662f\u9646\u5730\u7684\n\n            visited[nextx][nexty] = true;\n            dfs(grid, visited, nextx, nexty);\n        }\n    }\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n\n    vector&lt;vector&lt;bool&gt;&gt; visited(n, vector&lt;bool&gt;(m, false));\n\n    int result = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (!visited[i][j] &amp;&amp; grid[i][j] == 1) {\n                visited[i][j] = true;\n                result++; // \u9047\u5230\u6ca1\u8bbf\u95ee\u8fc7\u7684\u9646\u5730\uff0c+1\n                dfs(grid, visited, i, j); // \u5c06\u4e0e\u5176\u94fe\u63a5\u7684\u9646\u5730\u90fd\u6807\u8bb0\u4e0a true\n            }\n        }\n    }\n\n    cout &lt;&lt; result &lt;&lt; endl;\n}\n</code></pre> <p>\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u53ea\u8981\u8bbf\u95ee\u5230\u5f53\u524d\u8282\u70b9\u662f1\uff0c\u5219\u6807\u8bb0\u4e0a\u5df2\u8bbf\u95ee\uff0c\u9047\u52300\u6216\u8005\u8d85\u754c\u5219\u8df3\u8fc7\u5f53\u524d\u6b65\u9aa4\u5417\uff0c\u6267\u884c\u4e0b\u4e00\u6b65\u3002</p> <p>\u8981\u6ce8\u610f\u5bf9\u4e8e\u7ec8\u6b62\u6761\u4ef6\u7684\u7406\u89e3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_10","title":"\u4e8c\u3001\u5e7f\u5ea6\u641c\u7d22","text":"<p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nint dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1}; // \u56db\u4e2a\u65b9\u5411\nvoid bfs(const vector&lt;vector&lt;int&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n    queue&lt;pair&lt;int, int&gt;&gt; que;\n    que.push({x, y});\n    visited[x][y] = true; // \u53ea\u8981\u52a0\u5165\u961f\u5217\uff0c\u7acb\u523b\u6807\u8bb0\n    while(!que.empty()) {\n        pair&lt;int ,int&gt; cur = que.front(); que.pop();\n        int curx = cur.first;\n        int cury = cur.second;\n        for (int i = 0; i &lt; 4; i++) {\n            int nextx = curx + dir[i][0];\n            int nexty = cury + dir[i][1];\n            if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;  // \u8d8a\u754c\u4e86\uff0c\u76f4\u63a5\u8df3\u8fc7\n            if (!visited[nextx][nexty] &amp;&amp; grid[nextx][nexty] == 1) {\n                que.push({nextx, nexty});\n                visited[nextx][nexty] = true; // \u53ea\u8981\u52a0\u5165\u961f\u5217\u7acb\u523b\u6807\u8bb0\n            }\n        }\n    }\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n\n    vector&lt;vector&lt;bool&gt;&gt; visited(n, vector&lt;bool&gt;(m, false));\n\n    int result = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (!visited[i][j] &amp;&amp; grid[i][j] == 1) {\n                result++; // \u9047\u5230\u6ca1\u8bbf\u95ee\u8fc7\u7684\u9646\u5730\uff0c+1\n                bfs(grid, visited, i, j); // \u5c06\u4e0e\u5176\u94fe\u63a5\u7684\u9646\u5730\u90fd\u6807\u8bb0\u4e0a true\n            }\n        }\n    }\n\n\n    cout &lt;&lt; result &lt;&lt; endl;\n}\n</code></pre> <p>\u601d\u8def\u5176\u5b9e\u5c31\u662f\u7b80\u5355\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5176\u4f59\u7684\u548c\u6df1\u5ea6\u641c\u7d22\u5904\u7406\u7684\u5957\u8def\u4e00\u6837\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_11","title":"\u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1172</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u8ba1\u7b97\u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef\u3002\u5c9b\u5c7f\u9762\u79ef\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a\u7ec4\u6210\u5c9b\u5c7f\u7684\u9646\u5730\u7684\u603b\u6570\u3002\u5c9b\u5c7f\u7531\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\uff0c\u5e76\u4e14\u56db\u5468\u90fd\u662f\u6c34\u57df\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u5916\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u540e\u7eed N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u5355\u5143\u683c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5c9b\u5c7f\uff0c\u5219\u8f93\u51fa 0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_12","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u5c31\u662f\u4e4b\u524d\u7684\u5c9b\u5c7f\u6570\u91cf\u95ee\u9898\u7684\u53d8\u5f62\uff0c\u53ea\u4e0d\u8fc7\u5728\u6bcf\u5ea7\u5c9b\u5c7f\u7684\u641c\u7d22\u6269\u5f20\u8fc7\u7a0b\u4e2d\uff0c\u53ca\u65f6\u7684\u8bb0\u5f55\u6bcf\u5ea7\u5c9b\u5c7f\u7684\u6bcf\u5757\u9646\u5730\u5e76\u5c06\u5176\u52a0\u5165\u5230\u5f53\u524d\u5c9b\u5c7f\u7684\u9762\u79ef\u8ba1\u7b97\u4e2d\uff0c\u6700\u7ec8\u8fdb\u884c\u76f8\u5173\u7684\u9762\u79ef\u6bd4\u8f83\uff0c\u6c42\u89e3\u6700\u5927\u9762\u79ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> <p>dfs</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint count;\nint dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1}; // \u56db\u4e2a\u65b9\u5411\nvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n    for (int i = 0; i &lt; 4; i++) {\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;  // \u8d8a\u754c\u4e86\uff0c\u76f4\u63a5\u8df3\u8fc7\n        if (!visited[nextx][nexty] &amp;&amp; grid[nextx][nexty] == 1) { // \u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684 \u540c\u65f6 \u662f\u9646\u5730\u7684\n            visited[nextx][nexty] = true;\n            count++;\n            dfs(grid, visited, nextx, nexty);\n        }\n    }\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n    vector&lt;vector&lt;bool&gt;&gt; visited(n, vector&lt;bool&gt;(m, false));\n    int result = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (!visited[i][j] &amp;&amp; grid[i][j] == 1) {\n                count = 1;  // \u56e0\u4e3adfs\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u91cc\u9047\u5230\u9646\u5730\u4e86\u5c31\u5148\u8ba1\u6570\uff0cdfs\u5904\u7406\u63a5\u4e0b\u6765\u7684\u76f8\u90bb\u9646\u5730\n                visited[i][j] = true;\n                dfs(grid, visited, i, j); // \u5c06\u4e0e\u5176\u94fe\u63a5\u7684\u9646\u5730\u90fd\u6807\u8bb0\u4e0a true\n                result = max(result, count);\n            }\n        }\n    }\n    cout &lt;&lt; result &lt;&lt; endl;\n\n}\n</code></pre> <p>bfs</p> C++<pre><code>class Solution {\nprivate:\n    int count;\n    int dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1}; // \u56db\u4e2a\u65b9\u5411\n    void bfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int x, int y) {\n        queue&lt;int&gt; que;\n        que.push(x);\n        que.push(y);\n        visited[x][y] = true; // \u52a0\u5165\u961f\u5217\u5c31\u610f\u5473\u8282\u70b9\u662f\u9646\u5730\u53ef\u5230\u8fbe\u7684\u70b9\n        count++;\n        while(!que.empty()) {\n            int xx = que.front();que.pop();\n            int yy = que.front();que.pop();\n            for (int i = 0 ;i &lt; 4; i++) {\n                int nextx = xx + dir[i][0];\n                int nexty = yy + dir[i][1];\n                if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue; // \u8d8a\u754c\n                if (!visited[nextx][nexty] &amp;&amp; grid[nextx][nexty] == 1) { // \u8282\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u4e14\u662f\u9646\u5730\n                    visited[nextx][nexty] = true;\n                    count++;\n                    que.push(nextx);\n                    que.push(nexty);\n                }\n            }\n        }\n    }\n\npublic:\n    int maxAreaOfIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited = vector&lt;vector&lt;bool&gt;&gt;(n, vector&lt;bool&gt;(m, false));\n        int result = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (!visited[i][j] &amp;&amp; grid[i][j] == 1) {\n                    count = 0;\n                    bfs(grid, visited, i, j); // \u5c06\u4e0e\u5176\u94fe\u63a5\u7684\u9646\u5730\u90fd\u6807\u8bb0\u4e0a true\n                    result = max(result, count);\n                }\n            }\n        }\n        return result;\n    }\n};\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_13","title":"\u5b64\u5c9b\u603b\u9762\u79ef","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1173</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 1\uff08\u9646\u5730\uff09\u548c 0\uff08\u6c34\uff09\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u5c9b\u5c7f\u6307\u7684\u662f\u7531\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u5355\u5143\u683c\u7ec4\u6210\u7684\u533a\u57df\uff0c\u4e14\u5b8c\u5168\u88ab\u6c34\u57df\u5355\u5143\u683c\u5305\u56f4\u3002\u5b64\u5c9b\u662f\u90a3\u4e9b\u4f4d\u4e8e\u77e9\u9635\u5185\u90e8\u3001\u6240\u6709\u5355\u5143\u683c\u90fd\u4e0d\u63a5\u89e6\u8fb9\u7f18\u7684\u5c9b\u5c7f\u3002</p> <p>\u73b0\u5728\u4f60\u9700\u8981\u8ba1\u7b97\u6240\u6709\u5b64\u5c9b\u7684\u603b\u9762\u79ef\uff0c\u5c9b\u5c7f\u9762\u79ef\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a\u7ec4\u6210\u5c9b\u5c7f\u7684\u9646\u5730\u7684\u603b\u6570\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 N, M\uff0c\u8868\u793a\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u4e4b\u540e N \u884c\uff0c\u6bcf\u884c\u5305\u542b M \u4e2a\u6570\u5b57\uff0c\u6570\u5b57\u4e3a 1 \u6216\u8005 0\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0</p> <p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u6709\u5b64\u5c9b\u7684\u603b\u9762\u79ef\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5b64\u5c9b\uff0c\u5219\u8f93\u51fa 0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#_14","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u601d\u8def\u548c\u4e0a\u4e00\u9898\u7684\u5c9b\u5c7f\u603b\u9762\u79ef\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u628a\u9760\u8fd1\u8fb9\u754c\u7684\u6240\u6709\u5c9b\u5c7f\u90fd\u5254\u9664\u6389\uff0c\u5269\u4e0b\u7684\u5c9b\u5c7f\u624d\u662f\u9700\u8981\u8ba1\u7b97\u603b\u9762\u79ef\u7684\uff0c\u540c\u65f6\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u9760\u8fd1\u8fb9\u754c\u7684\u6240\u6709\u5c9b\u5c7fgrid\u6570\u7ec4\u7684\u5143\u7d20\u90fd\u4fee\u6539\u4e3a\u6d77\u6d0b\uff0c\u8fd9\u6837\u6700\u540e\u518d\u8fdb\u884c\u4e00\u8f6e\u6700\u7ec8\u7684\u5c9b\u5c7f\u904d\u5386\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> <p>dfs</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint dir[4][2] = {-1, 0, 0, -1, 1, 0, 0, 1}; // \u4fdd\u5b58\u56db\u4e2a\u65b9\u5411\nint count; // \u7edf\u8ba1\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u9646\u5730\u7a7a\u683c\u6570\u91cf\nvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y) {\n    grid[x][y] = 0;\n    count++;\n    for (int i = 0; i &lt; 4; i++) { // \u5411\u56db\u4e2a\u65b9\u5411\u904d\u5386\n        int nextx = x + dir[i][0];\n        int nexty = y + dir[i][1];\n        // \u8d85\u8fc7\u8fb9\u754c\n        if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;\n        // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u4e0d\u7ee7\u7eed\u904d\u5386\n        if (grid[nextx][nexty] == 0) continue;\n\n        dfs (grid, nextx, nexty);\n    }\n    return;\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n\n    // \u4ece\u5de6\u4fa7\u8fb9\uff0c\u548c\u53f3\u4fa7\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int i = 0; i &lt; n; i++) {\n        if (grid[i][0] == 1) dfs(grid, i, 0);\n        if (grid[i][m - 1] == 1) dfs(grid, i, m - 1);\n    }\n    // \u4ece\u4e0a\u8fb9\u548c\u4e0b\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int j = 0; j &lt; m; j++) {\n        if (grid[0][j] == 1) dfs(grid, 0, j);\n        if (grid[n - 1][j] == 1) dfs(grid, n - 1, j);\n    }\n    count = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (grid[i][j] == 1) dfs(grid, i, j);\n        }\n    }\n    cout &lt;&lt; count &lt;&lt; endl;\n}\n</code></pre> <p>bfs</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint count = 0;\nint dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1}; // \u56db\u4e2a\u65b9\u5411\nvoid bfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y) {\n    queue&lt;pair&lt;int, int&gt;&gt; que;\n    que.push({x, y});\n    grid[x][y] = 0; // \u53ea\u8981\u52a0\u5165\u961f\u5217\uff0c\u7acb\u523b\u6807\u8bb0\n    count++;\n    while(!que.empty()) {\n        pair&lt;int ,int&gt; cur = que.front(); que.pop();\n        int curx = cur.first;\n        int cury = cur.second;\n        for (int i = 0; i &lt; 4; i++) {\n            int nextx = curx + dir[i][0];\n            int nexty = cury + dir[i][1];\n            if (nextx &lt; 0 || nextx &gt;= grid.size() || nexty &lt; 0 || nexty &gt;= grid[0].size()) continue;  // \u8d8a\u754c\u4e86\uff0c\u76f4\u63a5\u8df3\u8fc7\n            if (grid[nextx][nexty] == 1) {\n                que.push({nextx, nexty});\n                count++;\n                grid[nextx][nexty] = 0; // \u53ea\u8981\u52a0\u5165\u961f\u5217\u7acb\u523b\u6807\u8bb0\n            }\n        }\n    }\n}\n\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; grid(n, vector&lt;int&gt;(m, 0));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; grid[i][j];\n        }\n    }\n    // \u4ece\u5de6\u4fa7\u8fb9\uff0c\u548c\u53f3\u4fa7\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int i = 0; i &lt; n; i++) {\n        if (grid[i][0] == 1) bfs(grid, i, 0);\n        if (grid[i][m - 1] == 1) bfs(grid, i, m - 1);\n    }\n    // \u4ece\u4e0a\u8fb9\u548c\u4e0b\u8fb9 \u5411\u4e2d\u95f4\u904d\u5386\n    for (int j = 0; j &lt; m; j++) {\n        if (grid[0][j] == 1) bfs(grid, 0, j);\n        if (grid[n - 1][j] == 1) bfs(grid, n - 1, j);\n    }\n    count = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            if (grid[i][j] == 1) bfs(grid, i, j);\n        }\n    }\n\n    cout &lt;&lt; count &lt;&lt; endl;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA%EF%BC%88%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93%EF%BC%89/#ending","title":"ENDING!!","text":"<p>\u77ed\u6682\u7684\u4e00\u4e2a\u5c0f\u603b\u7ed3\uff0c\u540e\u7eed\u4f1a\u8fdb\u884c\u53e6\u5916\u7684\u5b66\u4e60\u548c\u66f4\u65b0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/","title":"\u5e76\u67e5\u96c6\u7406\u8bba","text":"<p>\u4ec0\u4e48\u662f\u5e76\u67e5\u96c6\uff1f</p> <p>\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\u7406\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u68ee\u6797\uff0c\u5176\u4e2d\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u4e2d\u7684\u8282\u70b9\u8868\u793a\u5bf9\u5e94\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u5e76\u67e5\u96c6\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <p>1\u3001\u5408\u5e76\uff0c\u9047\u5230\u4e24\u4e2a\u96c6\u5408\u76f8\u540c\u7684\u5143\u7d20\uff0c\u4e24\u4e2a\u5143\u7d20\u53ef\u4ee5\u5408\u5e76\u5230\u5bf9\u5e94\u7684\u6811</p> <p>2\u3001\u67e5\u8be2\uff0c\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u96c6\u5408</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#_2","title":"\u5e76\u67e5\u96c6\u5bfb\u6839","text":"C++<pre><code>// \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\nint find(int u) {\n    if (u == father[u]) return u; // \u5982\u679c\u6839\u5c31\u662f\u81ea\u5df1\uff0c\u76f4\u63a5\u8fd4\u56de\n    else return father[u]=find(father[u]); // \u5982\u679c\u6839\u4e0d\u662f\u81ea\u5df1\uff0c\u5c31\u6839\u636e\u6570\u7ec4\u4e0b\u6807\u4e00\u5c42\u4e00\u5c42\u5411\u4e0b\u627e\n}\n</code></pre> <p>\u8fd9\u4e2a\u5730\u65b9\u7684\u5bfb\u6839\u8fdb\u884c\u4e86\u8def\u5f84\u538b\u7f29\uff0c\u53ea\u8981\u5bfb\u627e\u6839\uff0c\u90a3\u4e48\u6700\u540e\u5c31\u4f1a\u5bf9\u5f53\u524d\u5143\u7d20\u7684\u7236\u4eb2\u7ed3\u70b9\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u3002</p> <p>\u4ec0\u4e48\u53eb\u8def\u5f84\u538b\u7f29\uff0c\u8fd9\u4e2a\u5730\u65b9\u7684\u8def\u5f84\u538b\u7f29\u5c31\u662f\u76f4\u63a5\u901a\u8fc7\u5bfb\u6839\u8fc7\u7a0b\uff0c\u5c06\u6bcf\u4e2a\u8282\u70b9\u76f4\u63a5\u6302\u5230\u6839\u4e0a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#_3","title":"\u521d\u59cb\u5316","text":"C++<pre><code>void init(){\nfor(int i=0;i&lt;n;i++){\n    father[i]=i;\n}\n}\n</code></pre> <p>\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u7684\u6839\u90fd\u662f\u81ea\u5df1\uff0c\u540e\u7eed\u5728\u5408\u5e76\u7684\u65f6\u5019\u4f1a\u66f4\u6539\u5bf9\u5e94\u7684\u6839</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#_4","title":"\u5224\u65ad\u540c\u6839","text":"C++<pre><code>bool issame(int v,int u){\n    u=find(u);\n    v=find(v);\n    return u==v;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#_5","title":"\u5408\u5e76\u5143\u7d20\u5230\u540c\u4e00\u4e2a\u96c6\u5408","text":"C++<pre><code>//\u8def\u5f84\u662fv-&gt;u\nvoid join(int u,int v){\n    u=find(u);\n    v=find(v);\n    if(u==v) return;\n    father[v]=u;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#_6","title":"\u6309\u79e9\u5408\u5e76\u6cd5","text":"C++<pre><code>void join(int u,int v){\n    u=find(u);\n    v=find(v);\n    if(rank[u]&lt;=rank[v]) father[u]=v;\n    else father[v]=u;\n    if(rank[u]==rank[v]&amp;&amp;u!=v) rank[v]++;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%90%86%E8%AE%BA/#ending","title":"ending!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%BA%8F%E5%88%97%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","title":"\u5e8f\u5217\u76f8\u5173\u95ee\u9898","text":"<p>\u5b66\u4e60\u81ea\u4ee3\u7801\u968f\u60f3\u5f55\uff0c\u4e3b\u8981\u662f\u4e2a\u4eba\u590d\u4e60\u603b\u7ed3\uff0c\u4ec5\u7528\u4f5c\u4e2a\u4eba\u5b66\u4e60\u4f7f\u7528</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%BA%8F%E5%88%97%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#_2","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/longest-increasing-subsequence/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u8981\u6ce8\u610f\u5b50\u5e8f\u5217\u7684\u5b9a\u4e49\uff1a\u5b50\u5e8f\u5217\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u4e00\u7ec4\u9012\u589e\u5143\u7d20\u7ec4\u5408\u8d77\u6765\u5373\u53ef\u3002</p> <p>\u601d\u8def\uff1a</p> <p>1\u3001dp\u6570\u7ec4\u5b9a\u4e49\uff0cdp[i]\u8868\u793ai\u4e4b\u524d\u7684\u5305\u62eci\u7684nums[i]\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>2\u3001\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0cif (nums[i] &gt; nums[j]) dp[i]=max(dp[i],dp[j]+1);</p> <p>3\u3001dp[i]\u7684\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u5143\u7d20\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u7b97\u505a\u957f\u5ea6\u4e3a1\uff0c\u56e0\u6b64\uff0c\u521d\u59cb\u5316dp[i]\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a1\u5373\u53ef\u3002</p> <p>4\u3001\u9012\u63a8\u987a\u5e8f\uff0c\u4ece\u524d\u5f80\u540e\u5373\u53ef</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u63a8\u5bfc\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() &lt;= 1) return nums.size();\n        vector&lt;int&gt; dp(nums.size(), 1);\n        int result = 0;\n        for (int i = 1; i &lt; nums.size(); i++) {\n            for (int j = 0; j &lt; i; j++) {\n                if (nums[i] &gt; nums[j]) dp[i] = max(dp[i], dp[j] + 1);\n            }\n            if (dp[i] &gt; result) result = dp[i]; // \u53d6\u957f\u7684\u5b50\u5e8f\u5217\n        }\n        return result;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%BA%8F%E5%88%97%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#_3","title":"\u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/longest-continuous-increasing-subsequence/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u7ecf\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u4e14 \u8fde\u7eed\u9012\u589e\u7684\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u8fde\u7eed\u9012\u589e\u7684\u5b50\u5e8f\u5217 \u53ef\u4ee5\u7531\u4e24\u4e2a\u4e0b\u6807 l \u548c r\uff08l &lt; r\uff09\u786e\u5b9a\uff0c\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e2a l &lt;= i &lt; r\uff0c\u90fd\u6709 nums[i] &lt; nums[i + 1] \uff0c\u90a3\u4e48\u5b50\u5e8f\u5217 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] \u5c31\u662f\u8fde\u7eed\u9012\u589e\u5b50\u5e8f\u5217\u3002</p> <p>\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u542b\u4e49\uff0cdp[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3adp[i]</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f\uff1aif(nums[i]&gt;nums[i-1]) dp[i]=dp[i-1]+1;</p> <p>3\u3001dp\u6570\u7ec4\u521d\u59cb\u5316\uff1a\u6bcf\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\u90fd\u7b97\u505a1\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u4e3adp[i]=1;</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff1a\u4ece\u524d\u5f80\u540e\u904d\u5386</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u4e3e\u4f8b\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int findLengthOfLCIS(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 0) return 0;\n        int result = 1;\n        vector&lt;int&gt; dp(nums.size() ,1);\n        for (int i = 1; i &lt; nums.size(); i++) {\n            if (nums[i] &gt; nums[i - 1]) { // \u8fde\u7eed\u8bb0\u5f55\n                dp[i] = dp[i - 1] + 1;\n            }\n            if (dp[i] &gt; result) result = dp[i];\n        }\n        return result;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%BA%8F%E5%88%97%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#_4","title":"\u6700\u957f\u91cd\u590d\u5b50\u6570\u7ec4","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/maximum-length-of-repeated-subarray/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 A \u548c B \uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u4e2d\u516c\u5171\u7684\u3001\u957f\u5ea6\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u8bb0\u5f55\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u6bd4\u8f83\u60c5\u51b5\u3002</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u542b\u4e49\uff1a</p> <p>dp[i][j]\u8868\u793a\u4ee5i-1\u548cj-1\u4e3a\u4e0b\u6807\u7684\u4e24\u4e2a\u6570\u7ec4\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u6700\u957f\u91cd\u590d\u957f\u5ea6\u3002</p> <p>2\u3001\u9012\u63a8\u516c\u5f0f\uff1a\u6839\u636e\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053if(a[i-1]==b[j-1])\u7684\u65f6\u5019\uff0c\u624d\u80fd\u8fdb\u884cdp[i][j]=dp[i-1][j-1]+1;</p> <p>\u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u5728[1][1]\u8fdb\u884c\u9012\u63a8\u904d\u5386</p> <p>3\u3001\u521d\u59cb\u5316\uff1a\u6240\u6709\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u5373\u53ef\u3002</p> <p>4\u3001\u9012\u63a8\u987a\u5e8f\uff1a\u53cc\u5c42\u904d\u5386\uff0c\u5916\u5c42A\u5185\u5c42B\u5373\u53ef\uff0c\u6216\u8005\u4e8c\u8005\u4e92\u6362\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u8fdb\u884c\u76f8\u5173\u63a8\u5bfc</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int findLength(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        vector&lt;vector&lt;int&gt;&gt; dp (nums1.size() + 1, vector&lt;int&gt;(nums2.size() + 1, 0));\n        int result = 0;\n        for (int i = 1; i &lt;= nums1.size(); i++) {\n            for (int j = 1; j &lt;= nums2.size(); j++) {\n                if (nums1[i - 1] == nums2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                }\n                if (dp[i][j] &gt; result) result = dp[i][j];\n            }\n        }\n        return result;\n    }\n</code></pre> <p>ending!!!</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1191</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u67d0\u4e2a\u5927\u578b\u8f6f\u4ef6\u9879\u76ee\u7684\u6784\u5efa\u7cfb\u7edf\u62e5\u6709 N \u4e2a\u6587\u4ef6\uff0c\u6587\u4ef6\u7f16\u53f7\u4ece 0 \u5230 N - 1\uff0c\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\uff0c\u67d0\u4e9b\u6587\u4ef6\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6587\u4ef6 A \u4f9d\u8d56\u4e8e\u6587\u4ef6 B\uff0c\u5219\u5fc5\u987b\u5728\u5904\u7406\u6587\u4ef6 A \u4e4b\u524d\u5904\u7406\u6587\u4ef6 B \uff080 &lt;= A, B &lt;= N - 1\uff09\u3002\u8bf7\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u786e\u5b9a\u6587\u4ef6\u5904\u7406\u7684\u987a\u5e8f\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_2","title":"\u601d\u8def","text":"<p>\u5176\u5b9e\u76f8\u5173\u601d\u8def\u5c31\u662f\u5229\u7528\u62d3\u6251\u6392\u5e8f\u7684\u539f\u7406\u6765\u6c42\u89e3\u8be5\u95ee\u9898</p> <p>\u9996\u5148\uff0c\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6bcf\u4e2a\u6587\u4ef6\u6267\u884c\u7684\u65f6\u5019\u90fd\u6709\u5148\u51b3\u6761\u4ef6\uff0c\u5373\u4f9d\u8d56\u3002\u6211\u4eec\u9700\u8981\u4f18\u5148\u6309\u7167\u4f9d\u8d56\u5c06\u5148\u51b3\u6761\u4ef6\u8fdb\u884c\u904d\u5386\u4e4b\u540e\u6211\u4eec\u624d\u80fd\u8bbf\u95ee\u5bf9\u5e94\u7684\u7ed3\u70b9\u7684\u5143\u7d20\u3002</p> <p>\u600e\u4e48\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\u5462\uff1f</p> <p>\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u7684\u5165\u5ea6\uff0c\u5728\u7edf\u8ba1\u5b8c\u6210\u4e4b\u540e\uff0c\u5bfb\u627e\u5165\u5ea6\u4e3a0\u7684\u5143\u7d20\uff0c\u5c06\u5bf9\u5e94\u5143\u7d20\u5165\u961f\uff0c\u7136\u540e\u53d6\u961f\u5217\u4e2d\u7684\u5143\u7d20\uff0c\u53d6\u51fa\u5143\u7d20\u4e4b\u540e\u6211\u4eec\u9700\u8981\u5bf9\u8be5\u5143\u7d20\u76f8\u8fde\u7684\u5143\u7d20\u7684\u5165\u5ea6\u51cf\u4e00\uff0c\u5e76\u4e14\u5224\u65ad\u51cf\u4e00\u4e4b\u540e\u7684\u5165\u5ea6\u662f\u5426\u4e3a0\uff0c\u5982\u679c\u4e3a0\uff0c\u90a3\u4e48\u5c31\u5c06\u8be5\u5143\u7d20\u5165\u961f\uff0c\u4e00\u76f4\u5faa\u73af\u5904\u7406\u3002</p> <p>\u6700\u7ec8\u5224\u65adresult\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u662f\u5426\u4e3a\u8f93\u5165\u5143\u7d20\u6570\u91cf\uff0c\u5373\u5982\u679c\u6240\u6709\u5143\u7d20\u90fd\u904d\u5386\u5230\u4e86\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u3002\u5426\u5219\u5c31\u8fd4\u56de-1\uff0c\u8868\u793a\u6709\u73af\u65e0\u6cd5\u5168\u90e8\u904d\u5386\u5904\u7406\u6240\u6709\u6587\u4ef6\u4f9d\u8d56\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;unordered_map&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint main(){\n    //read data\n    int n,m,s,t;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;int&gt; indegree(n,0);\n    unordered_map&lt;int,vector&lt;int&gt;&gt; umap;\n    vector&lt;int&gt; result;\n    //\u5c06\u6bcf\u6761\u8fb9\u7684\u5165\u5ea6\u548c\u76f8\u5173\u4f9d\u8d56\u8fdb\u884c\u7edf\u8ba1\n    for(int i=0;i&lt;m;i++){\n        cin&gt;&gt;s&gt;&gt;t;\n        indegree[t]++;\n        umap[s].push_back(t);\n    }\n    queue&lt;int&gt; que;\n    for(int i=0;i&lt;n;i++){\n        if(indegree[i]==0){\n            que.push(i);\n        }\n    }\n    while(que.size()){\n        //\u5bfb\u627e\u961f\u5217\u5143\u7d20\u7684\u76f8\u8fde\u7684\u8fb9\n        int x=que.front();\n        que.pop();\n        result.push_back(x);\n        vector&lt;int&gt; files=umap[x];\n        //\u5c06file\u8fde\u63a5\u7684\u8fb9\u5168\u90e8\u6e05\u9664\uff0c\u5373\u5c06\u5bf9\u5e94\u7684\u5165\u5ea6\u90fd\u8bbe\u7f6e\u4e3a-1\n        if(files.size()){\n            for(int i=0;i&lt;files.size();i++){\n                indegree[files[i]]--;\n                if(indegree[files[i]]==0) que.push(files[i]);\n            }\n        }\n    }\n    if(result.size()==n){\n        for(int i=0;i&lt;n-1;i++){\n            cout&lt;&lt;result[i]&lt;&lt;\" \";\n        }\n        cout&lt;&lt;result[n-1];\n\n    }\n    else cout&lt;&lt;-1&lt;&lt;endl;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#ending","title":"ENDING!","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","title":"\u6700\u5c0f\u751f\u6210\u6811","text":"<p>\u5bf9\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u5b66\u4e60\u603b\u7ed3</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#prim","title":"prim\u7b97\u6cd5","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1053</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u5728\u4e16\u754c\u7684\u67d0\u4e2a\u533a\u57df\uff0c\u6709\u4e00\u4e9b\u5206\u6563\u7684\u795e\u79d8\u5c9b\u5c7f\uff0c\u6bcf\u4e2a\u5c9b\u5c7f\u4e0a\u90fd\u6709\u4e00\u79cd\u73cd\u7a00\u7684\u8d44\u6e90\u6216\u8005\u5b9d\u85cf\u3002\u56fd\u738b\u6253\u7b97\u5728\u8fd9\u4e9b\u5c9b\u5c7f\u4e0a\u5efa\u516c\u8def\uff0c\u65b9\u4fbf\u8fd0\u8f93\u3002</p> <p>\u4e0d\u540c\u5c9b\u5c7f\u4e4b\u95f4\uff0c\u8def\u9014\u8ddd\u79bb\u4e0d\u540c\uff0c\u56fd\u738b\u5e0c\u671b\u4f60\u53ef\u4ee5\u89c4\u5212\u5efa\u516c\u8def\u7684\u65b9\u6848\uff0c\u5982\u4f55\u53ef\u4ee5\u4ee5\u6700\u77ed\u7684\u603b\u516c\u8def\u8ddd\u79bb\u5c06 \u6240\u6709\u5c9b\u5c7f\u8054\u901a\u8d77\u6765\u3002</p> <p>\u7ed9\u5b9a\u4e00\u5f20\u5730\u56fe\uff0c\u5176\u4e2d\u5305\u62ec\u4e86\u6240\u6709\u7684\u5c9b\u5c7f\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4ee5\u6700\u5c0f\u5316\u516c\u8def\u5efa\u8bbe\u957f\u5ea6\uff0c\u786e\u4fdd\u53ef\u4ee5\u94fe\u63a5\u5230\u6240\u6709\u5c9b\u5c7f\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570V \u548c E\uff0cV\u4ee3\u8868\u9876\u70b9\u6570\uff0cE\u4ee3\u8868\u8fb9\u6570 \u3002\u9876\u70b9\u7f16\u53f7\u662f\u4ece1\u5230V\u3002\u4f8b\u5982\uff1aV=2\uff0c\u4e00\u4e2a\u6709\u4e24\u4e2a\u9876\u70b9\uff0c\u5206\u522b\u662f1\u548c2\u3002</p> <p>\u63a5\u4e0b\u6765\u5171\u6709 E \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 v1\uff0cv2 \u548c val\uff0cv1 \u548c v2 \u4e3a\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0cval\u4ee3\u8868\u8fb9\u7684\u6743\u503c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u8f93\u51fa\u8054\u901a\u6240\u6709\u5c9b\u5c7f\u7684\u6700\u5c0f\u8def\u5f84\u603b\u8ddd\u79bb</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_2","title":"\u601d\u8def","text":"<p>prim\u7b97\u6cd5\u662f\u6211\u4eec\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\u5fc5\u5b66\u7b97\u6cd5\uff0c\u548c\u4e0b\u9762\u7684kruskal\u7b97\u6cd5\u4e00\u6837\u3002</p> <p>\u53ea\u4e0d\u8fc7\u6211\u4eec\u5728prim\u7b97\u6cd5\u7684\u65f6\u5019\u6709\u4e09\u90e8\u66f2\uff1a</p> <p>1\u3001\u5bfb\u627e\u4e00\u4e2a\u7ed3\u70b9\u52a0\u5165\u751f\u6210\u6811\uff0c\u8be5\u7ed3\u70b9\u5fc5\u987b\u662f\u8ddd\u79bb\u751f\u6210\u6811\u8ddd\u79bb\u6700\u77ed\u7684\u7ed3\u70b9</p> <p>2\u3001\u5c06\u8be5\u7ed3\u70b9\u52a0\u5165\uff0c\u5e76\u4e14\u5c06\u8be5\u7ed3\u70b9\u6807\u8bb0\u4e3a\u5df2\u52a0\u5165\u751f\u6210\u6811</p> <p>3\u3001\u91cd\u65b0\u66f4\u65b0\u751f\u6210\u6811\u4e4b\u5916\u7684\u6240\u6709\u7ed3\u70b9\u8ddd\u79bb\u751f\u6210\u6811\u7684\u8ddd\u79bb\u3002</p> <p>\u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u5176\u8ddd\u79bb\u751f\u6210\u6811\u7684\u8ddd\u79bb\uff0c\u53ea\u9700\u8981\u4e00\u4e2amindisi\u6570\u7ec4\u5373\u53ef\uff0c\u4e00\u7ef4\u5c31\u591f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u662f\u6bcf\u4e2a\u7ed3\u70b9\u5bf9\u4e8e\u751f\u6210\u6811\u7684\u6700\u5c0f\u8ddd\u79bb\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include &lt;climits&gt;\n\nusing namespace std;\nint main() {\n    int v, e;\n    int x, y, k;\n    cin &gt;&gt; v &gt;&gt; e;\n    // \u586b\u4e00\u4e2a\u9ed8\u8ba4\u6700\u5927\u503c\uff0c\u9898\u76ee\u63cf\u8ff0val\u6700\u5927\u4e3a10000\n    vector&lt;vector&lt;int&gt;&gt; grid(v + 1, vector&lt;int&gt;(v + 1, 10001));\n    while (e--) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n        // \u56e0\u4e3a\u662f\u53cc\u5411\u56fe\uff0c\u6240\u4ee5\u4e24\u4e2a\u65b9\u5411\u90fd\u8981\u586b\u4e0a\n        grid[x][y] = k;\n        grid[y][x] = k;\n\n    }\n    // \u6240\u6709\u8282\u70b9\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5c0f\u8ddd\u79bb\n    vector&lt;int&gt; minDist(v + 1, 10001);\n\n    // \u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u5728\u6811\u91cc\n    vector&lt;bool&gt; isInTree(v + 1, false);\n\n    // \u6211\u4eec\u53ea\u9700\u8981\u5faa\u73af n-1\u6b21\uff0c\u5efa\u7acb n - 1\u6761\u8fb9\uff0c\u5c31\u53ef\u4ee5\u628an\u4e2a\u8282\u70b9\u7684\u56fe\u8fde\u5728\u4e00\u8d77\n    for (int i = 1; i &lt; v; i++) {\n\n        // 1\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e00\u6b65\uff1a\u9009\u8ddd\u79bb\u751f\u6210\u6811\u6700\u8fd1\u8282\u70b9\n        int cur = -1; // \u9009\u4e2d\u54ea\u4e2a\u8282\u70b9 \u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n        int minVal = INT_MAX;\n        for (int j = 1; j &lt;= v; j++) { // 1 - v\uff0c\u9876\u70b9\u7f16\u53f7\uff0c\u8fd9\u91cc\u4e0b\u6807\u4ece1\u5f00\u59cb\n            //  \u9009\u53d6\u6700\u5c0f\u751f\u6210\u6811\u8282\u70b9\u7684\u6761\u4ef6\uff1a\n            //  \uff081\uff09\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\n            //  \uff082\uff09\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u6700\u8fd1\u7684\u8282\u70b9\n            if (!isInTree[j] &amp;&amp;  minDist[j] &lt; minVal) {\n                minVal = minDist[j];\n                cur = j;\n            }\n        }\n        // 2\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e8c\u6b65\uff1a\u6700\u8fd1\u8282\u70b9\uff08cur\uff09\u52a0\u5165\u751f\u6210\u6811\n        isInTree[cur] = true;\n\n        // 3\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e09\u6b65\uff1a\u66f4\u65b0\u975e\u751f\u6210\u6811\u8282\u70b9\u5230\u751f\u6210\u6811\u7684\u8ddd\u79bb\uff08\u5373\u66f4\u65b0minDist\u6570\u7ec4\uff09\n        // cur\u8282\u70b9\u52a0\u5165\u4e4b\u540e\uff0c \u6700\u5c0f\u751f\u6210\u6811\u52a0\u5165\u4e86\u65b0\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6240\u6709\u8282\u70b9\u5230 \u6700\u5c0f\u751f\u6210\u6811\u7684\u8ddd\u79bb\uff08\u5373minDist\u6570\u7ec4\uff09\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\n        // \u7531\u4e8ecur\u8282\u70b9\u662f\u65b0\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5173\u5fc3\u4e0e cur \u76f8\u8fde\u7684 \u975e\u751f\u6210\u6811\u8282\u70b9 \u7684\u8ddd\u79bb \u662f\u5426\u6bd4 \u539f\u6765 \u975e\u751f\u6210\u6811\u8282\u70b9\u5230\u751f\u6210\u6811\u8282\u70b9\u7684\u8ddd\u79bb\u66f4\u5c0f\u4e86\u5462\n        for (int j = 1; j &lt;= v; j++) {\n            // \u66f4\u65b0\u7684\u6761\u4ef6\uff1a\n            // \uff081\uff09\u8282\u70b9\u662f \u975e\u751f\u6210\u6811\u91cc\u7684\u8282\u70b9\n            // \uff082\uff09\u4e0ecur\u76f8\u8fde\u7684\u67d0\u8282\u70b9\u7684\u6743\u503c \u6bd4 \u8be5\u67d0\u8282\u70b9\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u7684\u8ddd\u79bb\u5c0f\n            // \u5f88\u591a\u5f55\u53cb\u770b\u5230\u81ea\u5df1 \u5c31\u60f3\u4e0d\u660e\u767d\u4ec0\u4e48\u610f\u601d\uff0c\u5176\u5b9e\u5c31\u662f cur \u662f\u65b0\u52a0\u5165 \u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \u6240\u6709\u975e\u751f\u6210\u6811\u7684\u8282\u70b9\u8ddd\u79bb\u751f\u6210\u6811\u8282\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb \u7531\u4e8e cur\u7684\u65b0\u52a0\u5165\uff0c\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u6570\u636e\u4e86\n            if (!isInTree[j] &amp;&amp; grid[cur][j] &lt; minDist[j]) {\n                minDist[j] = grid[cur][j];\n            }\n        }\n    }\n    // \u7edf\u8ba1\u7ed3\u679c\n    int result = 0;\n    for (int i = 2; i &lt;= v; i++) { // \u4e0d\u8ba1\u7b2c\u4e00\u4e2a\u9876\u70b9\uff0c\u56e0\u4e3a\u7edf\u8ba1\u7684\u662f\u8fb9\u7684\u6743\u503c\uff0cv\u4e2a\u8282\u70b9\u6709 v-1\u6761\u8fb9\n        result += minDist[i];\n    }\n    cout &lt;&lt; result &lt;&lt; endl;\n\n}\n</code></pre> <p>\u6253\u5370\u51fa\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u5728\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e0b\u6765\u6bcf\u4e00\u4e2a\u8fb9\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684parent\u6570\u7ec4\u6765\u66f4\u65b0\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff0c\u5e76\u4e14\u8bb0\u5f55\u8fde\u63a5\u6700\u5c0f\u751f\u6210\u6811\u7684\u6bcf\u6761\u8fb9\uff0c\u6700\u540e\u6253\u5370\u51fa\u6765\u8fb9\u5373\u53ef\u3002parent\u6570\u7ec4\u662f\u4e00\u7ef4\u6570\u7ec4\uff0cparent[i]=j,\u8868\u793ai\u6307\u5411j\uff0c\u8fd9\u4e2a\u5730\u65b9\u7684\u6307\u5411\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u65e0\u5411\u8fb9\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include &lt;climits&gt;\n\nusing namespace std;\nint main() {\n    int v, e;\n    int x, y, k;\n    cin &gt;&gt; v &gt;&gt; e;\n    // \u586b\u4e00\u4e2a\u9ed8\u8ba4\u6700\u5927\u503c\uff0c\u9898\u76ee\u63cf\u8ff0val\u6700\u5927\u4e3a10000\n    vector&lt;vector&lt;int&gt;&gt; grid(v + 1, vector&lt;int&gt;(v + 1, 10001));\n    while (e--) {\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n        // \u56e0\u4e3a\u662f\u53cc\u5411\u56fe\uff0c\u6240\u4ee5\u4e24\u4e2a\u65b9\u5411\u90fd\u8981\u586b\u4e0a\n        grid[x][y] = k;\n        grid[y][x] = k;\n\n    }\n    // \u6240\u6709\u8282\u70b9\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u6700\u5c0f\u8ddd\u79bb\n    vector&lt;int&gt; minDist(v + 1, 10001);\n\n    // \u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u5728\u6811\u91cc\n    vector&lt;bool&gt; isInTree(v + 1, false);\n\n    // \u6211\u4eec\u53ea\u9700\u8981\u5faa\u73af n-1\u6b21\uff0c\u5efa\u7acb n - 1\u6761\u8fb9\uff0c\u5c31\u53ef\u4ee5\u628an\u4e2a\u8282\u70b9\u7684\u56fe\u8fde\u5728\u4e00\u8d77\n    for (int i = 1; i &lt; v; i++) {\n\n        // 1\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e00\u6b65\uff1a\u9009\u8ddd\u79bb\u751f\u6210\u6811\u6700\u8fd1\u8282\u70b9\n        int cur = -1; // \u9009\u4e2d\u54ea\u4e2a\u8282\u70b9 \u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n        int minVal = INT_MAX;\n        for (int j = 1; j &lt;= v; j++) { // 1 - v\uff0c\u9876\u70b9\u7f16\u53f7\uff0c\u8fd9\u91cc\u4e0b\u6807\u4ece1\u5f00\u59cb\n            //  \u9009\u53d6\u6700\u5c0f\u751f\u6210\u6811\u8282\u70b9\u7684\u6761\u4ef6\uff1a\n            //  \uff081\uff09\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u91cc\n            //  \uff082\uff09\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u6700\u8fd1\u7684\u8282\u70b9\n            if (!isInTree[j] &amp;&amp;  minDist[j] &lt; minVal) {\n                minVal = minDist[j];\n                cur = j;\n            }\n        }\n        // 2\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e8c\u6b65\uff1a\u6700\u8fd1\u8282\u70b9\uff08cur\uff09\u52a0\u5165\u751f\u6210\u6811\n        isInTree[cur] = true;\n\n        // 3\u3001prim\u4e09\u90e8\u66f2\uff0c\u7b2c\u4e09\u6b65\uff1a\u66f4\u65b0\u975e\u751f\u6210\u6811\u8282\u70b9\u5230\u751f\u6210\u6811\u7684\u8ddd\u79bb\uff08\u5373\u66f4\u65b0minDist\u6570\u7ec4\uff09\n        // cur\u8282\u70b9\u52a0\u5165\u4e4b\u540e\uff0c \u6700\u5c0f\u751f\u6210\u6811\u52a0\u5165\u4e86\u65b0\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6240\u6709\u8282\u70b9\u5230 \u6700\u5c0f\u751f\u6210\u6811\u7684\u8ddd\u79bb\uff08\u5373minDist\u6570\u7ec4\uff09\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\n        // \u7531\u4e8ecur\u8282\u70b9\u662f\u65b0\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5173\u5fc3\u4e0e cur \u76f8\u8fde\u7684 \u975e\u751f\u6210\u6811\u8282\u70b9 \u7684\u8ddd\u79bb \u662f\u5426\u6bd4 \u539f\u6765 \u975e\u751f\u6210\u6811\u8282\u70b9\u5230\u751f\u6210\u6811\u8282\u70b9\u7684\u8ddd\u79bb\u66f4\u5c0f\u4e86\u5462\n        for (int j = 1; j &lt;= v; j++) {\n            // \u66f4\u65b0\u7684\u6761\u4ef6\uff1a\n            // \uff081\uff09\u8282\u70b9\u662f \u975e\u751f\u6210\u6811\u91cc\u7684\u8282\u70b9\n            // \uff082\uff09\u4e0ecur\u76f8\u8fde\u7684\u67d0\u8282\u70b9\u7684\u6743\u503c \u6bd4 \u8be5\u67d0\u8282\u70b9\u8ddd\u79bb\u6700\u5c0f\u751f\u6210\u6811\u7684\u8ddd\u79bb\u5c0f\n            // \u5f88\u591a\u5f55\u53cb\u770b\u5230\u81ea\u5df1 \u5c31\u60f3\u4e0d\u660e\u767d\u4ec0\u4e48\u610f\u601d\uff0c\u5176\u5b9e\u5c31\u662f cur \u662f\u65b0\u52a0\u5165 \u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \u6240\u6709\u975e\u751f\u6210\u6811\u7684\u8282\u70b9\u8ddd\u79bb\u751f\u6210\u6811\u8282\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb \u7531\u4e8e cur\u7684\u65b0\u52a0\u5165\uff0c\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u6570\u636e\u4e86\n            if (!isInTree[j] &amp;&amp; grid[cur][j] &lt; minDist[j]) {\n                minDist[j] = grid[cur][j];\n            }\n        }\n    }\n    // \u7edf\u8ba1\u7ed3\u679c\n    int result = 0;\n    for (int i = 2; i &lt;= v; i++) { // \u4e0d\u8ba1\u7b2c\u4e00\u4e2a\u9876\u70b9\uff0c\u56e0\u4e3a\u7edf\u8ba1\u7684\u662f\u8fb9\u7684\u6743\u503c\uff0cv\u4e2a\u8282\u70b9\u6709 v-1\u6761\u8fb9\n        result += minDist[i];\n    }\n    cout &lt;&lt; result &lt;&lt; endl;\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#kruskal","title":"kruskal\u7b97\u6cd5","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://kamacoder.com/problempage.php?pid=1053</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u5728\u4e16\u754c\u7684\u67d0\u4e2a\u533a\u57df\uff0c\u6709\u4e00\u4e9b\u5206\u6563\u7684\u795e\u79d8\u5c9b\u5c7f\uff0c\u6bcf\u4e2a\u5c9b\u5c7f\u4e0a\u90fd\u6709\u4e00\u79cd\u73cd\u7a00\u7684\u8d44\u6e90\u6216\u8005\u5b9d\u85cf\u3002\u56fd\u738b\u6253\u7b97\u5728\u8fd9\u4e9b\u5c9b\u5c7f\u4e0a\u5efa\u516c\u8def\uff0c\u65b9\u4fbf\u8fd0\u8f93\u3002</p> <p>\u4e0d\u540c\u5c9b\u5c7f\u4e4b\u95f4\uff0c\u8def\u9014\u8ddd\u79bb\u4e0d\u540c\uff0c\u56fd\u738b\u5e0c\u671b\u4f60\u53ef\u4ee5\u89c4\u5212\u5efa\u516c\u8def\u7684\u65b9\u6848\uff0c\u5982\u4f55\u53ef\u4ee5\u4ee5\u6700\u77ed\u7684\u603b\u516c\u8def\u8ddd\u79bb\u5c06 \u6240\u6709\u5c9b\u5c7f\u8054\u901a\u8d77\u6765\u3002</p> <p>\u7ed9\u5b9a\u4e00\u5f20\u5730\u56fe\uff0c\u5176\u4e2d\u5305\u62ec\u4e86\u6240\u6709\u7684\u5c9b\u5c7f\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4ee5\u6700\u5c0f\u5316\u516c\u8def\u5efa\u8bbe\u957f\u5ea6\uff0c\u786e\u4fdd\u53ef\u4ee5\u94fe\u63a5\u5230\u6240\u6709\u5c9b\u5c7f\u3002</p> <p>\u8f93\u5165\u63cf\u8ff0\uff1a</p> <p>\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570V \u548c E\uff0cV\u4ee3\u8868\u9876\u70b9\u6570\uff0cE\u4ee3\u8868\u8fb9\u6570 \u3002\u9876\u70b9\u7f16\u53f7\u662f\u4ece1\u5230V\u3002\u4f8b\u5982\uff1aV=2\uff0c\u4e00\u4e2a\u6709\u4e24\u4e2a\u9876\u70b9\uff0c\u5206\u522b\u662f1\u548c2\u3002</p> <p>\u63a5\u4e0b\u6765\u5171\u6709 E \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 v1\uff0cv2 \u548c val\uff0cv1 \u548c v2 \u4e3a\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0cval\u4ee3\u8868\u8fb9\u7684\u6743\u503c\u3002</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u8f93\u51fa\u8054\u901a\u6240\u6709\u5c9b\u5c7f\u7684\u6700\u5c0f\u8def\u5f84\u603b\u8ddd\u79bb</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_3","title":"\u601d\u8def","text":"<p>\u6211\u4eec\u8fd9\u4e2a\u5730\u65b9\u7684kruskal\u7b97\u6cd5\u7684\u601d\u8def\u662f\u4ee5\u8fb9\u4e3a\u4e3b\uff0c\u4e3b\u8981\u662f\u6839\u636e\u8fb9\u6765\u6392\u5e8f\uff0c\u5bfb\u627e\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684\u8fb9\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0c\u5982\u679c\u751f\u6210\u6811\u4e2d\u5df2\u7ecf\u6709\u5f53\u524d\u8fb9\u7684\u9996\u5c3e\u7ed3\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u8bf4\u660e\u52a0\u5165\u8be5\u8fb9\u4f1a\u751f\u6210\u73af\uff0c\u5982\u679c\u9996\u5c3e\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u5176\u52a0\u5165\u751f\u6210\u6811\u3002</p> <p>\u5b9e\u73b0\u4e0a\u8ff0\u601d\u8def\u7684\u65b9\u6cd5\u4e3b\u8981\u662f\u5e76\u67e5\u96c6\uff0c\u901a\u8fc7\u5c06\u4e24\u4e2a\u8282\u70b9\u52a0\u5165\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u5e76\u4e14\u5224\u65ad\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u5728\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\n// l,r\u4e3a \u8fb9\u4e24\u8fb9\u7684\u8282\u70b9\uff0cval\u4e3a\u8fb9\u7684\u6570\u503c\nstruct Edge {\n    int l, r, val;\n};\n\n// \u8282\u70b9\u6570\u91cf\nint n = 10001;\n// \u5e76\u67e5\u96c6\u6807\u8bb0\u8282\u70b9\u5173\u7cfb\u7684\u6570\u7ec4\nvector&lt;int&gt; father(n, -1); // \u8282\u70b9\u7f16\u53f7\u662f\u4ece1\u5f00\u59cb\u7684\uff0cn\u8981\u5927\u4e00\u4e9b\n\n// \u5e76\u67e5\u96c6\u521d\u59cb\u5316\nvoid init() {\n    for (int i = 0; i &lt; n; ++i) {\n        father[i] = i;\n    }\n}\n\n// \u5e76\u67e5\u96c6\u7684\u67e5\u627e\u64cd\u4f5c\nint find(int u) {\n    return u == father[u] ? u : father[u] = find(father[u]); // \u8def\u5f84\u538b\u7f29\n}\n\n// \u5e76\u67e5\u96c6\u7684\u52a0\u5165\u96c6\u5408\nvoid join(int u, int v) {\n    u = find(u); // \u5bfb\u627eu\u7684\u6839\n    v = find(v); // \u5bfb\u627ev\u7684\u6839\n    if (u == v) return ; // \u5982\u679c\u53d1\u73b0\u6839\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u4e0d\u7528\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde\u76f4\u63a5\u8fd4\u56de\n    father[v] = u;\n}\n\nint main() {\n\n    int v, e;\n    int v1, v2, val;\n    vector&lt;Edge&gt; edges;\n    int result_val = 0;\n    cin &gt;&gt; v &gt;&gt; e;\n    while (e--) {\n        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; val;\n        edges.push_back({v1, v2, val});\n    }\n\n    // \u6267\u884cKruskal\u7b97\u6cd5\n    // \u6309\u8fb9\u7684\u6743\u503c\u5bf9\u8fb9\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    sort(edges.begin(), edges.end(), [](const Edge&amp; a, const Edge&amp; b) {\n            return a.val &lt; b.val;\n    });\n\n    // \u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    init();\n\n    // \u4ece\u5934\u5f00\u59cb\u904d\u5386\u8fb9\n    for (Edge edge : edges) {\n        // \u5e76\u67e5\u96c6\uff0c\u641c\u51fa\u4e24\u4e2a\u8282\u70b9\u7684\u7956\u5148\n        int x = find(edge.l);\n        int y = find(edge.r);\n\n        // \u5982\u679c\u7956\u5148\u4e0d\u540c\uff0c\u5219\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n        if (x != y) {\n            result_val += edge.val; // \u8fd9\u6761\u8fb9\u53ef\u4ee5\u4f5c\u4e3a\u751f\u6210\u6811\u7684\u8fb9\n            join(x, y); // \u4e24\u4e2a\u8282\u70b9\u52a0\u5165\u5230\u540c\u4e00\u4e2a\u96c6\u5408\n        }\n    }\n    cout &lt;&lt; result_val &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_4","title":"\u4f7f\u7528\u8303\u56f4\u63a8\u8350","text":"<p>\u7a00\u758f\u56fe\u63a8\u8350\u4f7f\u7528kruskal\u7b97\u6cd5\uff0c\u7a20\u5bc6\u56fe\u6211\u4eec\u63a8\u8350\u4f7f\u7528prim\u7b97\u6cd5\u3002\u4e0d\u540c\u7b97\u6cd5\u7684\u4f7f\u7528\u8303\u56f4\u5dee\u522b\u4e3b\u8981\u662f\u7ed3\u70b9\u6570\u91cf\u548c\u8fb9\u6570\u91cf\u76f8\u6bd4\u54ea\u4e2a\u66f4\u591a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#ending","title":"ENDING\uff01","text":""},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/","title":"\u7b97\u6cd5\uff08\u56de\u6eaf\uff09-n\u7687\u540e\u95ee\u9898","text":"<p>\u8be5\u9898\u4e3b\u8981\u6765\u81ea\u4e8e\u529b\u6263\u3002\u7b97\u6cd5\u4e3b\u8981\u4f7f\u7528\u4e86\u56de\u6eaf\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u8be5\u9898\u7684\u76f8\u5173\u4ee3\u7801\u601d\u8def\u6765\u81ea\u4e8e\u4ee3\u7801\u968f\u60f3\u5f55\u7684carl\u54e5\u3002</p> <p>https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html#%E6%80%9D%E8%B7%AF</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>https://leetcode.cn/problems/n-queens/description/</p> <p>{%asset_img image-20240621093705811.png \u9898\u76ee\u63cf\u8ff0%}</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/#_2","title":"\u9898\u76ee\u89e3\u6790\uff1a","text":"<p>\u8be5\u9898\u4e3b\u8981\u4f7f\u7528\u4e86\u56de\u6eaf\u6cd5\uff0c\u800c\u4e14\uff0cn\u7687\u540e\u95ee\u9898\u8981\u6c42\u6240\u6709\u7687\u540e\u4e0d\u5728\u540c\u4e00\u884c\uff0c\u540c\u4e00\u5217\uff0c\u540c\u4e00\u659c\u7ebf\u3002\u56e0\u6b64\u6211\u4eec\u628a\u6574\u4e2a\u68cb\u76d8\u770b\u4f5c\u4e00\u4e2a\u6811\u3002</p> <p>\u5728\u6bcf\u4e00\u5c42\u4e0d\u65ad\u5faa\u73af\uff0c\u5f80\u4e0b\u4e00\u884c\u5219\u662f\u6a21\u62df\u6811\u679d\u5411\u4e0b\u7684\u8fc7\u7a0b\uff0c\u9010\u6e10\u9012\u5f52\u3002\u7ed3\u675f\u8be5\u5c42\u67d0\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u5c31\u8fdb\u884c\u56de\u6eaf\u3002</p> <p>\u76f8\u5bf9\u6765\u8bf4\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u662f\u9700\u8981\u4e00\u4e2a\u9a8c\u8bc1\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\u7684isvalid\u51fd\u6570\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/#_3","title":"\u4ee3\u7801\u89e3\u6790\uff1a","text":"Text Only<pre><code>class Solution {\nvector&lt;vector&lt;string&gt;&gt; result;\nprivate:\n    void huisu(int n,int row,vector&lt;string&gt;&amp; checkpoint){\n        if(n==row){\n            result.push_back(checkpoint);\n            return;\n        }\n        for(int i=0;i&lt;n;i++){\n            if(isvalid(n,i,row,checkpoint)){//n\u662f\u603b\u884c\u6570\u5217\u6570\uff0ci\u662f\u5f53\u524d\u5217\u6570\uff0crow\u662f\u5f53\u524d\u884c\u6570\n                checkpoint[row][i]='Q';\n                huisu(n,row+1,checkpoint);\n                checkpoint[row][i]='.';\n            }\n        }\n    }\n    bool isvalid(int n ,int col ,int row , vector&lt;string&gt; checkpoint){\n        for(int i=0;i&lt;row;i++){\n            if(checkpoint[i][col]=='Q'){\n                return false;\n            }\n        }\n        //45\u5ea6\n        for(int i=row-1,j=col-1;i&gt;=0&amp;&amp;j&gt;=0;i--,j--){\n            if(checkpoint[i][j]=='Q'){\n                return false;\n            }\n        }\n        //135\u5ea6\n        for(int i=row-1, j=col+1;i&gt;=0&amp;&amp;j&lt;n;i--,j++){\n            if(checkpoint[i][j]=='Q'){\n                return false;\n            }\n        }\n        return true;\n    }\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        std::vector&lt;std::string&gt; checkpoint(n,std::string(n,'.'));\n        result.clear();\n        huisu(n,0,checkpoint);\n        return result;\n    }\n};\n</code></pre> <p>\u6ce8\u610f\u521d\u59cb\u5316checkpoint\u7684\u65f6\u5019\uff0c\u8981\u4f7f\u7528\u76f8\u5173stl\u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>\u6574\u4f53\u4e0a\u8be5\u9898\u601d\u8def\u4e0d\u662f\u5f88\u96be\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E6%95%B0%E7%8B%AC%E9%97%AE%E9%A2%98/","title":"\u7b97\u6cd5\uff08\u56de\u6eaf\uff09-\u6570\u72ec\u95ee\u9898","text":"<p>\u8be5\u4ee3\u7801\u548c\u7b97\u6cd5\u4e3b\u8981\u5b66\u4e60\u4e86\u4ee3\u7801\u968f\u60f3\u5f55\u7684\u4e00\u4e9b\u76f8\u5173\u601d\u8def\u548c\u4ee3\u7801\u3002</p> <p>https://programmercarl.com/0037.%E8%A7%A3%E6%95%B0%E7%8B%AC.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E6%95%B0%E7%8B%AC%E9%97%AE%E9%A2%98/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>https://leetcode.cn/problems/sudoku-solver/description/</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E6%95%B0%E7%8B%AC%E9%97%AE%E9%A2%98/#_2","title":"\u9898\u76ee\u89e3\u6790","text":"<p>\u8be5\u9898\u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e8c\u7ef4\u9012\u5f52\uff0c\u4e0d\u65ad\u4ece\u8868\u683c\u7684\u6bcf\u4e00\u5c42\u904d\u5386\uff0c\u7136\u540e\u9012\u5f52\u5411\u4e0b\u9762\u6bcf\u4e00\u5c42\u8fdb\u884c\u904d\u5386\u3002</p> <p>\u6ce8\u610f\u7f16\u5199\u5224\u65ad\u5f53\u524d\u586b\u5165\u7684\u5143\u7d20\u662f\u5426\u5408\u6cd5\u7684\u3002\u6ca1\u6709\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\uff0c\u51fd\u6570\u6267\u884c\u7684\u7ec8\u6b62\u8981\u6c42\u662f\uff0c\u9012\u5f52\u627e\u5230\u4e00\u4e2a\u53f6\u5b50\uff0c\u6b64\u65f6\u4fbf\u76f4\u63a5\u8fd4\u56detrue\u5373\u53ef\uff0c\u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u6570\u72ec\u3002</p> <p>\u4ee3\u7801\uff1a</p> Text Only<pre><code>class Solution {\nprivate:\n    bool huisu(vector&lt;vector&lt;char&gt;&gt;&amp; board){\n        for(int i=0;i&lt;board.size();i++){\n            for(int j=0;j&lt;board[0].size();j++){\n                if(board[i][j]!='.'){\n                    continue;\n                }\n                for(char k='1';k&lt;='9';k++){\n                    if(isvalid(i,j,k,board)){\n                        board[i][j]=k;\n                        if(huisu(board)) return true;\n                        board[i][j]='.';\n                    }\n\n                }return false;\n            }\n        }\n        return true;\n    }\nbool isvalid(int row,int col,char k,vector&lt;vector&lt;char&gt;&gt; board){\n    //\u5224\u65ad\u884c\u662f\u5426\u5408\u6cd5\n    for(int i=0;i&lt;9;i++){\n        if(board[row][i]==k) return false;\n    }\n\n    //\u5224\u65ad\u5217\u662f\u5426\u5408\u6cd5\n    for(int j=0;j&lt;9;j++){\n        if(board[j][col]==k) return false;\n    }\n    //\u5224\u65ad\u5f53\u524d\u4e5d\u5bab\u683c\u662f\u5426\u5408\u6cd5\n    int startrow=(row/3)*3;\n    int startcol=(col/3)*3;\n    for(int m=startrow;m&lt;startrow+3;m++){\n        for(int n=startcol;n&lt;startcol+3;n++){\n            if(board[m][n]==k) return false;\n        }\n    }\n    return true;\n}\npublic:\n    void solveSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        huisu(board);\n    }\n};\n</code></pre> <p>\u56e0\u6b64\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0a\uff0c\u6ce8\u610f\u9012\u5f52\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3abool\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/","title":"\u7b97\u6cd5\uff08\u56de\u6eaf\uff09-\u91cd\u65b0\u5b89\u6392\u884c\u7a0b","text":"<p>\u672c\u4ee3\u7801\u53ca\u5176\u76f8\u5173\u601d\u8def\u6765\u81ea\uff1ahttps://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.html#%E6%80%9D%E8%B7%AF</p> <p>\u5373\u4ee3\u7801\u968f\u60f3\u5f55\u7684carl\u54e5\u90a3\u91cc\uff0c\u6211\u4e3b\u8981\u662f\u8fdb\u884c\u76f8\u5173\u5b66\u4e60\uff0c\u5e76\u8fdb\u884c\u5bf9\u5e94\u603b\u7ed3\u3002</p> <p>\u9898\u76ee\u8981\u6c42\uff1a</p> <p>https://leetcode.cn/problems/reconstruct-itinerary/description/</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/#_1","title":"\u9898\u76ee\u89e3\u6790\uff1a","text":"<p>\u9996\u5148\u8be5\u9898\uff0c\u4e3b\u8981\u4f7f\u7528\u4e86\u56de\u6eaf\u6cd5\uff0c\u5176\u5b9e\u6838\u5fc3\u8fd8\u662f\u6df1\u5ea6\u641c\u7d22\u7b97\u6cd5\u3002</p> <p>\u6839\u636e\u8be5\u9898\u63cf\u8ff0\uff0c\u4e58\u5ba2\u7684\u822a\u73ed\u8981\u6c42\u662f\u4eceJFK\u51fa\u53d1\uff0c\u628a\u7ed9\u51fa\u7684\u6bcf\u4e00\u4e2a\u822a\u73ed\uff0c\u5373\uff0c\u6bcf\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u90fd\u904d\u5386\u8d70\u4e00\u904d\u3002</p> <p>\u6bd4\u5982\u793a\u4f8b1\uff1a</p> <p>\u9996\u5148\u9009\u62e9JFK\uff0c\u7136\u540eJFK\u53ef\u4ee5\u5230\u8fbe\u7684\u5730\u65b9\u6709MUC\uff0c\u4e14\u53ea\u6709MUC\uff0c\u6240\u4ee5\u9009\u62e9MUC\uff0c\u63a5\u7740MUC\u53ef\u4ee5\u53bb\u7684\u5730\u65b9\u53ea\u6709LHR\uff0c\u5219\u9009\u62e9LHR\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5f80\u540e\u6700\u540e\u5f97\u5230\u76f8\u5e94\u7ed3\u679c\u3002</p> <p>\u6ce8\u610f\uff1a\u9898\u76ee\u8981\u6c42\u53ea\u9009\u62e9\u4e00\u6761\u901a\u8def\u5373\u53ef\u3002\u6240\u4ee5\u5728\u56de\u6eaf\u904d\u5386\u7684\u7ec8\u6b62\u6761\u4ef6\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528result.size()==\u822a\u73ed\u6570+1\uff0c\u5219\u7b26\u5408\u6211\u4eec\u7684\u901a\u8def\u8981\u6c42\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9E%E6%BA%AF%EF%BC%89-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/#_2","title":"\u4ee3\u7801\u5206\u6790\uff1a","text":"C++<pre><code>class Solution {\nprivate:\n// unordered_map&lt;\u51fa\u53d1\u673a\u573a, map&lt;\u5230\u8fbe\u673a\u573a, \u822a\u73ed\u6b21\u6570&gt;&gt; targets\nunordered_map&lt;string, map&lt;string, int&gt;&gt; targets;\nbool backtracking(int ticketNum, vector&lt;string&gt;&amp; result) {\n    if (result.size() == ticketNum + 1) {\n        return true;\n    }\n    for (pair&lt;const string, int&gt;&amp; target : targets[result[result.size() - 1]]) {\n        if (target.second &gt; 0 ) { // \u8bb0\u5f55\u5230\u8fbe\u673a\u573a\u662f\u5426\u98de\u8fc7\u4e86\n            result.push_back(target.first);\n            target.second--;\n            if (backtracking(ticketNum, result)) return true;\n            result.pop_back();\n            target.second++;\n        }\n    }\n    return false;\n}\npublic:\n    vector&lt;string&gt; findItinerary(vector&lt;vector&lt;string&gt;&gt;&amp; tickets) {\n        targets.clear();\n        vector&lt;string&gt; result;\n        for (const vector&lt;string&gt;&amp; vec : tickets) {\n            targets[vec[0]][vec[1]]++; // \u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\n        }\n        result.push_back(\"JFK\"); // \u8d77\u59cb\u673a\u573a\n        backtracking(tickets.size(), result);\n        return result;\n    }\n};\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5206\u6790\u5982\u4e0b\uff1a</p> Text Only<pre><code>unordered_map&lt;string, map&lt;string, int&gt;&gt; targets;\n</code></pre> <p>\u8be5map\u6620\u5c04\u4e3b\u8981\u7528\u6765\u5b58\u653e\u5bf9\u5e94\u4e00\u4e2a\u51fa\u53d1\u5730\uff0c\u53ca\u5176\u5bf9\u5e94\u7684\u6240\u6709\u76ee\u7684\u5730\u7684\u4fe1\u606f\u53ca\u5176\u5269\u4f59\u8fd8\u53ef\u4ee5\u4e58\u5750\u7684\u822a\u73ed\u6b21\u6570\u3002</p> Text Only<pre><code>bool backtracking(int ticketNum, vector&lt;string&gt;&amp; result) {\n    if (result.size() == ticketNum + 1) {\n        return true;\n    }\n    for (pair&lt;const string, int&gt;&amp; target : targets[result[result.size() - 1]]) {\n        if (target.second &gt; 0 ) { // \u8bb0\u5f55\u5230\u8fbe\u673a\u573a\u662f\u5426\u98de\u8fc7\u4e86\n            result.push_back(target.first);\n            target.second--;\n            if (backtracking(ticketNum, result)) return true;\n            result.pop_back();\n            target.second++;\n        }\n    }\n    return false;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4e3a\u56de\u6eaf\u7b97\u6cd5\u4e3b\u4f53\u90e8\u5206\u3002</p> <p>\u56de\u6eaf\u51fd\u6570\u7684\u53c2\u6570\u4e3a\u603b\u7684\u822a\u73ed\u6570\u76ee\uff0c\u5f53\u524d\u7684\u7ed3\u679c\u901a\u8defresult;</p> <p>\u7ec8\u6b62\u6761\u4ef6\u4e3a\u822a\u73ed\u6570+1\u7b49\u4e8e\u5f53\u524dresult\u7684\u6570\u76ee\uff0c\u5373\u53ef\u3002</p> <p>\u5faa\u73af\u4f53\uff1a\u5373\u5bf9\u5e94\u7684\u56de\u6eaf\u904d\u5386\u6811\u7684\u540c\u6811\u5c42\uff0c\u5224\u65ad\u8be5\u822a\u73ed\u662f\u5426\u88ab\u7528\u5b8c\u4e86\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5730\u70b9\u52a0\u5165result\uff0c\u8be5\u822a\u73ed\u7684num-1\uff0c\u6ce8\u610f\u8981\u5f15\u7528\uff0c\u56e0\u4e3a\u8fd9\u91cc\u9700\u8981\u64cd\u4f5ctargets\u7684\u6570\u636e\uff0c\u5982\u679ctarget\u4e0d\u5f15\u7528targets\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6570\u636e\u65e0\u6cd5\u6539\u53d8\uff0c\u5728\u6df1\u5c42\u9012\u5f52\u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u7136\u540e\u5c31\u662f\u5224\u65ad\u5f53\u524d\u8def\u5f84\u53ca\u5176\u5b50\u8def\u5f84\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u6df1\u5ea6\u641c\u7d22\uff0c\u7136\u540e\u56de\u6eaf\uff0c\u6700\u7ec8\u7ee7\u7eed\u5faa\u73af\u8be5\u5c42\u7684\u5176\u4ed6\u822a\u73ed\u5730\u70b9\u3002</p> Text Only<pre><code>vector&lt;string&gt; findItinerary(vector&lt;vector&lt;string&gt;&gt;&amp; tickets) {\n        targets.clear();\n        vector&lt;string&gt; result;\n        for (const vector&lt;string&gt;&amp; vec : tickets) {\n            targets[vec[0]][vec[1]]++; // \u8bb0\u5f55\u6620\u5c04\u5173\u7cfb\n        }\n        result.push_back(\"JFK\"); // \u8d77\u59cb\u673a\u573a\n        backtracking(tickets.size(), result);\n        return result;\n    }\n</code></pre> <p>\u4e3b\u51fd\u6570\u4f53\uff0c\u9996\u5148\u5c06\u6240\u6709\u7968\u52a1\u4fe1\u606f\u5b58\u5165targets,\u7136\u540e\u8bb0\u5f55\u521d\u59cb\u673a\u573a\uff0c\u8fdb\u884c\u56de\u6eaf\uff0c\u5f97\u5230\u7b54\u6848\u3002</p> <p>\u4e0a\u8ff0\u5c31\u662f\u8be5\u9898\u7684\u6240\u6709\u601d\u8def\u53ca\u5176\u76f8\u5173\u9898\u89e3\u4ee3\u7801\u5206\u6790\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/","title":"\u7f16\u8f91\u8ddd\u79bb\u76f8\u5173\u95ee\u9898(\u9644\u5e26\u90e8\u5206\u5e8f\u5217\u95ee\u9898)","text":""},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_2","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/longest-common-subsequence/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 text1 \u548c text2\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 \u5b50\u5e8f\u5217 \u662f\u6307\u8fd9\u6837\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a\u5b83\u662f\u7531\u539f\u5b57\u7b26\u4e32\u5728\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\uff09\u540e\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002</p> <p>\u4f8b\u5982\uff0c\"ace\" \u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\uff0c\u4f46 \"aec\" \u4e0d\u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u300c\u516c\u5171\u5b50\u5e8f\u5217\u300d\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6240\u5171\u540c\u62e5\u6709\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u82e5\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de 0\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u8be5\u9898\u76ee\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7684\u89e3\u6cd5\u3002</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u542b\u4e49\uff0cdp[i][j]\u8868\u793a\u4ee5i-1\uff0cj-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002</p> <p>2\u3001dp\u6570\u7ec4\u7684\u9012\u63a8\u516c\u5f0f\uff1a</p> <p>\u4e00\u79cd\u662ftext1[i-1]=text2[j-1]\uff0c\u6b64\u65f6dp[i][j]=dp[i-1][j-1]+1;</p> <p>\u4e00\u79cd\u662ftext1[i-1]!=text2[j-1]\uff0c\u90a3\u4e48\u4e00\u79cd\u662f0-i-2\u7684\u5b57\u7b26\u4e32\u548c0-j-1\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\u3002</p> <p>\u4e00\u79cd\u662f0-i-1,0-j-2\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u4e8c\u8005\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002</p> <p>3\u3001dp\u6570\u7ec4\u521d\u59cb\u5316\uff0cdp[i][0]=0,dp[0][j]=0;\u5176\u4ed6\u7684\u6570\u7ec4\u5143\u7d20\u7684\u503c\u90fd\u4f9d\u8d56\u4e8e\u8fd9\u4e24\u5217\u5143\u7d20\u3002</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u5de6\u4e0a\u89d2\u7684\u5143\u7d20\u6216\u8005\u5de6\u8fb9\uff0c\u4e0a\u8fb9\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u904d\u5386\u987a\u5e8f\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u5f97\u5230\uff0c\u662f\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u4e3e\u4f8b\u8fdb\u884c\u76f8\u5173\u63a8\u5bfc\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int longestCommonSubsequence(string text1, string text2) {\n        vector&lt;vector&lt;int&gt;&gt; dp(text1.size() + 1, vector&lt;int&gt;(text2.size() + 1, 0));\n        for (int i = 1; i &lt;= text1.size(); i++) {\n            for (int j = 1; j &lt;= text2.size(); j++) {\n                if (text1[i - 1] == text2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[text1.size()][text2.size()];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_3","title":"\u4e0d\u76f8\u4ea4\u7684\u7ebf","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/uncrossed-lines/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u6211\u4eec\u5728\u4e24\u6761\u72ec\u7acb\u7684\u6c34\u5e73\u7ebf\u4e0a\u6309\u7ed9\u5b9a\u7684\u987a\u5e8f\u5199\u4e0b A \u548c B \u4e2d\u7684\u6574\u6570\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u4e00\u4e9b\u8fde\u63a5\u4e24\u4e2a\u6570\u5b57 A[i] \u548c B[j] \u7684\u76f4\u7ebf\uff0c\u53ea\u8981 A[i] == B[j]\uff0c\u4e14\u6211\u4eec\u7ed8\u5236\u7684\u76f4\u7ebf\u4e0d\u4e0e\u4efb\u4f55\u5176\u4ed6\u8fde\u7ebf\uff08\u975e\u6c34\u5e73\u7ebf\uff09\u76f8\u4ea4\u3002</p> <p>\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u7ed8\u5236\u7ebf\u6761\uff0c\u5e76\u8fd4\u56de\u6211\u4eec\u53ef\u4ee5\u7ed8\u5236\u7684\u6700\u5927\u8fde\u7ebf\u6570\u3002</p> <p>\u601d\u8def\uff1a</p> <p>\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5f88\u660e\u663e\u770b\u51fa\u6765\uff0c\u5176\u5b9e\u6c42\u89e3\u7684\u5c31\u662f\u4e24\u4e2a\u5e8f\u5217\u4e2d\u7684\u6309\u987a\u5e8f\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u800c\u4e14\u4e8c\u8005\u4e0d\u80fd\u76f8\u4ea4\uff0c\u90a3\u5c31\u8bf4\u660e\u5fc5\u987b\u662f\u5b50\u5e8f\u5217\uff0c\u56e0\u4e3a\u5b50\u5e8f\u5217\u662f\u6309\u987a\u5e8f\u7684\u3002</p> <p>\u4ee3\u7801\uff1a</p> <p>\u76f4\u63a5\u53c2\u8003\u4e0a\u4e00\u9898\u7684\u4ee3\u7801</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_4","title":"\u6700\u5927\u5b50\u5e8f\u548c","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/maximum-subarray/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p> <p>\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u53ca\u5176\u542b\u4e49\uff0cdp[i]\uff1a\u5305\u62ec\u4e0b\u6807i\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u548c\u4e3adp[i]</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f\uff0c\u5f53nums[i]\u52a0\u5165\u5230\u5b50\u5e8f\u5217\u548c\u7684\u65f6\u5019\uff0c\u5224\u65ad\u539f\u6765\u7684dp[i]\u548c\u65b0\u7684dp[i]\u54ea\u4e2a\u5927\uff0c\u5982\u679c\u5927\uff0c\u5c31\u52a0\u5165\uff0c\u4e0d\u5927\u5c31\u4e0d\u53d8\u3002</p> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42\u89e3\u7684\u6700\u5927\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6240\u6709\u5143\u7d20\u7684\u548c\u521d\u59cb\u5316\u4e3a0\u5373\u53ef\uff0cdp[0]=nums[0]\u5373\u53ef\u3002</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f\uff0c\u4ece\u524d\u5f80\u540e</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc\uff0c\u81ea\u884c\u63a8\u5bfc\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() == 0) return 0;\n        vector&lt;int&gt; dp(nums.size());\n        dp[0] = nums[0];\n        int result = dp[0];\n        for (int i = 1; i &lt; nums.size(); i++) {\n            dp[i] = max(dp[i - 1] + nums[i], nums[i]); // \u72b6\u6001\u8f6c\u79fb\u516c\u5f0f\n            if (dp[i] &gt; result) result = dp[i]; // result \u4fdd\u5b58dp[i]\u7684\u6700\u5927\u503c\n        }\n        return result;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_5","title":"\u5224\u65ad\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/is-subsequence/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\"ace\"\u662f\"abcde\"\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c\"aec\"\u4e0d\u662f\uff09\u3002</p> <p>\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u542b\u4e49\uff0cdp[i][j]\u8868\u793a\u4ee5i-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32s\uff0c\u548c\u4ee5j-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32t\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f\uff0c</p> <ul> <li>if (s[i - 1] == t[j - 1])</li> <li>t\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u5728s\u4e2d\u4e5f\u51fa\u73b0\u4e86</li> <li>if (s[i - 1] != t[j - 1])</li> <li>\u76f8\u5f53\u4e8et\u8981\u5220\u9664\u5143\u7d20\uff0c\u7ee7\u7eed\u5339\u914d</li> </ul> <p>3\u3001dp\u6570\u7ec4\u7684\u521d\u59cb\u5316</p> <p>\u4ece\u9012\u63a8\u516c\u5f0f\u4e2d\u5f97\u51fa\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u5143\u7d20\uff0c\u540c\u65f6\u662f\u6c42\u89e3\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u6240\u4ee5\u76f4\u63a5dp[i][0]\u548cdp[0][j]\u5176\u5b9e\u5c31\u8868\u793a0.</p> <p>4\u3001\u786e\u5b9a\u904d\u5386\u987a\u5e8f</p> <p>\u4ece\u524d\u5f80\u540e\uff0c\u5373\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfcdp\u6570\u7ec4\uff0c\u81ea\u884c\u63a8\u5bfc\u5373\u53ef\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>bool isSubsequence(string s, string t) {\n        vector&lt;vector&lt;int&gt;&gt; dp(s.size() + 1, vector&lt;int&gt;(t.size() + 1, 0));\n        for (int i = 1; i &lt;= s.size(); i++) {\n            for (int j = 1; j &lt;= t.size(); j++) {\n                if (s[i - 1] == t[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;\n                else dp[i][j] = dp[i][j - 1];\n            }\n        }\n        if (dp[s.size()][t.size()] == s.size()) return true;\n        return false;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_6","title":"\u4e0d\u540c\u7684\u5b50\u5e8f\u5217","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/distinct-subsequences/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 t \uff0c\u8ba1\u7b97\u5728 s \u7684\u5b50\u5e8f\u5217\u4e2d t \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p> <p>\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a \u5b50\u5e8f\u5217 \u662f\u6307\uff0c\u901a\u8fc7\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u4e14\u4e0d\u5e72\u6270\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u6240\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\"ACE\" \u662f \"ABCDE\" \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c \"AEC\" \u4e0d\u662f\uff09</p> <p>\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u7b26\u5408 32 \u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002</p> <p>\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u542b\u4e49\uff0cdp[i][j]\u8868\u793a\u4ee5i-1,j-1\u4e3a\u6807\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u51fa\u73b0\u7684\u4e2a\u6570\u3002</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f\uff0c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0cs[i-1]=t[j-1]\u548c\u4e24\u8005\u4e0d\u7b49\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>\u5982\u679c\u76f8\u7b49\uff0c\u90a3\u4e48dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];</p> <p>\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48dp[i][j] = dp[i - 1][j];</p> <p>3\u3001dp\u6570\u7ec4\u600e\u4e48\u521d\u59cb\u5316\uff0c</p> <p>\u5f88\u660e\u663e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff0c\u6570\u7ec4\u521d\u59cb\u5316\u5728dp[i][0]\u7684\u65f6\u5019\uff0c\u8868\u793a\u5b57\u7b26\u4e32s\u4e2d\u5305\u542b\u7a7a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u4e3a1\uff0c\u56e0\u6b64\u90fd\u521d\u59cb\u5316\u4e3a1\uff0c</p> <p>\u4f46\u662f\u5728dp[0][j]\u4e2d\u4e0d\u5b58\u5728\u7a7a\u5b57\u7b26\u4e32\u5305\u542b\u67d0\u4e9b\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u4e3a0\uff0c\u540c\u65f6dp[0][0]\u8868\u793a\u4e3a1.</p> <p>4\u3001\u9012\u63a8\u987a\u5e8f\uff0c\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u3002</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int numDistinct(string s, string t) {\n        vector&lt;vector&lt;uint64_t&gt;&gt; dp(s.size() + 1, vector&lt;uint64_t&gt;(t.size() + 1));\n        for (int i = 0; i &lt; s.size(); i++) dp[i][0] = 1;\n        for (int j = 1; j &lt; t.size(); j++) dp[0][j] = 0;\n        for (int i = 1; i &lt;= s.size(); i++) {\n            for (int j = 1; j &lt;= t.size(); j++) {\n                if (s[i - 1] == t[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[s.size()][t.size()];\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_7","title":"\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/delete-operation-for-two-strings/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u627e\u5230\u4f7f\u5f97 word1 \u548c word2 \u76f8\u540c\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u6bcf\u6b65\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int minDistance(string word1, string word2) {\n        vector&lt;vector&lt;int&gt;&gt; dp(word1.size() + 1, vector&lt;int&gt;(word2.size() + 1));\n        for (int i = 0; i &lt;= word1.size(); i++) dp[i][0] = i;\n        for (int j = 0; j &lt;= word2.size(); j++) dp[0][j] = j;\n        for (int i = 1; i &lt;= word1.size(); i++) {\n            for (int j = 1; j &lt;= word2.size(); j++) {\n                if (word1[i - 1] == word2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);\n                }\n            }\n        }\n        return dp[word1.size()][word2.size()];\n    }\n</code></pre> <p>\u4ee3\u78012\uff1a</p> C++<pre><code>int minDistance(string word1, string word2) {\n        vector&lt;vector&lt;int&gt;&gt; dp(word1.size()+1, vector&lt;int&gt;(word2.size()+1, 0));\n        for (int i=1; i&lt;=word1.size(); i++){\n            for (int j=1; j&lt;=word2.size(); j++){\n                if (word1[i-1] == word2[j-1]) dp[i][j] = dp[i-1][j-1] + 1;\n                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n        return word1.size()+word2.size()-dp[word1.size()][word2.size()]*2;\n    }\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%28%E9%99%84%E5%B8%A6%E9%83%A8%E5%88%86%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%29/#_8","title":"\u7f16\u8f91\u8ddd\u79bb","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://leetcode.cn/problems/edit-distance/</p> <p>\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002</p> <p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li> <li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li> </ul> <p>\u601d\u8def\uff1a</p> <p>1\u3001\u786e\u5b9adp\u6570\u7ec4\u53ca\u5176\u76f8\u5173\u542b\u4e49</p> <p>dp[i][j] \u8868\u793a\u4ee5\u4e0b\u6807i-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32word1\uff0c\u548c\u4ee5\u4e0b\u6807j-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32word2\uff0c\u6700\u6700\u5c11\u64cd\u4f5c\u6570\u4e3adp[i][j]\u3002</p> <p>2\u3001\u786e\u5b9a\u9012\u63a8\u516c\u5f0f</p> <p>\u5982\u679cword1[i-1]==word2[j-1]\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u64cd\u4f5c</p> <p>\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u6211\u4eec\u5c31\u8003\u8651\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u662f\u5220\u9664\u8fd8\u662f\u4fee\u6539\u8fd8\u662f\u589e\u52a0\uff0c\u5176\u5b9e\u5220\u9664\u548c\u589e\u52a0\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u589e\u52a0\u76f8\u5f53\u4e8e\u524d\u9762\u7684\u5143\u7d20\u5220\u6389\u4e86\uff0c+1,\u3002</p> <p>3\u3001\u786e\u5b9adp\u6570\u7ec4\u7684\u521d\u59cb\u5316\uff0c</p> <p>dp[i][0] \uff1a\u4ee5\u4e0b\u6807i-1\u4e3a\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32word1\uff0c\u548c\u7a7a\u5b57\u7b26\u4e32word2\uff0c\u6700\u8fd1\u7f16\u8f91\u8ddd\u79bb\u4e3adp[i][0]\u3002</p> <p>\u90a3\u4e48dp[i][0]\u5c31\u5e94\u8be5\u662fi\uff0c\u5bf9word1\u91cc\u7684\u5143\u7d20\u5168\u90e8\u505a\u5220\u9664\u64cd\u4f5c\uff0c\u5373\uff1adp[i][0] = i;</p> <p>\u540c\u7406dp[0][j] = j;</p> <p>4\u3001\u904d\u5386\u987a\u5e8f</p> <p>\u4ece\u5de6\u5f80\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b</p> <p>5\u3001\u4e3e\u4f8b\u63a8\u5bfc</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>int minDistance(string word1, string word2) {\n        vector&lt;vector&lt;int&gt;&gt; dp(word1.size() + 1, vector&lt;int&gt;(word2.size() + 1, 0));\n        for (int i = 0; i &lt;= word1.size(); i++) dp[i][0] = i;\n        for (int j = 0; j &lt;= word2.size(); j++) dp[0][j] = j;\n        for (int i = 1; i &lt;= word1.size(); i++) {\n            for (int j = 1; j &lt;= word2.size(); j++) {\n                if (word1[i - 1] == word2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                }\n                else {\n                    dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]}) + 1;\n                }\n            }\n        }\n        return dp[word1.size()][word2.size()];\n    }\n</code></pre> <p>ending!!!</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/","title":"\u6700\u77edHamilton\u8def\u5f84","text":"<p>\u9898\u76ee\u6765\u6e90\uff1ahttps://www.acwing.com/problem/content/93/</p> <p>\u9898\u76ee\u7b80\u5355\u63cf\u8ff0\uff1a</p> <p>\u7ed9\u5b9a\u4e00\u5f20 n \u4e2a\u70b9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u70b9\u4ece0\u223cn\u22121 \u6807\u53f7\uff0c\u6c42\u8d77\u70b9 0 \u5230\u7ec8\u70b9 n\u22121 \u7684\u6700\u77ed Hamilton \u8def\u5f84\u3002</p> <p>Hamilton \u8def\u5f84\u7684\u5b9a\u4e49\u662f\u4ece 0 \u5230 n\u22121 \u4e0d\u91cd\u4e0d\u6f0f\u5730\u7ecf\u8fc7\u6bcf\u4e2a\u70b9\u6070\u597d\u4e00\u6b21\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/#_1","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u8f93\u5165\u6574\u6570 n\u3002</p> <p>\u63a5\u4e0b\u6765 n \u884c\u6bcf\u884c n \u4e2a\u6574\u6570\uff0c\u5176\u4e2d\u7b2c i \u884c\u7b2c j \u4e2a\u6574\u6570\u8868\u793a\u70b9 i \u5230 j \u7684\u8ddd\u79bb\uff08\u8bb0\u4e3a a[i,j]\uff09\u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u7684 x,y,z\uff0c\u6570\u636e\u4fdd\u8bc1 a[x,x]=0\uff0ca[x,y]=a[y,x] \u5e76\u4e14 a[x,y]+a[y,z]\u2265a[x,z]</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/#_2","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u77ed Hamilton \u8def\u5f84\u7684\u957f\u5ea6\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%ADHamilton%E8%B7%AF%E5%BE%84/#_3","title":"\u601d\u8def","text":"<p>\u4f7f\u7528\u72b6\u6001DP\u6765\u89e3\u51b3\uff0c\u7528\u7a7a\u95f4\u6765\u6362\u65f6\u95f4</p> <p>\u6211\u4eec\u5047\u8bbe\u6709n\u4e2a\u70b9\uff0c\u90a3\u4e480-n-1\u7684\u8def\u5f84\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\uff0c\u6211\u4eec\u7528n\u4f4d\u4e8c\u8fdb\u5236\u6765\u8868\u793a\uff0c\u5f531&lt;&lt;n-1\u7684\u65f6\u5019\u6211\u4eec\u624d\u80fd\u7b97\u662f\u627e\u5230\u4e86\u4e00\u6761\u8def\u5f84\uff0c\u540c\u65f6\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u8def\u5f84\u957f\u5ea6\u662f\u6700\u5c0f\u503c\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u4fdd\u8bc1\u8def\u5f84\u957f\u5ea6\u662f\u6700\u5c0f\u503c\u5462\uff1f</p> <p>\u6211\u4eec\u9700\u8981dp\u52a8\u6001\u89c4\u5212\u6765\u8fdb\u884c\u9012\u63a8\u3002</p> <p>\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2adp\u6570\u7ec4\uff0cdp\u6570\u7ec4\u7684\u542b\u4e49\u662f\uff0cdp[i][j]\u8868\u793a\u8def\u5f84\u4e3ai\u7684\u65f6\u5019\uff0c\u5230\u8fbe\u76ee\u7684\u5730j\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u9012\u63a8\u516c\u5f0f\uff1a</p> <p>dp[i][j]=min(dp[i][j],dp[i-(1&lt;&lt;j)][k]+w[k][j]);</p> <p>dp[i-(1&lt;&lt;j)][k]\u8868\u793a\u5f53\u524d\u7684dp\u6570\u7ec4\u6700\u77ed\u8def\u5f84\u8fd8\u6ca1\u8d70\u5230j\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u518d\u8def\u5f84\u4e2di\u4e2d\u5220\u6389j\u4e4b\u540e\u7684\u6700\u77ed\u4ee5k\u4e3a\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u624d\u4f1a\u9700\u8981dp[i-(1&lt;j\u7684\u8def\u5f84\u957f\u5ea6\u624d\u7b97\u662f\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002 <p>\u904d\u5386\u65b9\u6cd5\uff1a</p> <p>\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e24\u91cd\u904d\u5386\uff0ci\u662f\u5916\u5c42\u904d\u5386\uff0c\u8868\u793a\u6240\u6709\u7684\u8def\u5f84\u60c5\u51b5\uff0cj\u662f\u5185\u5c42\u904d\u5386\uff0c\u8868\u793ai\u5f53\u524d\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5j\u4e3a\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u6ce8\u610f\u662f\u65e0\u5411\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u624d\u80fd\u8fd9\u6837\u8868\u793a\u8def\u5f84\uff0c\u56e0\u4e3a\u65e0\u5411\u7684\u8fb9\uff0c\u65e0\u8bba\u600e\u4e48\u6392\u5217\u53ea\u8981\u80fd\u8d70\u5c31\u884c\uff0c\u53ea\u770b\u6700\u540e\u7684\u7ed3\u679c\u3002\u5728\u5185\u5c42\u904d\u5386\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5bf9k\u8fdb\u884c\u904d\u5386\uff0ck\u7684\u53d6\u503c\u8303\u56f4\u662f0-&gt;n\u3002</p> <p>\u521d\u59cb\u5316\u6570\u7ec4\uff1a\u5728\u8fd9\u91cc\u6211\u4eec\u8981\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f9d\u8d56\u4e8e\u524d\u9762\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u7b2c\u4e00\u4e2a\u5143\u7d20\u521d\u59cb\u5316\uff0cf[0][0]=0;</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst int N=20,M=1&lt;&lt;N;\n\nint f[M][N],w[N][N];//w\u8868\u793a\u7684\u662f\u65e0\u6743\u56fe\nint main(){\n    //read data\n    int n;\n    cin&gt;&gt;n;\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;n;j++){\n            cin&gt;&gt;w[i][j];\n        }\n    }\n    //\u521d\u59cb\u5316f\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u4e3a\u6700\u5927\u503c\n    memset(f,0x3f,sizeof(f));\n    //\u521d\u59cb\u5316f\n    f[0][0]=0;\n    //\u51fd\u6570\u4f53\u6838\u5fc3\n    for(int i=0;i&lt;=(1&lt;&lt;n)-1;i++){\n        for(int j=0;j&lt;n;j++){\n            if(i&gt;&gt;j&amp;1){//\u5f53\u524d\u7b2cj\u4f4d\u662f\u5426\u8d70\u5230\u4e86\uff0c\u5982\u679c\u4e3a1\uff0c\u8868\u793a\u8d70\u5230\u4e86\u624d\u7b97\n                for(int k=0;k&lt;n;k++){\n                    if(i&gt;&gt;k&amp;1)//\u5224\u65ad\u5f53\u524d\u5982\u679c\u4ee5k\u4e3a\u7ec8\u70b9\uff0c\u662f\u5426\u7b2ck\u4f4d\u8d70\u5230\u4e86\n                    {\n                        f[i][j]=min(f[i][j],f[i-(1&lt;&lt;j)][k]+w[k][j]);\n                    }\n                }\n\n            }\n        }\n    }\n    cout&lt;&lt;f[(1&lt;&lt;n)-1][n-1]&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u7b54\u6848\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u5230\u8fd9\u91cc\u8fd0\u7528\u4e86\u4f4d\u8fd0\u7b97\uff0c\u540c\u65f6\u6211\u4eec\u7528\u4e8c\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\u6765\u8868\u793a\u8def\u5f84\u3002</p> <p>tips:\u8981\u6ce8\u610f\u4f4d\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\u5f88\u4f4e\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u5c3d\u91cf\u52a0\u5c0f\u62ec\u53f7\uff0c\u540c\u65f6\u6211\u4eec\u8981\u6ce8\u610f\u4e0d\u540c\u7684\u4f4d\u8fd0\u7b97\u4e4b\u95f4\u7684\u4f18\u5148\u7ea7\u662f\u6309\u7167\u7b26\u53f7\u6267\u884c\u987a\u5e8f\uff0c\u6211\u5728\u8ba1\u7b97\u7684\u65f6\u5019\u5c31\u88ab\u8d1f\u53f7\u5751\u4e86\uff0c\u8fdb\u884c\u5de6\u79fb\u8fd0\u7b97\u7684\u65f6\u5019\u51cf\u4e86\u4e00\uff0c\u5fd8\u8bb0\u52a0\u5c0f\u62ec\u53f7\uff0c\u5bfc\u81f4\u9519\u8bef\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/","title":"\u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u7b97\u6cd5\u7ade\u8d5b\u9898\u76ee\uff0c\u8003\u5bdf\u94fe\u8868</p> <p>\u9898\u76ee\u63cf\u8ff0\uff1a</p> <p>n \u4e2a\u4eba\u56f4\u6210\u4e00\u5708\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570,\u6570\u5230 mm \u7684\u4eba\u51fa\u5217\uff0c\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece 11 \u5f00\u59cb\u62a5\u6570\uff0c\u6570\u5230 mm \u7684\u4eba\u518d\u51fa\u5708\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6240\u6709\u7684\u4eba\u90fd\u51fa\u5708\uff0c\u8bf7\u8f93\u51fa\u4f9d\u6b21\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p> <p>\u6ce8\u610f\uff1a\u672c\u9898\u548c\u300a\u6df1\u5165\u6d45\u51fa-\u57fa\u7840\u7bc7\u300b\u4e0a\u4f8b\u9898\u7684\u8868\u8ff0\u7a0d\u6709\u4e0d\u540c\u3002\u4e66\u4e0a\u8868\u8ff0\u662f\u7ed9\u51fa\u6dd8\u6c70 n\u22121*n*\u22121 \u540d\u5c0f\u670b\u53cb\uff0c\u800c\u8be5\u9898\u662f\u5168\u90e8\u51fa\u5708\u3002</p> <p>\u9898\u76ee\u6765\u6e90\uff1ahttps://www.luogu.com.cn/problem/P1996</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570 n,m\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa\u4e00\u884c nn \u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8f93\u51fa\u6bcf\u4e2a\u51fa\u5708\u4eba\u7684\u7f16\u53f7\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_4","title":"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b","text":"<p>\u8f93\u5165 #1\u590d\u5236</p> Text Only<pre><code>10 3\n</code></pre> <p>\u8f93\u51fa #1\u590d\u5236</p> Text Only<pre><code>3 6 9 2 7 1 8 5 10 4\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_5","title":"\u8bf4\u660e/\u63d0\u793a","text":"<p>1\u2264m,n\u22641001\u2264m,n\u2264100</p>"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_6","title":"\u601d\u8def\uff1a","text":"<p>\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u94fe\u8868\u7684\u5e94\u7528\uff0c\u6bcf\u6b21\u904d\u5386\u7684\u65f6\u5019\u5c31\u5bfb\u627e\u7b2cm\u4e2a\u5143\u7d20\uff0c\u627e\u5230\u540e\uff0c\u5c06\u8be5\u5143\u7d20\u4ece\u94fe\u8868\u4e2d\u5254\u9664\u51fa\u53bb\uff0c\u7136\u540e\u8ba1\u6570\u56de\u52301.\u4ece\u65b0\u8ba1\u6570\u5230\u7b2cm\u4e2a\u5143\u7d20\u3002\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u4ee3\u7801\uff1a</p> C++<pre><code>#include&lt;bits/stdc++.h&gt;\nstruct node{\n    int data;\n    node *next;\n};\nint main(){\n    int n,m;scanf(\" %d %d\",&amp;n,&amp;m);\n    //\u521d\u59cb\u5316\u94fe\u8868\n    node* head,* p,*cur,*prev;\n    head=new node;head-&gt;data=1;\n    head-&gt;next=NULL;\n    cur=head;\n    for(int i=2;i&lt;n+1;i++){\n        p=new node;\n        p-&gt;data=i;\n        p-&gt;next=head;\n        cur-&gt;next=p;\n        cur=p;\n    }\n    //cur-&gt;next=head;\n    cur=head;prev=head;\n    //\u51fd\u6570\u6267\u884c\u4e3b\u4f53\n    while((n--)&gt;1){\n        for(int i=1;i&lt;m;i++){\n            prev=cur;\n            cur=cur-&gt;next;\n        }\n        printf(\"%d \",cur-&gt;data);\n        prev-&gt;next=cur-&gt;next;\n        delete cur;\n        cur=prev-&gt;next;\n    }\n    printf(\"%d\",cur-&gt;data);\n    delete cur;\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u662f\u7b80\u5355\u904d\u5386\u7248\u672c\u3002</p> <p>\u6ce8\u610f\uff1a\u5728\u6253\u5370\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u6253\u5370\u7ed3\u679c\u4e0d\u80fd\u6709\u7a7a\u683c\uff0c\u6211\u5728\u505a\u7684\u65f6\u5019\uff0c\u6ca1\u6ce8\u610f\u8fd9\u4e00\u70b9\uff0c\u4e00\u76f4\u663e\u793aunaccepted\uff0c\u7ed9\u6211\u5361\u4e86\u51e0\u5341\u5206\u949f\uff0c\u4eba\u9ebb\u4e86\uff0c\u8981\u6ce8\u610f\u6253\u5370\u8f93\u51fa\u7684\u683c\u5f0f\uff0c\u6709\u7684\u65f6\u5019\u9898\u76ee\u7ed9\u7684\u4e0d\u592a\u8be6\u7ec6\u3002</p> <p>\u63a8\u8350\u4e00\u4e2a\u5728\u7ebf\u7f16\u8bd1\u7f51\u7ad9\uff1ahttps://tio.run/#ecpp-cpp</p> <p>\u53ef\u4ee5\u5728\u7ebf\u8fd0\u884c\u7b97\u6cd5\u5e76\u8ba1\u7b97\u76f8\u5173\u53c2\u6570\u3002</p>"}]}